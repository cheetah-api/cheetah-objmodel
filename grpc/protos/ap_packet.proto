// @file
// @brief Packet I/O proto file
//
// ----------------------------------------------------------------
//  Copyright (c) 2017 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//

syntax = "proto3";
package cheetah;

import "ap_common_types.proto";

// @defgroup APPackets
// @ingroup System
// The following RPCs are used to register for packets that the
// client is interested in receiving
// @{
service APPackets {
    //
    // Packet registration operations
    //

    // APPacketsRegMsg.Oper = AP_REGOP_REGISTER
    //     Packet registration: Sends a list of Packet registration messages
    //     and expects a list of registration responses.
    //
    // APPacketsRegMsg.Oper = AP_REGOP_UNREGISTER
    //     Packet unregistration: Sends a list of Packet unregistration messages
    //     and expects a list of unregistration responses.
    //
    rpc APPacketsRegOp(APPacketsRegMsg) returns (APPacketsRegMsgRsp);

    //
    // Packet notifications
    //

    // This call is used to get a stream of packet notifications matching the
    // set of registrations performed with APPacketsRegOp().
    // The caller must maintain the GRPC channel as long as
    // there is interest in packet notifications. Only sessions that were
    // created through this API will be notified to caller.
    rpc APPacketsInitNotif(APPacketsGetNotifMsg) returns (stream APPacketsMsgRsp);

}

// Packet Get Notifications message
message APPacketsGetNotifMsg {

}

// Packet Registration messages
message APPacketsRegMsg {
    // Registration Operation
    APRegOp Oper = 1;

    // List of packet registrations
    repeated APPacketHdr PacketHdr = 2;
}

// Packet Registration message response
message APPacketsRegMsgRsp {

    // Summary result of the bulk operation (refer to enum APErrorStatus)
    //
    // In general, the ErrStatus consists of:
    // 1. AP_SUCCESS: signifies that the entire bulk operation was successful.
    //         In this case, the Results list is empty.
    // 2. AP_EINVAL: signifies that the operation failed for one or more entries
    //         In this case, Results holds the result for each individual entry
    //         that was in error
    APErrorStatus ErrStatus = 1;

    // In case of errors, this field contains all the entries that were in error
    APPacketsRegMsg Results = 2;
}

// The message type defining the category of packets to be retrieved
enum APMsgType {
    // Reserved. 0x0
    AP_MSG_TYPE_RESERVED = 0;

    // Traditional IEEE_TYPE_MANAGEMENT frames
    AP_MSG_TYPE_MGMT = 1;

    // Traditional IEEE_TYPE_CONTROL frames
    AP_MSG_TYPE_CTRL = 2;

    // Combination of IEEE_TYPE_DATA frames as well as other types (e.g, QOS_DATA)
    AP_MSG_TYPE_DATA = 3;

    // Cisco proprietary frames
    AP_MSG_TYPE_CISCO = 4;
}

// The message subtype for the AP_MSG_TYPE_MGMT message type category
enum APMgmtMsgSubtype {
    // Reserved. 0x0
    AP_MGMT_MSG_SUBTYPE_RESERVED = 0x0;

    // Association packets
    AP_MGMT_MSG_SUBTYPE_ASSOC = 0x1;

    // Authentication packets
    AP_MGMT_MSG_SUBTYPE_AUTH = 0x2;

    // Probe packets
    AP_MGMT_MSG_SUBTYPE_PROBE = 0x4;

    // All packets
    AP_MGMT_MSG_SUBTYPE_ALL = 0xFFFF;
}

// The message subtype for the AP_MSG_TYPE_CTRL message type category
enum APCtrlMsgSubtype {
    // Reserved. 0x0
    AP_CTRL_MSG_SUBTYPE_RESERVED = 0x0;

    // All packets
    AP_CTRL_MSG_SUBTYPE_ALL = 0xFFFF;
}

// The message subtype for the AP_MSG_TYPE_DATA message type category
enum APDataMsgSubtype {
    // Reserved. 0x0
    AP_DATA_MSG_SUBTYPE_RESERVED = 0x0;

    // ARP
    AP_DATA_MSG_SUBTYPE_ARP = 0x1;

    // DHCP
    AP_DATA_MSG_SUBTYPE_DHCP = 0x2;

    // EAP
    AP_DATA_MSG_SUBTYPE_EAP = 0x4;

    // ICMP
    AP_DATA_MSG_SUBTYPE_ICMP = 0x8;

    // All packets
    AP_DATA_MSG_SUBTYPE_ALL = 0xFFFF;
}

// The message subtype for the AP_MSG_TYPE_CISCO message type category
enum APCiscoMsgSubtype {
    // Reserved. 0x0
    AP_CISCO_MSG_SUBTYPE_RESERVED = 0x0;

    // NDP
    AP_CISCO_MSG_SUBTYPE_NDP = 0x1;

    // All packets
    AP_CISCO_MSG_SUBTYPE_ALL = 0xFFFF;
}

// The packet type/subtype definition
message APPacketHdr {

    // AP Message Type, e.g.
    //    AP_MSG_TYPE_MGMT
    APMsgType MsgType = 1;

    // AP Message Subtype
    //
    // It could be a mask for the request message, e.g:
    //     AP_MGMT_MSG_SUBTYPE_ASSOC | AP_MGMT_MSG_SUBTYPE_AUTH, or just
    //     AP_DATA_MSG_SUBTYPE_ICMP
    //
    // It must be unary for the response message
    //
    oneof Subtype {
        // case MsgType == AP_MSG_TYPE_MGMT:
        APMgmtMsgSubtype mgmt = 2;

        // case MsgType == AP_MSG_TYPE_CONTROL:
        APCtrlMsgSubtype ctrl = 3;

        // case MsgType == AP_MSG_TYPE_DATA:
        APDataMsgSubtype data = 4;

        // case MsgType == AP_MSG_TYPE_CISCO:
        APCiscoMsgSubtype cisco = 5;
    }
}

// Packet message response
message APPacketsMsgRsp {
    // Corresponding error code
    APErrorStatus ErrStatus = 1;

    // Type of pushed packet
    APPacketHdr PacketHdr = 2;

    // Length of pushed packet
    uint32 PacketLen = 3;

    // Buffer carrying the packet
    bytes PacketBuf = 4;
}
// @}
