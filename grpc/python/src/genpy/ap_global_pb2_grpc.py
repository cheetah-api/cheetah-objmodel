# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ap_global_pb2 as ap__global__pb2


class APGlobalStub(object):
  """@defgroup APGlobal
  @ingroup System
  Global Initialization and Notifications.
  The following RPCs are used in global initialization and capability queries.
  @{
  @addtogroup APGlobal
  @{
  /;
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.APGlobalInitNotif = channel.unary_stream(
        '/cheetah.APGlobal/APGlobalInitNotif',
        request_serializer=ap__global__pb2.APInitMsg.SerializeToString,
        response_deserializer=ap__global__pb2.APGlobalNotif.FromString,
        )
    self.APGlobalsGet = channel.unary_unary(
        '/cheetah.APGlobal/APGlobalsGet',
        request_serializer=ap__global__pb2.APGlobalsGetMsg.SerializeToString,
        response_deserializer=ap__global__pb2.APGlobalsGetMsgRsp.FromString,
        )


class APGlobalServicer(object):
  """@defgroup APGlobal
  @ingroup System
  Global Initialization and Notifications.
  The following RPCs are used in global initialization and capability queries.
  @{
  @addtogroup APGlobal
  @{
  /;
  """

  def APGlobalInitNotif(self, request, context):
    """Initialize the connection, and setup a notification channel.
    This MUST be the first call to setup the Access Point connection.

    The caller MUST maintain the notification channel to be able to
    communicate with the server.
    If this channel is not properly established and maintained, all other
    RPC requests are rejected.

    The caller must send its version information as part of the APInitMsg
    message. The server will reply with AP_GLOBAL_EVENT_TYPE_VERSION
    that tells the caller whether he can proceed or not.
    Refer to message APGlobalNotif below for further details.

    After the version handshake, the notification channel is used for
    "push" event notifications, such as:
    - APGlobalNotif.EventType = AP_GLOBAL_EVENT_TYPE_HEARTBEAT
    heartbeat notification messages are sent to the client on
    a periodic basis.
    Refer to APGlobalNotif definition for further info.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def APGlobalsGet(self, request, context):
    """Get platform specific globals
    @}
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_APGlobalServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'APGlobalInitNotif': grpc.unary_stream_rpc_method_handler(
          servicer.APGlobalInitNotif,
          request_deserializer=ap__global__pb2.APInitMsg.FromString,
          response_serializer=ap__global__pb2.APGlobalNotif.SerializeToString,
      ),
      'APGlobalsGet': grpc.unary_unary_rpc_method_handler(
          servicer.APGlobalsGet,
          request_deserializer=ap__global__pb2.APGlobalsGetMsg.FromString,
          response_serializer=ap__global__pb2.APGlobalsGetMsgRsp.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cheetah.APGlobal', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
