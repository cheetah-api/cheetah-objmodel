# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ap_stats_pb2 as ap__stats__pb2


class APStatisticsStub(object):
  """@defgroup APStatistics
  @ingroup System
  Access Point Statistics.
  @{
  @addtogroup APStatistics
  @{
  Various RPC calls to get statistics for system, wlan, radio, etc
  /;
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.APStatsGet = channel.unary_stream(
        '/cheetah.APStatistics/APStatsGet',
        request_serializer=ap__stats__pb2.APStatsMsg.SerializeToString,
        response_deserializer=ap__stats__pb2.APStatsMsgRsp.FromString,
        )


class APStatisticsServicer(object):
  """@defgroup APStatistics
  @ingroup System
  Access Point Statistics.
  @{
  @addtogroup APStatistics
  @{
  Various RPC calls to get statistics for system, wlan, radio, etc
  /;
  """

  def APStatsGet(self, request, context):
    """Get statistics
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_APStatisticsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'APStatsGet': grpc.unary_stream_rpc_method_handler(
          servicer.APStatsGet,
          request_deserializer=ap__stats__pb2.APStatsMsg.FromString,
          response_serializer=ap__stats__pb2.APStatsMsgRsp.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cheetah.APStatistics', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
