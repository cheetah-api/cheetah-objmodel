// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ap_global.proto
// Original file comments:
// @file
// @brief Server RPC proto file. Client invokes to init the session
// on server.
//
// ----------------------------------------------------------------
//  Copyright (c) 2016 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#ifndef GRPC_ap_5fglobal_2eproto__INCLUDED
#define GRPC_ap_5fglobal_2eproto__INCLUDED

#include "ap_global.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace cheetah {

// @defgroup APGlobal
// @ingroup System
// Global Initialization and Notifications.
// The following RPCs are used in global initialization and capability queries.
// @{
class APGlobal final {
 public:
  static constexpr char const* service_full_name() {
    return "cheetah.APGlobal";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initialize the connection, and setup a notification channel.
    // This MUST be the first call to setup the Access Point connection.
    //
    // The caller MUST maintain the notification channel to be able to
    // communicate with the server.
    // If this channel is not properly established and maintained, all other
    // RPC requests are rejected.
    //
    // The caller must send its version information as part of the APInitMsg
    // message. The server will reply with AP_GLOBAL_EVENT_TYPE_VERSION
    // that tells the caller whether he can proceed or not.
    // Refer to message APGlobalNotif below for further details.
    //
    // After the version handshake, the notification channel is used for
    // "push" event notifications, such as:
    //    - APGlobalNotif.EventType = AP_GLOBAL_EVENT_TYPE_HEARTBEAT
    //        heartbeat notification messages are sent to the client on
    //        a periodic basis.
    //    Refer to APGlobalNotif definition for further info.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::cheetah::APGlobalNotif>> APGlobalInitNotif(::grpc::ClientContext* context, const ::cheetah::APInitMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::cheetah::APGlobalNotif>>(APGlobalInitNotifRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cheetah::APGlobalNotif>> AsyncAPGlobalInitNotif(::grpc::ClientContext* context, const ::cheetah::APInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cheetah::APGlobalNotif>>(AsyncAPGlobalInitNotifRaw(context, request, cq, tag));
    }
    // Get platform specific globals
    virtual ::grpc::Status APGlobalsGet(::grpc::ClientContext* context, const ::cheetah::APGlobalsGetMsg& request, ::cheetah::APGlobalsGetMsgRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cheetah::APGlobalsGetMsgRsp>> AsyncAPGlobalsGet(::grpc::ClientContext* context, const ::cheetah::APGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cheetah::APGlobalsGetMsgRsp>>(AsyncAPGlobalsGetRaw(context, request, cq));
    }
    // @}
  private:
    virtual ::grpc::ClientReaderInterface< ::cheetah::APGlobalNotif>* APGlobalInitNotifRaw(::grpc::ClientContext* context, const ::cheetah::APInitMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cheetah::APGlobalNotif>* AsyncAPGlobalInitNotifRaw(::grpc::ClientContext* context, const ::cheetah::APInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cheetah::APGlobalsGetMsgRsp>* AsyncAPGlobalsGetRaw(::grpc::ClientContext* context, const ::cheetah::APGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::cheetah::APGlobalNotif>> APGlobalInitNotif(::grpc::ClientContext* context, const ::cheetah::APInitMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::cheetah::APGlobalNotif>>(APGlobalInitNotifRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cheetah::APGlobalNotif>> AsyncAPGlobalInitNotif(::grpc::ClientContext* context, const ::cheetah::APInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cheetah::APGlobalNotif>>(AsyncAPGlobalInitNotifRaw(context, request, cq, tag));
    }
    ::grpc::Status APGlobalsGet(::grpc::ClientContext* context, const ::cheetah::APGlobalsGetMsg& request, ::cheetah::APGlobalsGetMsgRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cheetah::APGlobalsGetMsgRsp>> AsyncAPGlobalsGet(::grpc::ClientContext* context, const ::cheetah::APGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cheetah::APGlobalsGetMsgRsp>>(AsyncAPGlobalsGetRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::cheetah::APGlobalNotif>* APGlobalInitNotifRaw(::grpc::ClientContext* context, const ::cheetah::APInitMsg& request) override;
    ::grpc::ClientAsyncReader< ::cheetah::APGlobalNotif>* AsyncAPGlobalInitNotifRaw(::grpc::ClientContext* context, const ::cheetah::APInitMsg& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::cheetah::APGlobalsGetMsgRsp>* AsyncAPGlobalsGetRaw(::grpc::ClientContext* context, const ::cheetah::APGlobalsGetMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_APGlobalInitNotif_;
    const ::grpc::RpcMethod rpcmethod_APGlobalsGet_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initialize the connection, and setup a notification channel.
    // This MUST be the first call to setup the Access Point connection.
    //
    // The caller MUST maintain the notification channel to be able to
    // communicate with the server.
    // If this channel is not properly established and maintained, all other
    // RPC requests are rejected.
    //
    // The caller must send its version information as part of the APInitMsg
    // message. The server will reply with AP_GLOBAL_EVENT_TYPE_VERSION
    // that tells the caller whether he can proceed or not.
    // Refer to message APGlobalNotif below for further details.
    //
    // After the version handshake, the notification channel is used for
    // "push" event notifications, such as:
    //    - APGlobalNotif.EventType = AP_GLOBAL_EVENT_TYPE_HEARTBEAT
    //        heartbeat notification messages are sent to the client on
    //        a periodic basis.
    //    Refer to APGlobalNotif definition for further info.
    virtual ::grpc::Status APGlobalInitNotif(::grpc::ServerContext* context, const ::cheetah::APInitMsg* request, ::grpc::ServerWriter< ::cheetah::APGlobalNotif>* writer);
    // Get platform specific globals
    virtual ::grpc::Status APGlobalsGet(::grpc::ServerContext* context, const ::cheetah::APGlobalsGetMsg* request, ::cheetah::APGlobalsGetMsgRsp* response);
    // @}
  };
  template <class BaseClass>
  class WithAsyncMethod_APGlobalInitNotif : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_APGlobalInitNotif() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_APGlobalInitNotif() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status APGlobalInitNotif(::grpc::ServerContext* context, const ::cheetah::APInitMsg* request, ::grpc::ServerWriter< ::cheetah::APGlobalNotif>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAPGlobalInitNotif(::grpc::ServerContext* context, ::cheetah::APInitMsg* request, ::grpc::ServerAsyncWriter< ::cheetah::APGlobalNotif>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_APGlobalsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_APGlobalsGet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_APGlobalsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status APGlobalsGet(::grpc::ServerContext* context, const ::cheetah::APGlobalsGetMsg* request, ::cheetah::APGlobalsGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAPGlobalsGet(::grpc::ServerContext* context, ::cheetah::APGlobalsGetMsg* request, ::grpc::ServerAsyncResponseWriter< ::cheetah::APGlobalsGetMsgRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_APGlobalInitNotif<WithAsyncMethod_APGlobalsGet<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_APGlobalInitNotif : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_APGlobalInitNotif() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_APGlobalInitNotif() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status APGlobalInitNotif(::grpc::ServerContext* context, const ::cheetah::APInitMsg* request, ::grpc::ServerWriter< ::cheetah::APGlobalNotif>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_APGlobalsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_APGlobalsGet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_APGlobalsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status APGlobalsGet(::grpc::ServerContext* context, const ::cheetah::APGlobalsGetMsg* request, ::cheetah::APGlobalsGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_APGlobalsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_APGlobalsGet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::cheetah::APGlobalsGetMsg, ::cheetah::APGlobalsGetMsgRsp>(std::bind(&WithStreamedUnaryMethod_APGlobalsGet<BaseClass>::StreamedAPGlobalsGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_APGlobalsGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status APGlobalsGet(::grpc::ServerContext* context, const ::cheetah::APGlobalsGetMsg* request, ::cheetah::APGlobalsGetMsgRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAPGlobalsGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cheetah::APGlobalsGetMsg,::cheetah::APGlobalsGetMsgRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_APGlobalsGet<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_APGlobalInitNotif : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_APGlobalInitNotif() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::SplitServerStreamingHandler< ::cheetah::APInitMsg, ::cheetah::APGlobalNotif>(std::bind(&WithSplitStreamingMethod_APGlobalInitNotif<BaseClass>::StreamedAPGlobalInitNotif, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_APGlobalInitNotif() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status APGlobalInitNotif(::grpc::ServerContext* context, const ::cheetah::APInitMsg* request, ::grpc::ServerWriter< ::cheetah::APGlobalNotif>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedAPGlobalInitNotif(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::cheetah::APInitMsg,::cheetah::APGlobalNotif>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_APGlobalInitNotif<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_APGlobalInitNotif<WithStreamedUnaryMethod_APGlobalsGet<Service > > StreamedService;
};
// @addtogroup APGlobal
// @{
// /;

}  // namespace cheetah


#endif  // GRPC_ap_5fglobal_2eproto__INCLUDED
