// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: ap_stats.proto
// Original file comments:
// @file
// @brief Statistics RPC proto file.
//
// ----------------------------------------------------------------
//  Copyright (c) 2017 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#ifndef GRPC_ap_5fstats_2eproto__INCLUDED
#define GRPC_ap_5fstats_2eproto__INCLUDED

#include "ap_stats.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace access_point {

// @defgroup APStatistics
// @ingroup System
// Access Point Statistics.
// @{
class APStatistics GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get statistics
    std::unique_ptr< ::grpc::ClientReaderInterface< ::access_point::APStatsMsgRsp>> APStatsGet(::grpc::ClientContext* context, const ::access_point::APStatsMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::access_point::APStatsMsgRsp>>(APStatsGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::access_point::APStatsMsgRsp>> AsyncAPStatsGet(::grpc::ClientContext* context, const ::access_point::APStatsMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::access_point::APStatsMsgRsp>>(AsyncAPStatsGetRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::access_point::APStatsMsgRsp>* APStatsGetRaw(::grpc::ClientContext* context, const ::access_point::APStatsMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::access_point::APStatsMsgRsp>* AsyncAPStatsGetRaw(::grpc::ClientContext* context, const ::access_point::APStatsMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::access_point::APStatsMsgRsp>> APStatsGet(::grpc::ClientContext* context, const ::access_point::APStatsMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::access_point::APStatsMsgRsp>>(APStatsGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::access_point::APStatsMsgRsp>> AsyncAPStatsGet(::grpc::ClientContext* context, const ::access_point::APStatsMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::access_point::APStatsMsgRsp>>(AsyncAPStatsGetRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::access_point::APStatsMsgRsp>* APStatsGetRaw(::grpc::ClientContext* context, const ::access_point::APStatsMsg& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::access_point::APStatsMsgRsp>* AsyncAPStatsGetRaw(::grpc::ClientContext* context, const ::access_point::APStatsMsg& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_APStatsGet_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get statistics
    virtual ::grpc::Status APStatsGet(::grpc::ServerContext* context, const ::access_point::APStatsMsg* request, ::grpc::ServerWriter< ::access_point::APStatsMsgRsp>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_APStatsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_APStatsGet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_APStatsGet() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status APStatsGet(::grpc::ServerContext* context, const ::access_point::APStatsMsg* request, ::grpc::ServerWriter< ::access_point::APStatsMsgRsp>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAPStatsGet(::grpc::ServerContext* context, ::access_point::APStatsMsg* request, ::grpc::ServerAsyncWriter< ::access_point::APStatsMsgRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_APStatsGet<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_APStatsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_APStatsGet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_APStatsGet() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status APStatsGet(::grpc::ServerContext* context, const ::access_point::APStatsMsg* request, ::grpc::ServerWriter< ::access_point::APStatsMsgRsp>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};
// @addtogroup APStatistics
// @{
// Various RPC calls to get statistics for system, wlan, radio, etc
// /;

}  // namespace access_point


#endif  // GRPC_ap_5fstats_2eproto__INCLUDED
