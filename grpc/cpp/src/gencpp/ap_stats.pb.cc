// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ap_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cheetah {

namespace {

const ::google::protobuf::Descriptor* APStatsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APStatsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* APStatsMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APStatsMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* APSystemStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APSystemStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlabInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlabInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* APMemoryStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APMemoryStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* APDNSStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APDNSStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPv4Route_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPv4Route_reflection_ = NULL;
const ::google::protobuf::Descriptor* APRoutingStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APRoutingStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MulticastCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MulticastCounter_reflection_ = NULL;
const ::google::protobuf::Descriptor* WLAN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WLAN_reflection_ = NULL;
const ::google::protobuf::Descriptor* WLANEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WLANEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* APWLANStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APWLANStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadioUtilization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadioUtilization_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadioCounters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadioCounters_reflection_ = NULL;
const ::google::protobuf::Descriptor* DfsState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DfsState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadioEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadioEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* APRadioStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APRadioStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* APClientEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APClientEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* APClientStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APClientStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* APInterfaceEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APInterfaceEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* APInterfaceStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APInterfaceStatsMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* APStatsMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APStatsMsgRsp_reflection_ = NULL;
struct APStatsMsgRspOneofInstance {
  const ::cheetah::APSystemStatsMsgRsp* systemstats_;
  const ::cheetah::APMemoryStatsMsgRsp* memorystats_;
  const ::cheetah::APInterfaceStatsMsgRsp* interfacestats_;
  const ::cheetah::APRoutingStatsMsgRsp* routingstats_;
  const ::cheetah::APDNSStatsMsgRsp* dnsstats_;
  const ::cheetah::APRadioStatsMsgRsp* radiostats_;
  const ::cheetah::APWLANStatsMsgRsp* wlanstats_;
  const ::cheetah::APClientStatsMsgRsp* clientstats_;
}* APStatsMsgRsp_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* APStatsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatsTimeInterval_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ap_5fstats_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ap_5fstats_2eproto() {
  protobuf_AddDesc_ap_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ap_stats.proto");
  GOOGLE_CHECK(file != NULL);
  APStatsRequest_descriptor_ = file->message_type(0);
  static const int APStatsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APStatsRequest, statstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APStatsRequest, timeinterval_),
  };
  APStatsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APStatsRequest_descriptor_,
      APStatsRequest::internal_default_instance(),
      APStatsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(APStatsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APStatsRequest, _internal_metadata_));
  APStatsMsg_descriptor_ = file->message_type(1);
  static const int APStatsMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APStatsMsg, statsrequest_),
  };
  APStatsMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APStatsMsg_descriptor_,
      APStatsMsg::internal_default_instance(),
      APStatsMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(APStatsMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APStatsMsg, _internal_metadata_));
  APSystemStatsMsgRsp_descriptor_ = file->message_type(2);
  static const int APSystemStatsMsgRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSystemStatsMsgRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSystemStatsMsgRsp, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSystemStatsMsgRsp, when_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSystemStatsMsgRsp, serialnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSystemStatsMsgRsp, productid_),
  };
  APSystemStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APSystemStatsMsgRsp_descriptor_,
      APSystemStatsMsgRsp::internal_default_instance(),
      APSystemStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(APSystemStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSystemStatsMsgRsp, _internal_metadata_));
  MemInfo_descriptor_ = file->message_type(3);
  static const int MemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, total_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, available_kb_),
  };
  MemInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemInfo_descriptor_,
      MemInfo::internal_default_instance(),
      MemInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MemInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, _internal_metadata_));
  SlabInfo_descriptor_ = file->message_type(4);
  static const int SlabInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlabInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlabInfo, activeobjs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlabInfo, numobjs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlabInfo, objsize_),
  };
  SlabInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SlabInfo_descriptor_,
      SlabInfo::internal_default_instance(),
      SlabInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(SlabInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlabInfo, _internal_metadata_));
  APMemoryStatsMsgRsp_descriptor_ = file->message_type(5);
  static const int APMemoryStatsMsgRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APMemoryStatsMsgRsp, procmeminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APMemoryStatsMsgRsp, topprocslabinfo_),
  };
  APMemoryStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APMemoryStatsMsgRsp_descriptor_,
      APMemoryStatsMsgRsp::internal_default_instance(),
      APMemoryStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(APMemoryStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APMemoryStatsMsgRsp, _internal_metadata_));
  APDNSStatsMsgRsp_descriptor_ = file->message_type(6);
  static const int APDNSStatsMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APDNSStatsMsgRsp, ip_),
  };
  APDNSStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APDNSStatsMsgRsp_descriptor_,
      APDNSStatsMsgRsp::internal_default_instance(),
      APDNSStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(APDNSStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APDNSStatsMsgRsp, _internal_metadata_));
  IPv4Route_descriptor_ = file->message_type(7);
  static const int IPv4Route_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPv4Route, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPv4Route, gateway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPv4Route, genmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPv4Route, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPv4Route, metric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPv4Route, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPv4Route, use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPv4Route, iface_),
  };
  IPv4Route_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IPv4Route_descriptor_,
      IPv4Route::internal_default_instance(),
      IPv4Route_offsets_,
      -1,
      -1,
      -1,
      sizeof(IPv4Route),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPv4Route, _internal_metadata_));
  APRoutingStatsMsgRsp_descriptor_ = file->message_type(8);
  static const int APRoutingStatsMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APRoutingStatsMsgRsp, ipv4routes_),
  };
  APRoutingStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APRoutingStatsMsgRsp_descriptor_,
      APRoutingStatsMsgRsp::internal_default_instance(),
      APRoutingStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(APRoutingStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APRoutingStatsMsgRsp, _internal_metadata_));
  MulticastCounter_descriptor_ = file->message_type(9);
  static const int MulticastCounter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulticastCounter, txmcastpkts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulticastCounter, txmcastbytes_),
  };
  MulticastCounter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MulticastCounter_descriptor_,
      MulticastCounter::internal_default_instance(),
      MulticastCounter_offsets_,
      -1,
      -1,
      -1,
      sizeof(MulticastCounter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulticastCounter, _internal_metadata_));
  WLAN_descriptor_ = file->message_type(10);
  static const int WLAN_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLAN, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLAN, ssid_),
  };
  WLAN_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WLAN_descriptor_,
      WLAN::internal_default_instance(),
      WLAN_offsets_,
      -1,
      -1,
      -1,
      sizeof(WLAN),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLAN, _internal_metadata_));
  WLANEntry_descriptor_ = file->message_type(11);
  static const int WLANEntry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLANEntry, wlan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLANEntry, radioindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLANEntry, bssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLANEntry, dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLANEntry, numclients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLANEntry, counter_),
  };
  WLANEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WLANEntry_descriptor_,
      WLANEntry::internal_default_instance(),
      WLANEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(WLANEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLANEntry, _internal_metadata_));
  APWLANStatsMsgRsp_descriptor_ = file->message_type(12);
  static const int APWLANStatsMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APWLANStatsMsgRsp, wlanentries_),
  };
  APWLANStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APWLANStatsMsgRsp_descriptor_,
      APWLANStatsMsgRsp::internal_default_instance(),
      APWLANStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(APWLANStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APWLANStatsMsgRsp, _internal_metadata_));
  RadioUtilization_descriptor_ = file->message_type(13);
  static const int RadioUtilization_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioUtilization, all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioUtilization, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioUtilization, rxinbss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioUtilization, rxotherbss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioUtilization, nonwifi_),
  };
  RadioUtilization_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadioUtilization_descriptor_,
      RadioUtilization::internal_default_instance(),
      RadioUtilization_offsets_,
      -1,
      -1,
      -1,
      sizeof(RadioUtilization),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioUtilization, _internal_metadata_));
  RadioCounters_descriptor_ = file->message_type(14);
  static const int RadioCounters_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioCounters, txbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioCounters, txpkts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioCounters, txmgmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioCounters, txerrors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioCounters, rxbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioCounters, rxpkts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioCounters, rxmgmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioCounters, rxerrors_),
  };
  RadioCounters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadioCounters_descriptor_,
      RadioCounters::internal_default_instance(),
      RadioCounters_offsets_,
      -1,
      -1,
      -1,
      sizeof(RadioCounters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioCounters, _internal_metadata_));
  DfsState_descriptor_ = file->message_type(15);
  static const int DfsState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsState, cacstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsState, radardetected_),
  };
  DfsState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DfsState_descriptor_,
      DfsState::internal_default_instance(),
      DfsState_offsets_,
      -1,
      -1,
      -1,
      sizeof(DfsState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsState, _internal_metadata_));
  RadioEntry_descriptor_ = file->message_type(16);
  static const int RadioEntry_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, secondarychannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, noisefloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, maxtxpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, antennarssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, dfs_),
  };
  RadioEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadioEntry_descriptor_,
      RadioEntry::internal_default_instance(),
      RadioEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(RadioEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadioEntry, _internal_metadata_));
  APRadioStatsMsgRsp_descriptor_ = file->message_type(17);
  static const int APRadioStatsMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APRadioStatsMsgRsp, radios_),
  };
  APRadioStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APRadioStatsMsgRsp_descriptor_,
      APRadioStatsMsgRsp::internal_default_instance(),
      APRadioStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(APRadioStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APRadioStatsMsgRsp, _internal_metadata_));
  APClientEntry_descriptor_ = file->message_type(18);
  static const int APClientEntry_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, radioindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, band_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, wlan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, connectedtimesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, inactivetimemillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, rssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, nf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, antennarssi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, txbitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, txunicastbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, txunicastpkts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, rxbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, rxpkts_),
  };
  APClientEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APClientEntry_descriptor_,
      APClientEntry::internal_default_instance(),
      APClientEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(APClientEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientEntry, _internal_metadata_));
  APClientStatsMsgRsp_descriptor_ = file->message_type(19);
  static const int APClientStatsMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientStatsMsgRsp, clients_),
  };
  APClientStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APClientStatsMsgRsp_descriptor_,
      APClientStatsMsgRsp::internal_default_instance(),
      APClientStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(APClientStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APClientStatsMsgRsp, _internal_metadata_));
  APInterfaceEntry_descriptor_ = file->message_type(20);
  static const int APInterfaceEntry_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, fullduplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, rxbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, rxpkts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, rxdiscards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, txbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, txpkts_),
  };
  APInterfaceEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APInterfaceEntry_descriptor_,
      APInterfaceEntry::internal_default_instance(),
      APInterfaceEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(APInterfaceEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceEntry, _internal_metadata_));
  APInterfaceStatsMsgRsp_descriptor_ = file->message_type(21);
  static const int APInterfaceStatsMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceStatsMsgRsp, interfaces_),
  };
  APInterfaceStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APInterfaceStatsMsgRsp_descriptor_,
      APInterfaceStatsMsgRsp::internal_default_instance(),
      APInterfaceStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(APInterfaceStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APInterfaceStatsMsgRsp, _internal_metadata_));
  APStatsMsgRsp_descriptor_ = file->message_type(22);
  static const int APStatsMsgRsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APStatsMsgRsp, errstatus_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APStatsMsgRsp_default_oneof_instance_, systemstats_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APStatsMsgRsp_default_oneof_instance_, memorystats_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APStatsMsgRsp_default_oneof_instance_, interfacestats_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APStatsMsgRsp_default_oneof_instance_, routingstats_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APStatsMsgRsp_default_oneof_instance_, dnsstats_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APStatsMsgRsp_default_oneof_instance_, radiostats_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APStatsMsgRsp_default_oneof_instance_, wlanstats_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APStatsMsgRsp_default_oneof_instance_, clientstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APStatsMsgRsp, msg_rsp_),
  };
  APStatsMsgRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APStatsMsgRsp_descriptor_,
      APStatsMsgRsp::internal_default_instance(),
      APStatsMsgRsp_offsets_,
      -1,
      -1,
      -1,
      APStatsMsgRsp_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APStatsMsgRsp, _oneof_case_[0]),
      sizeof(APStatsMsgRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APStatsMsgRsp, _internal_metadata_));
  APStatsType_descriptor_ = file->enum_type(0);
  StatsTimeInterval_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ap_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APStatsRequest_descriptor_, APStatsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APStatsMsg_descriptor_, APStatsMsg::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APSystemStatsMsgRsp_descriptor_, APSystemStatsMsgRsp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemInfo_descriptor_, MemInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SlabInfo_descriptor_, SlabInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APMemoryStatsMsgRsp_descriptor_, APMemoryStatsMsgRsp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APDNSStatsMsgRsp_descriptor_, APDNSStatsMsgRsp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IPv4Route_descriptor_, IPv4Route::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APRoutingStatsMsgRsp_descriptor_, APRoutingStatsMsgRsp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MulticastCounter_descriptor_, MulticastCounter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WLAN_descriptor_, WLAN::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WLANEntry_descriptor_, WLANEntry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APWLANStatsMsgRsp_descriptor_, APWLANStatsMsgRsp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadioUtilization_descriptor_, RadioUtilization::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadioCounters_descriptor_, RadioCounters::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DfsState_descriptor_, DfsState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadioEntry_descriptor_, RadioEntry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APRadioStatsMsgRsp_descriptor_, APRadioStatsMsgRsp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APClientEntry_descriptor_, APClientEntry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APClientStatsMsgRsp_descriptor_, APClientStatsMsgRsp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APInterfaceEntry_descriptor_, APInterfaceEntry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APInterfaceStatsMsgRsp_descriptor_, APInterfaceStatsMsgRsp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APStatsMsgRsp_descriptor_, APStatsMsgRsp::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ap_5fstats_2eproto() {
  APStatsRequest_default_instance_.Shutdown();
  delete APStatsRequest_reflection_;
  APStatsMsg_default_instance_.Shutdown();
  delete APStatsMsg_reflection_;
  APSystemStatsMsgRsp_default_instance_.Shutdown();
  delete APSystemStatsMsgRsp_reflection_;
  MemInfo_default_instance_.Shutdown();
  delete MemInfo_reflection_;
  SlabInfo_default_instance_.Shutdown();
  delete SlabInfo_reflection_;
  APMemoryStatsMsgRsp_default_instance_.Shutdown();
  delete APMemoryStatsMsgRsp_reflection_;
  APDNSStatsMsgRsp_default_instance_.Shutdown();
  delete APDNSStatsMsgRsp_reflection_;
  IPv4Route_default_instance_.Shutdown();
  delete IPv4Route_reflection_;
  APRoutingStatsMsgRsp_default_instance_.Shutdown();
  delete APRoutingStatsMsgRsp_reflection_;
  MulticastCounter_default_instance_.Shutdown();
  delete MulticastCounter_reflection_;
  WLAN_default_instance_.Shutdown();
  delete WLAN_reflection_;
  WLANEntry_default_instance_.Shutdown();
  delete WLANEntry_reflection_;
  APWLANStatsMsgRsp_default_instance_.Shutdown();
  delete APWLANStatsMsgRsp_reflection_;
  RadioUtilization_default_instance_.Shutdown();
  delete RadioUtilization_reflection_;
  RadioCounters_default_instance_.Shutdown();
  delete RadioCounters_reflection_;
  DfsState_default_instance_.Shutdown();
  delete DfsState_reflection_;
  RadioEntry_default_instance_.Shutdown();
  delete RadioEntry_reflection_;
  APRadioStatsMsgRsp_default_instance_.Shutdown();
  delete APRadioStatsMsgRsp_reflection_;
  APClientEntry_default_instance_.Shutdown();
  delete APClientEntry_reflection_;
  APClientStatsMsgRsp_default_instance_.Shutdown();
  delete APClientStatsMsgRsp_reflection_;
  APInterfaceEntry_default_instance_.Shutdown();
  delete APInterfaceEntry_reflection_;
  APInterfaceStatsMsgRsp_default_instance_.Shutdown();
  delete APInterfaceStatsMsgRsp_reflection_;
  APStatsMsgRsp_default_instance_.Shutdown();
  delete APStatsMsgRsp_default_oneof_instance_;
  delete APStatsMsgRsp_reflection_;
}

void protobuf_InitDefaults_ap_5fstats_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cheetah::protobuf_InitDefaults_ap_5fcommon_5ftypes_2eproto();
  APStatsRequest_default_instance_.DefaultConstruct();
  APStatsMsg_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  APSystemStatsMsgRsp_default_instance_.DefaultConstruct();
  MemInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SlabInfo_default_instance_.DefaultConstruct();
  APMemoryStatsMsgRsp_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  APDNSStatsMsgRsp_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  IPv4Route_default_instance_.DefaultConstruct();
  APRoutingStatsMsgRsp_default_instance_.DefaultConstruct();
  MulticastCounter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  WLAN_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  WLANEntry_default_instance_.DefaultConstruct();
  APWLANStatsMsgRsp_default_instance_.DefaultConstruct();
  RadioUtilization_default_instance_.DefaultConstruct();
  RadioCounters_default_instance_.DefaultConstruct();
  DfsState_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RadioEntry_default_instance_.DefaultConstruct();
  APRadioStatsMsgRsp_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  APClientEntry_default_instance_.DefaultConstruct();
  APClientStatsMsgRsp_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  APInterfaceEntry_default_instance_.DefaultConstruct();
  APInterfaceStatsMsgRsp_default_instance_.DefaultConstruct();
  APStatsMsgRsp_default_instance_.DefaultConstruct();
  APStatsMsgRsp_default_oneof_instance_ = new APStatsMsgRspOneofInstance();
  APStatsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  APStatsMsg_default_instance_.get_mutable()->InitAsDefaultInstance();
  APSystemStatsMsgRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
  MemInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  SlabInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  APMemoryStatsMsgRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
  APDNSStatsMsgRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
  IPv4Route_default_instance_.get_mutable()->InitAsDefaultInstance();
  APRoutingStatsMsgRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
  MulticastCounter_default_instance_.get_mutable()->InitAsDefaultInstance();
  WLAN_default_instance_.get_mutable()->InitAsDefaultInstance();
  WLANEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  APWLANStatsMsgRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
  RadioUtilization_default_instance_.get_mutable()->InitAsDefaultInstance();
  RadioCounters_default_instance_.get_mutable()->InitAsDefaultInstance();
  DfsState_default_instance_.get_mutable()->InitAsDefaultInstance();
  RadioEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  APRadioStatsMsgRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
  APClientEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  APClientStatsMsgRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
  APInterfaceEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  APInterfaceStatsMsgRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
  APStatsMsgRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ap_5fstats_2eproto_once_);
void protobuf_InitDefaults_ap_5fstats_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ap_5fstats_2eproto_once_,
                 &protobuf_InitDefaults_ap_5fstats_2eproto_impl);
}
void protobuf_AddDesc_ap_5fstats_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ap_5fstats_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ap_stats.proto\022\007cheetah\032\025ap_common_typ"
    "es.proto\"O\n\016APStatsRequest\022\'\n\tStatsType\030"
    "\001 \001(\0162\024.cheetah.APStatsType\022\024\n\014TimeInter"
    "val\030\002 \001(\r\";\n\nAPStatsMsg\022-\n\014StatsRequest\030"
    "\001 \003(\0132\027.cheetah.APStatsRequest\"h\n\023APSyst"
    "emStatsMsgRsp\022\n\n\002ID\030\001 \001(\t\022\016\n\006Uptime\030\002 \001("
    "\r\022\014\n\004When\030\003 \001(\t\022\024\n\014SerialNumber\030\004 \001(\t\022\021\n"
    "\tProductId\030\005 \001(\t\"1\n\007MemInfo\022\020\n\010Total_kB\030"
    "\001 \001(\r\022\024\n\014Available_kB\030\002 \001(\r\"N\n\010SlabInfo\022"
    "\014\n\004Name\030\001 \001(\t\022\022\n\nActiveObjs\030\002 \001(\005\022\017\n\007Num"
    "Objs\030\003 \001(\005\022\017\n\007ObjSize\030\004 \001(\005\"h\n\023APMemoryS"
    "tatsMsgRsp\022%\n\013ProcMemInfo\030\001 \001(\0132\020.cheeta"
    "h.MemInfo\022*\n\017TopProcSlabInfo\030\002 \001(\0132\021.che"
    "etah.SlabInfo\"\036\n\020APDNSStatsMsgRsp\022\n\n\002IP\030"
    "\001 \003(\t\"\212\001\n\tIPv4Route\022\023\n\013Destination\030\001 \001(\t"
    "\022\017\n\007Gateway\030\002 \001(\t\022\017\n\007Genmask\030\003 \001(\t\022\r\n\005Fl"
    "ags\030\004 \001(\t\022\016\n\006Metric\030\005 \001(\r\022\013\n\003Ref\030\006 \001(\r\022\013"
    "\n\003Use\030\007 \001(\r\022\r\n\005Iface\030\010 \001(\t\">\n\024APRoutingS"
    "tatsMsgRsp\022&\n\nIPv4Routes\030\001 \003(\0132\022.cheetah"
    ".IPv4Route\"=\n\020MulticastCounter\022\023\n\013TxMcas"
    "tPkts\030\001 \001(\r\022\024\n\014TxMcastBytes\030\002 \001(\004\" \n\004WLA"
    "N\022\n\n\002ID\030\001 \001(\t\022\014\n\004SSID\030\002 \001(\t\"\230\001\n\tWLANEntr"
    "y\022\033\n\004Wlan\030\001 \001(\0132\r.cheetah.WLAN\022\022\n\nRadioI"
    "ndex\030\002 \001(\r\022\r\n\005BSSID\030\003 \001(\t\022\013\n\003Dev\030\004 \001(\t\022\022"
    "\n\nNumClients\030\005 \001(\005\022*\n\007Counter\030\006 \001(\0132\031.ch"
    "eetah.MulticastCounter\"<\n\021APWLANStatsMsg"
    "Rsp\022\'\n\013WLANEntries\030\001 \003(\0132\022.cheetah.WLANE"
    "ntry\"a\n\020RadioUtilization\022\013\n\003All\030\001 \001(\002\022\n\n"
    "\002Tx\030\002 \001(\002\022\017\n\007RxInBSS\030\003 \001(\002\022\022\n\nRxOtherBSS"
    "\030\004 \001(\002\022\017\n\007NonWifi\030\005 \001(\002\"\225\001\n\rRadioCounter"
    "s\022\017\n\007TxBytes\030\001 \001(\004\022\016\n\006TxPkts\030\002 \001(\r\022\016\n\006Tx"
    "Mgmt\030\003 \001(\r\022\020\n\010TxErrors\030\004 \001(\r\022\017\n\007RxBytes\030"
    "\005 \001(\004\022\016\n\006RxPkts\030\006 \001(\r\022\016\n\006RxMgmt\030\007 \001(\r\022\020\n"
    "\010RxErrors\030\010 \001(\r\"3\n\010DfsState\022\020\n\010CacState\030"
    "\001 \001(\r\022\025\n\rRadarDetected\030\002 \001(\010\"\233\002\n\nRadioEn"
    "try\022\013\n\003Dev\030\001 \001(\t\022\014\n\004Band\030\002 \001(\t\022\017\n\007Channe"
    "l\030\003 \001(\r\022\030\n\020SecondaryChannel\030\004 \001(\r\022\021\n\tBan"
    "dwidth\030\005 \001(\r\022\022\n\nNoiseFloor\030\006 \001(\005\022\022\n\nMaxT"
    "xPower\030\007 \001(\r\022.\n\013Utilization\030\010 \001(\0132\031.chee"
    "tah.RadioUtilization\022\023\n\013AntennaRSSI\030\t \003("
    "\005\022\'\n\007Counter\030\n \001(\0132\026.cheetah.RadioCounte"
    "rs\022\036\n\003DFS\030\013 \001(\0132\021.cheetah.DfsState\"9\n\022AP"
    "RadioStatsMsgRsp\022#\n\006Radios\030\001 \003(\0132\023.cheet"
    "ah.RadioEntry\"\245\002\n\rAPClientEntry\022\013\n\003MAC\030\002"
    " \001(\t\022\022\n\nRadioIndex\030\003 \001(\r\022\014\n\004Band\030\004 \001(\t\022\033"
    "\n\004Wlan\030\006 \001(\0132\r.cheetah.WLAN\022\030\n\020Connected"
    "TimeSec\030\007 \001(\r\022\034\n\024InactiveTimeMilliSec\030\010 "
    "\001(\r\022\014\n\004RSSI\030\t \001(\005\022\n\n\002NF\030\n \001(\005\022\023\n\013Antenna"
    "RSSI\030\013 \003(\005\022\021\n\tTxBitRate\030\014 \001(\005\022\026\n\016TxUnica"
    "stBytes\030\r \001(\004\022\025\n\rTxUnicastPkts\030\016 \001(\r\022\017\n\007"
    "RxBytes\030\017 \001(\004\022\016\n\006RxPkts\030\020 \001(\r\">\n\023APClien"
    "tStatsMsgRsp\022\'\n\007Clients\030\001 \003(\0132\026.cheetah."
    "APClientEntry\"\247\001\n\020APInterfaceEntry\022\014\n\004Na"
    "me\030\001 \001(\t\022\014\n\004Link\030\002 \001(\010\022\022\n\nFullDuplex\030\003 \001"
    "(\010\022\r\n\005Speed\030\004 \001(\r\022\017\n\007RxBytes\030\005 \001(\004\022\016\n\006Rx"
    "Pkts\030\006 \001(\r\022\022\n\nRxDiscards\030\007 \001(\r\022\017\n\007TxByte"
    "s\030\010 \001(\004\022\016\n\006TxPkts\030\t \001(\r\"G\n\026APInterfaceSt"
    "atsMsgRsp\022-\n\nInterfaces\030\001 \003(\0132\031.cheetah."
    "APInterfaceEntry\"\351\003\n\rAPStatsMsgRsp\022)\n\tEr"
    "rStatus\030\001 \001(\0132\026.cheetah.APErrorStatus\0223\n"
    "\013SystemStats\030\002 \001(\0132\034.cheetah.APSystemSta"
    "tsMsgRspH\000\0223\n\013MemoryStats\030\003 \001(\0132\034.cheeta"
    "h.APMemoryStatsMsgRspH\000\0229\n\016InterfaceStat"
    "s\030\004 \001(\0132\037.cheetah.APInterfaceStatsMsgRsp"
    "H\000\0225\n\014RoutingStats\030\005 \001(\0132\035.cheetah.APRou"
    "tingStatsMsgRspH\000\022-\n\010DNSStats\030\006 \001(\0132\031.ch"
    "eetah.APDNSStatsMsgRspH\000\0221\n\nRadioStats\030\007"
    " \001(\0132\033.cheetah.APRadioStatsMsgRspH\000\022/\n\tW"
    "LANStats\030\010 \001(\0132\032.cheetah.APWLANStatsMsgR"
    "spH\000\0223\n\013ClientStats\030\t \001(\0132\034.cheetah.APCl"
    "ientStatsMsgRspH\000B\t\n\007msg_rsp*\304\001\n\013APStats"
    "Type\022\017\n\013AP_RESERVED\020\000\022\023\n\017AP_SYSTEM_STATS"
    "\020\001\022\023\n\017AP_MEMORY_STATS\020\002\022\026\n\022AP_INTERFACE_"
    "STATS\020\003\022\024\n\020AP_ROUTING_STATS\020\004\022\020\n\014AP_DNS_"
    "STATS\020\005\022\022\n\016AP_RADIO_STATS\020\006\022\021\n\rAP_WLAN_S"
    "TATS\020\007\022\023\n\017AP_CLIENT_STATS\020\010*v\n\021StatsTime"
    "Interval\022\034\n\030AP_STATS_UNARY_OPERATION\020\000\022\037"
    "\n\033AP_STATS_ZERO_TIME_INTERVAL\020\000\022\036\n\032AP_ST"
    "ATS_MIN_TIME_INTERVAL\020\005\032\002\020\0012K\n\014APStatist"
    "ics\022;\n\nAPStatsGet\022\023.cheetah.APStatsMsg\032\026"
    ".cheetah.APStatsMsgRsp0\001b\006proto3", 3232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ap_stats.proto", &protobuf_RegisterTypes);
  ::cheetah::protobuf_AddDesc_ap_5fcommon_5ftypes_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ap_5fstats_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ap_5fstats_2eproto_once_);
void protobuf_AddDesc_ap_5fstats_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ap_5fstats_2eproto_once_,
                 &protobuf_AddDesc_ap_5fstats_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ap_5fstats_2eproto {
  StaticDescriptorInitializer_ap_5fstats_2eproto() {
    protobuf_AddDesc_ap_5fstats_2eproto();
  }
} static_descriptor_initializer_ap_5fstats_2eproto_;
const ::google::protobuf::EnumDescriptor* APStatsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APStatsType_descriptor_;
}
bool APStatsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatsTimeInterval_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatsTimeInterval_descriptor_;
}
bool StatsTimeInterval_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APStatsRequest::kStatsTypeFieldNumber;
const int APStatsRequest::kTimeIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APStatsRequest::APStatsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APStatsRequest)
}

void APStatsRequest::InitAsDefaultInstance() {
}

APStatsRequest::APStatsRequest(const APStatsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APStatsRequest)
}

void APStatsRequest::SharedCtor() {
  ::memset(&statstype_, 0, reinterpret_cast<char*>(&timeinterval_) -
    reinterpret_cast<char*>(&statstype_) + sizeof(timeinterval_));
  _cached_size_ = 0;
}

APStatsRequest::~APStatsRequest() {
  // @@protoc_insertion_point(destructor:cheetah.APStatsRequest)
  SharedDtor();
}

void APStatsRequest::SharedDtor() {
}

void APStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APStatsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APStatsRequest_descriptor_;
}

const APStatsRequest& APStatsRequest::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APStatsRequest> APStatsRequest_default_instance_;

APStatsRequest* APStatsRequest::New(::google::protobuf::Arena* arena) const {
  APStatsRequest* n = new APStatsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APStatsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(APStatsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<APStatsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(statstype_, timeinterval_);

#undef ZR_HELPER_
#undef ZR_

}

bool APStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APStatsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cheetah.APStatsType StatsType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_statstype(static_cast< ::cheetah::APStatsType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TimeInterval;
        break;
      }

      // optional uint32 TimeInterval = 2;
      case 2: {
        if (tag == 16) {
         parse_TimeInterval:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeinterval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APStatsRequest)
  return false;
#undef DO_
}

void APStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APStatsRequest)
  // optional .cheetah.APStatsType StatsType = 1;
  if (this->statstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statstype(), output);
  }

  // optional uint32 TimeInterval = 2;
  if (this->timeinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeinterval(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APStatsRequest)
}

::google::protobuf::uint8* APStatsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APStatsRequest)
  // optional .cheetah.APStatsType StatsType = 1;
  if (this->statstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->statstype(), target);
  }

  // optional uint32 TimeInterval = 2;
  if (this->timeinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeinterval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APStatsRequest)
  return target;
}

size_t APStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APStatsRequest)
  size_t total_size = 0;

  // optional .cheetah.APStatsType StatsType = 1;
  if (this->statstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statstype());
  }

  // optional uint32 TimeInterval = 2;
  if (this->timeinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeinterval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APStatsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APStatsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APStatsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APStatsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APStatsRequest)
    UnsafeMergeFrom(*source);
  }
}

void APStatsRequest::MergeFrom(const APStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APStatsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APStatsRequest::UnsafeMergeFrom(const APStatsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.statstype() != 0) {
    set_statstype(from.statstype());
  }
  if (from.timeinterval() != 0) {
    set_timeinterval(from.timeinterval());
  }
}

void APStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APStatsRequest::CopyFrom(const APStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APStatsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APStatsRequest::IsInitialized() const {

  return true;
}

void APStatsRequest::Swap(APStatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APStatsRequest::InternalSwap(APStatsRequest* other) {
  std::swap(statstype_, other->statstype_);
  std::swap(timeinterval_, other->timeinterval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APStatsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APStatsRequest_descriptor_;
  metadata.reflection = APStatsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APStatsRequest

// optional .cheetah.APStatsType StatsType = 1;
void APStatsRequest::clear_statstype() {
  statstype_ = 0;
}
::cheetah::APStatsType APStatsRequest::statstype() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsRequest.StatsType)
  return static_cast< ::cheetah::APStatsType >(statstype_);
}
void APStatsRequest::set_statstype(::cheetah::APStatsType value) {
  
  statstype_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APStatsRequest.StatsType)
}

// optional uint32 TimeInterval = 2;
void APStatsRequest::clear_timeinterval() {
  timeinterval_ = 0u;
}
::google::protobuf::uint32 APStatsRequest::timeinterval() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsRequest.TimeInterval)
  return timeinterval_;
}
void APStatsRequest::set_timeinterval(::google::protobuf::uint32 value) {
  
  timeinterval_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APStatsRequest.TimeInterval)
}

inline const APStatsRequest* APStatsRequest::internal_default_instance() {
  return &APStatsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APStatsMsg::kStatsRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APStatsMsg::APStatsMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APStatsMsg)
}

void APStatsMsg::InitAsDefaultInstance() {
}

APStatsMsg::APStatsMsg(const APStatsMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APStatsMsg)
}

void APStatsMsg::SharedCtor() {
  _cached_size_ = 0;
}

APStatsMsg::~APStatsMsg() {
  // @@protoc_insertion_point(destructor:cheetah.APStatsMsg)
  SharedDtor();
}

void APStatsMsg::SharedDtor() {
}

void APStatsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APStatsMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APStatsMsg_descriptor_;
}

const APStatsMsg& APStatsMsg::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APStatsMsg> APStatsMsg_default_instance_;

APStatsMsg* APStatsMsg::New(::google::protobuf::Arena* arena) const {
  APStatsMsg* n = new APStatsMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APStatsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APStatsMsg)
  statsrequest_.Clear();
}

bool APStatsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APStatsMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cheetah.APStatsRequest StatsRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_StatsRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_statsrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_StatsRequest;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APStatsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APStatsMsg)
  return false;
#undef DO_
}

void APStatsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APStatsMsg)
  // repeated .cheetah.APStatsRequest StatsRequest = 1;
  for (unsigned int i = 0, n = this->statsrequest_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statsrequest(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APStatsMsg)
}

::google::protobuf::uint8* APStatsMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APStatsMsg)
  // repeated .cheetah.APStatsRequest StatsRequest = 1;
  for (unsigned int i = 0, n = this->statsrequest_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->statsrequest(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APStatsMsg)
  return target;
}

size_t APStatsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APStatsMsg)
  size_t total_size = 0;

  // repeated .cheetah.APStatsRequest StatsRequest = 1;
  {
    unsigned int count = this->statsrequest_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statsrequest(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APStatsMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APStatsMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APStatsMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APStatsMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APStatsMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APStatsMsg)
    UnsafeMergeFrom(*source);
  }
}

void APStatsMsg::MergeFrom(const APStatsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APStatsMsg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APStatsMsg::UnsafeMergeFrom(const APStatsMsg& from) {
  GOOGLE_DCHECK(&from != this);
  statsrequest_.MergeFrom(from.statsrequest_);
}

void APStatsMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APStatsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APStatsMsg::CopyFrom(const APStatsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APStatsMsg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APStatsMsg::IsInitialized() const {

  return true;
}

void APStatsMsg::Swap(APStatsMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APStatsMsg::InternalSwap(APStatsMsg* other) {
  statsrequest_.UnsafeArenaSwap(&other->statsrequest_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APStatsMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APStatsMsg_descriptor_;
  metadata.reflection = APStatsMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APStatsMsg

// repeated .cheetah.APStatsRequest StatsRequest = 1;
int APStatsMsg::statsrequest_size() const {
  return statsrequest_.size();
}
void APStatsMsg::clear_statsrequest() {
  statsrequest_.Clear();
}
const ::cheetah::APStatsRequest& APStatsMsg::statsrequest(int index) const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsg.StatsRequest)
  return statsrequest_.Get(index);
}
::cheetah::APStatsRequest* APStatsMsg::mutable_statsrequest(int index) {
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsg.StatsRequest)
  return statsrequest_.Mutable(index);
}
::cheetah::APStatsRequest* APStatsMsg::add_statsrequest() {
  // @@protoc_insertion_point(field_add:cheetah.APStatsMsg.StatsRequest)
  return statsrequest_.Add();
}
::google::protobuf::RepeatedPtrField< ::cheetah::APStatsRequest >*
APStatsMsg::mutable_statsrequest() {
  // @@protoc_insertion_point(field_mutable_list:cheetah.APStatsMsg.StatsRequest)
  return &statsrequest_;
}
const ::google::protobuf::RepeatedPtrField< ::cheetah::APStatsRequest >&
APStatsMsg::statsrequest() const {
  // @@protoc_insertion_point(field_list:cheetah.APStatsMsg.StatsRequest)
  return statsrequest_;
}

inline const APStatsMsg* APStatsMsg::internal_default_instance() {
  return &APStatsMsg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APSystemStatsMsgRsp::kIDFieldNumber;
const int APSystemStatsMsgRsp::kUptimeFieldNumber;
const int APSystemStatsMsgRsp::kWhenFieldNumber;
const int APSystemStatsMsgRsp::kSerialNumberFieldNumber;
const int APSystemStatsMsgRsp::kProductIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APSystemStatsMsgRsp::APSystemStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APSystemStatsMsgRsp)
}

void APSystemStatsMsgRsp::InitAsDefaultInstance() {
}

APSystemStatsMsgRsp::APSystemStatsMsgRsp(const APSystemStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APSystemStatsMsgRsp)
}

void APSystemStatsMsgRsp::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  when_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uptime_ = 0u;
  _cached_size_ = 0;
}

APSystemStatsMsgRsp::~APSystemStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:cheetah.APSystemStatsMsgRsp)
  SharedDtor();
}

void APSystemStatsMsgRsp::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  when_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APSystemStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APSystemStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APSystemStatsMsgRsp_descriptor_;
}

const APSystemStatsMsgRsp& APSystemStatsMsgRsp::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APSystemStatsMsgRsp> APSystemStatsMsgRsp_default_instance_;

APSystemStatsMsgRsp* APSystemStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  APSystemStatsMsgRsp* n = new APSystemStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APSystemStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APSystemStatsMsgRsp)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uptime_ = 0u;
  when_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool APSystemStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APSystemStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.APSystemStatsMsgRsp.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uptime;
        break;
      }

      // optional uint32 Uptime = 2;
      case 2: {
        if (tag == 16) {
         parse_Uptime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_When;
        break;
      }

      // optional string When = 3;
      case 3: {
        if (tag == 26) {
         parse_When:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_when()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->when().data(), this->when().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.APSystemStatsMsgRsp.When"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SerialNumber;
        break;
      }

      // optional string SerialNumber = 4;
      case 4: {
        if (tag == 34) {
         parse_SerialNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialnumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serialnumber().data(), this->serialnumber().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.APSystemStatsMsgRsp.SerialNumber"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ProductId;
        break;
      }

      // optional string ProductId = 5;
      case 5: {
        if (tag == 42) {
         parse_ProductId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.APSystemStatsMsgRsp.ProductId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APSystemStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APSystemStatsMsgRsp)
  return false;
#undef DO_
}

void APSystemStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APSystemStatsMsgRsp)
  // optional string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APSystemStatsMsgRsp.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional uint32 Uptime = 2;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uptime(), output);
  }

  // optional string When = 3;
  if (this->when().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->when().data(), this->when().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APSystemStatsMsgRsp.When");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->when(), output);
  }

  // optional string SerialNumber = 4;
  if (this->serialnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APSystemStatsMsgRsp.SerialNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serialnumber(), output);
  }

  // optional string ProductId = 5;
  if (this->productid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APSystemStatsMsgRsp.ProductId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->productid(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APSystemStatsMsgRsp)
}

::google::protobuf::uint8* APSystemStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APSystemStatsMsgRsp)
  // optional string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APSystemStatsMsgRsp.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint32 Uptime = 2;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uptime(), target);
  }

  // optional string When = 3;
  if (this->when().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->when().data(), this->when().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APSystemStatsMsgRsp.When");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->when(), target);
  }

  // optional string SerialNumber = 4;
  if (this->serialnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APSystemStatsMsgRsp.SerialNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serialnumber(), target);
  }

  // optional string ProductId = 5;
  if (this->productid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APSystemStatsMsgRsp.ProductId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->productid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APSystemStatsMsgRsp)
  return target;
}

size_t APSystemStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APSystemStatsMsgRsp)
  size_t total_size = 0;

  // optional string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional uint32 Uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uptime());
  }

  // optional string When = 3;
  if (this->when().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->when());
  }

  // optional string SerialNumber = 4;
  if (this->serialnumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serialnumber());
  }

  // optional string ProductId = 5;
  if (this->productid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APSystemStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APSystemStatsMsgRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APSystemStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APSystemStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APSystemStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APSystemStatsMsgRsp)
    UnsafeMergeFrom(*source);
  }
}

void APSystemStatsMsgRsp::MergeFrom(const APSystemStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APSystemStatsMsgRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APSystemStatsMsgRsp::UnsafeMergeFrom(const APSystemStatsMsgRsp& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.when().size() > 0) {

    when_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.when_);
  }
  if (from.serialnumber().size() > 0) {

    serialnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  if (from.productid().size() > 0) {

    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
}

void APSystemStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APSystemStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APSystemStatsMsgRsp::CopyFrom(const APSystemStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APSystemStatsMsgRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APSystemStatsMsgRsp::IsInitialized() const {

  return true;
}

void APSystemStatsMsgRsp::Swap(APSystemStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APSystemStatsMsgRsp::InternalSwap(APSystemStatsMsgRsp* other) {
  id_.Swap(&other->id_);
  std::swap(uptime_, other->uptime_);
  when_.Swap(&other->when_);
  serialnumber_.Swap(&other->serialnumber_);
  productid_.Swap(&other->productid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APSystemStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APSystemStatsMsgRsp_descriptor_;
  metadata.reflection = APSystemStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APSystemStatsMsgRsp

// optional string ID = 1;
void APSystemStatsMsgRsp::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& APSystemStatsMsgRsp::id() const {
  // @@protoc_insertion_point(field_get:cheetah.APSystemStatsMsgRsp.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APSystemStatsMsgRsp::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.APSystemStatsMsgRsp.ID)
}
void APSystemStatsMsgRsp::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.APSystemStatsMsgRsp.ID)
}
void APSystemStatsMsgRsp::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.APSystemStatsMsgRsp.ID)
}
::std::string* APSystemStatsMsgRsp::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.APSystemStatsMsgRsp.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APSystemStatsMsgRsp::release_id() {
  // @@protoc_insertion_point(field_release:cheetah.APSystemStatsMsgRsp.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APSystemStatsMsgRsp::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cheetah.APSystemStatsMsgRsp.ID)
}

// optional uint32 Uptime = 2;
void APSystemStatsMsgRsp::clear_uptime() {
  uptime_ = 0u;
}
::google::protobuf::uint32 APSystemStatsMsgRsp::uptime() const {
  // @@protoc_insertion_point(field_get:cheetah.APSystemStatsMsgRsp.Uptime)
  return uptime_;
}
void APSystemStatsMsgRsp::set_uptime(::google::protobuf::uint32 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APSystemStatsMsgRsp.Uptime)
}

// optional string When = 3;
void APSystemStatsMsgRsp::clear_when() {
  when_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& APSystemStatsMsgRsp::when() const {
  // @@protoc_insertion_point(field_get:cheetah.APSystemStatsMsgRsp.When)
  return when_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APSystemStatsMsgRsp::set_when(const ::std::string& value) {
  
  when_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.APSystemStatsMsgRsp.When)
}
void APSystemStatsMsgRsp::set_when(const char* value) {
  
  when_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.APSystemStatsMsgRsp.When)
}
void APSystemStatsMsgRsp::set_when(const char* value, size_t size) {
  
  when_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.APSystemStatsMsgRsp.When)
}
::std::string* APSystemStatsMsgRsp::mutable_when() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.APSystemStatsMsgRsp.When)
  return when_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APSystemStatsMsgRsp::release_when() {
  // @@protoc_insertion_point(field_release:cheetah.APSystemStatsMsgRsp.When)
  
  return when_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APSystemStatsMsgRsp::set_allocated_when(::std::string* when) {
  if (when != NULL) {
    
  } else {
    
  }
  when_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), when);
  // @@protoc_insertion_point(field_set_allocated:cheetah.APSystemStatsMsgRsp.When)
}

// optional string SerialNumber = 4;
void APSystemStatsMsgRsp::clear_serialnumber() {
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& APSystemStatsMsgRsp::serialnumber() const {
  // @@protoc_insertion_point(field_get:cheetah.APSystemStatsMsgRsp.SerialNumber)
  return serialnumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APSystemStatsMsgRsp::set_serialnumber(const ::std::string& value) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.APSystemStatsMsgRsp.SerialNumber)
}
void APSystemStatsMsgRsp::set_serialnumber(const char* value) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.APSystemStatsMsgRsp.SerialNumber)
}
void APSystemStatsMsgRsp::set_serialnumber(const char* value, size_t size) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.APSystemStatsMsgRsp.SerialNumber)
}
::std::string* APSystemStatsMsgRsp::mutable_serialnumber() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.APSystemStatsMsgRsp.SerialNumber)
  return serialnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APSystemStatsMsgRsp::release_serialnumber() {
  // @@protoc_insertion_point(field_release:cheetah.APSystemStatsMsgRsp.SerialNumber)
  
  return serialnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APSystemStatsMsgRsp::set_allocated_serialnumber(::std::string* serialnumber) {
  if (serialnumber != NULL) {
    
  } else {
    
  }
  serialnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnumber);
  // @@protoc_insertion_point(field_set_allocated:cheetah.APSystemStatsMsgRsp.SerialNumber)
}

// optional string ProductId = 5;
void APSystemStatsMsgRsp::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& APSystemStatsMsgRsp::productid() const {
  // @@protoc_insertion_point(field_get:cheetah.APSystemStatsMsgRsp.ProductId)
  return productid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APSystemStatsMsgRsp::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.APSystemStatsMsgRsp.ProductId)
}
void APSystemStatsMsgRsp::set_productid(const char* value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.APSystemStatsMsgRsp.ProductId)
}
void APSystemStatsMsgRsp::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.APSystemStatsMsgRsp.ProductId)
}
::std::string* APSystemStatsMsgRsp::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.APSystemStatsMsgRsp.ProductId)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APSystemStatsMsgRsp::release_productid() {
  // @@protoc_insertion_point(field_release:cheetah.APSystemStatsMsgRsp.ProductId)
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APSystemStatsMsgRsp::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:cheetah.APSystemStatsMsgRsp.ProductId)
}

inline const APSystemStatsMsgRsp* APSystemStatsMsgRsp::internal_default_instance() {
  return &APSystemStatsMsgRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemInfo::kTotalKBFieldNumber;
const int MemInfo::kAvailableKBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemInfo::MemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.MemInfo)
}

void MemInfo::InitAsDefaultInstance() {
}

MemInfo::MemInfo(const MemInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.MemInfo)
}

void MemInfo::SharedCtor() {
  ::memset(&total_kb_, 0, reinterpret_cast<char*>(&available_kb_) -
    reinterpret_cast<char*>(&total_kb_) + sizeof(available_kb_));
  _cached_size_ = 0;
}

MemInfo::~MemInfo() {
  // @@protoc_insertion_point(destructor:cheetah.MemInfo)
  SharedDtor();
}

void MemInfo::SharedDtor() {
}

void MemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemInfo_descriptor_;
}

const MemInfo& MemInfo::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MemInfo> MemInfo_default_instance_;

MemInfo* MemInfo::New(::google::protobuf::Arena* arena) const {
  MemInfo* n = new MemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.MemInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MemInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MemInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_kb_, available_kb_);

#undef ZR_HELPER_
#undef ZR_

}

bool MemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.MemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Total_kB = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Available_kB;
        break;
      }

      // optional uint32 Available_kB = 2;
      case 2: {
        if (tag == 16) {
         parse_Available_kB:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_kb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.MemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.MemInfo)
  return false;
#undef DO_
}

void MemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.MemInfo)
  // optional uint32 Total_kB = 1;
  if (this->total_kb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_kb(), output);
  }

  // optional uint32 Available_kB = 2;
  if (this->available_kb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->available_kb(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.MemInfo)
}

::google::protobuf::uint8* MemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.MemInfo)
  // optional uint32 Total_kB = 1;
  if (this->total_kb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_kb(), target);
  }

  // optional uint32 Available_kB = 2;
  if (this->available_kb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->available_kb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.MemInfo)
  return target;
}

size_t MemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.MemInfo)
  size_t total_size = 0;

  // optional uint32 Total_kB = 1;
  if (this->total_kb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_kb());
  }

  // optional uint32 Available_kB = 2;
  if (this->available_kb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->available_kb());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.MemInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.MemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.MemInfo)
    UnsafeMergeFrom(*source);
  }
}

void MemInfo::MergeFrom(const MemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.MemInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MemInfo::UnsafeMergeFrom(const MemInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.total_kb() != 0) {
    set_total_kb(from.total_kb());
  }
  if (from.available_kb() != 0) {
    set_available_kb(from.available_kb());
  }
}

void MemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.MemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfo::CopyFrom(const MemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.MemInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MemInfo::IsInitialized() const {

  return true;
}

void MemInfo::Swap(MemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemInfo::InternalSwap(MemInfo* other) {
  std::swap(total_kb_, other->total_kb_);
  std::swap(available_kb_, other->available_kb_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemInfo_descriptor_;
  metadata.reflection = MemInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemInfo

// optional uint32 Total_kB = 1;
void MemInfo::clear_total_kb() {
  total_kb_ = 0u;
}
::google::protobuf::uint32 MemInfo::total_kb() const {
  // @@protoc_insertion_point(field_get:cheetah.MemInfo.Total_kB)
  return total_kb_;
}
void MemInfo::set_total_kb(::google::protobuf::uint32 value) {
  
  total_kb_ = value;
  // @@protoc_insertion_point(field_set:cheetah.MemInfo.Total_kB)
}

// optional uint32 Available_kB = 2;
void MemInfo::clear_available_kb() {
  available_kb_ = 0u;
}
::google::protobuf::uint32 MemInfo::available_kb() const {
  // @@protoc_insertion_point(field_get:cheetah.MemInfo.Available_kB)
  return available_kb_;
}
void MemInfo::set_available_kb(::google::protobuf::uint32 value) {
  
  available_kb_ = value;
  // @@protoc_insertion_point(field_set:cheetah.MemInfo.Available_kB)
}

inline const MemInfo* MemInfo::internal_default_instance() {
  return &MemInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlabInfo::kNameFieldNumber;
const int SlabInfo::kActiveObjsFieldNumber;
const int SlabInfo::kNumObjsFieldNumber;
const int SlabInfo::kObjSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlabInfo::SlabInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.SlabInfo)
}

void SlabInfo::InitAsDefaultInstance() {
}

SlabInfo::SlabInfo(const SlabInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.SlabInfo)
}

void SlabInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&activeobjs_, 0, reinterpret_cast<char*>(&objsize_) -
    reinterpret_cast<char*>(&activeobjs_) + sizeof(objsize_));
  _cached_size_ = 0;
}

SlabInfo::~SlabInfo() {
  // @@protoc_insertion_point(destructor:cheetah.SlabInfo)
  SharedDtor();
}

void SlabInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SlabInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlabInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlabInfo_descriptor_;
}

const SlabInfo& SlabInfo::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SlabInfo> SlabInfo_default_instance_;

SlabInfo* SlabInfo::New(::google::protobuf::Arena* arena) const {
  SlabInfo* n = new SlabInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlabInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.SlabInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SlabInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SlabInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(activeobjs_, objsize_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SlabInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.SlabInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.SlabInfo.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ActiveObjs;
        break;
      }

      // optional int32 ActiveObjs = 2;
      case 2: {
        if (tag == 16) {
         parse_ActiveObjs:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeobjs_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NumObjs;
        break;
      }

      // optional int32 NumObjs = 3;
      case 3: {
        if (tag == 24) {
         parse_NumObjs:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numobjs_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ObjSize;
        break;
      }

      // optional int32 ObjSize = 4;
      case 4: {
        if (tag == 32) {
         parse_ObjSize:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objsize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.SlabInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.SlabInfo)
  return false;
#undef DO_
}

void SlabInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.SlabInfo)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.SlabInfo.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 ActiveObjs = 2;
  if (this->activeobjs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activeobjs(), output);
  }

  // optional int32 NumObjs = 3;
  if (this->numobjs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numobjs(), output);
  }

  // optional int32 ObjSize = 4;
  if (this->objsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objsize(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.SlabInfo)
}

::google::protobuf::uint8* SlabInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.SlabInfo)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.SlabInfo.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 ActiveObjs = 2;
  if (this->activeobjs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activeobjs(), target);
  }

  // optional int32 NumObjs = 3;
  if (this->numobjs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numobjs(), target);
  }

  // optional int32 ObjSize = 4;
  if (this->objsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objsize(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.SlabInfo)
  return target;
}

size_t SlabInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.SlabInfo)
  size_t total_size = 0;

  // optional string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 ActiveObjs = 2;
  if (this->activeobjs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->activeobjs());
  }

  // optional int32 NumObjs = 3;
  if (this->numobjs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numobjs());
  }

  // optional int32 ObjSize = 4;
  if (this->objsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->objsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlabInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.SlabInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SlabInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlabInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.SlabInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.SlabInfo)
    UnsafeMergeFrom(*source);
  }
}

void SlabInfo::MergeFrom(const SlabInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.SlabInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SlabInfo::UnsafeMergeFrom(const SlabInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.activeobjs() != 0) {
    set_activeobjs(from.activeobjs());
  }
  if (from.numobjs() != 0) {
    set_numobjs(from.numobjs());
  }
  if (from.objsize() != 0) {
    set_objsize(from.objsize());
  }
}

void SlabInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.SlabInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlabInfo::CopyFrom(const SlabInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.SlabInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SlabInfo::IsInitialized() const {

  return true;
}

void SlabInfo::Swap(SlabInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlabInfo::InternalSwap(SlabInfo* other) {
  name_.Swap(&other->name_);
  std::swap(activeobjs_, other->activeobjs_);
  std::swap(numobjs_, other->numobjs_);
  std::swap(objsize_, other->objsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlabInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlabInfo_descriptor_;
  metadata.reflection = SlabInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlabInfo

// optional string Name = 1;
void SlabInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SlabInfo::name() const {
  // @@protoc_insertion_point(field_get:cheetah.SlabInfo.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlabInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.SlabInfo.Name)
}
void SlabInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.SlabInfo.Name)
}
void SlabInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.SlabInfo.Name)
}
::std::string* SlabInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.SlabInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlabInfo::release_name() {
  // @@protoc_insertion_point(field_release:cheetah.SlabInfo.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlabInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cheetah.SlabInfo.Name)
}

// optional int32 ActiveObjs = 2;
void SlabInfo::clear_activeobjs() {
  activeobjs_ = 0;
}
::google::protobuf::int32 SlabInfo::activeobjs() const {
  // @@protoc_insertion_point(field_get:cheetah.SlabInfo.ActiveObjs)
  return activeobjs_;
}
void SlabInfo::set_activeobjs(::google::protobuf::int32 value) {
  
  activeobjs_ = value;
  // @@protoc_insertion_point(field_set:cheetah.SlabInfo.ActiveObjs)
}

// optional int32 NumObjs = 3;
void SlabInfo::clear_numobjs() {
  numobjs_ = 0;
}
::google::protobuf::int32 SlabInfo::numobjs() const {
  // @@protoc_insertion_point(field_get:cheetah.SlabInfo.NumObjs)
  return numobjs_;
}
void SlabInfo::set_numobjs(::google::protobuf::int32 value) {
  
  numobjs_ = value;
  // @@protoc_insertion_point(field_set:cheetah.SlabInfo.NumObjs)
}

// optional int32 ObjSize = 4;
void SlabInfo::clear_objsize() {
  objsize_ = 0;
}
::google::protobuf::int32 SlabInfo::objsize() const {
  // @@protoc_insertion_point(field_get:cheetah.SlabInfo.ObjSize)
  return objsize_;
}
void SlabInfo::set_objsize(::google::protobuf::int32 value) {
  
  objsize_ = value;
  // @@protoc_insertion_point(field_set:cheetah.SlabInfo.ObjSize)
}

inline const SlabInfo* SlabInfo::internal_default_instance() {
  return &SlabInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APMemoryStatsMsgRsp::kProcMemInfoFieldNumber;
const int APMemoryStatsMsgRsp::kTopProcSlabInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APMemoryStatsMsgRsp::APMemoryStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APMemoryStatsMsgRsp)
}

void APMemoryStatsMsgRsp::InitAsDefaultInstance() {
  procmeminfo_ = const_cast< ::cheetah::MemInfo*>(
      ::cheetah::MemInfo::internal_default_instance());
  topprocslabinfo_ = const_cast< ::cheetah::SlabInfo*>(
      ::cheetah::SlabInfo::internal_default_instance());
}

APMemoryStatsMsgRsp::APMemoryStatsMsgRsp(const APMemoryStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APMemoryStatsMsgRsp)
}

void APMemoryStatsMsgRsp::SharedCtor() {
  procmeminfo_ = NULL;
  topprocslabinfo_ = NULL;
  _cached_size_ = 0;
}

APMemoryStatsMsgRsp::~APMemoryStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:cheetah.APMemoryStatsMsgRsp)
  SharedDtor();
}

void APMemoryStatsMsgRsp::SharedDtor() {
  if (this != &APMemoryStatsMsgRsp_default_instance_.get()) {
    delete procmeminfo_;
    delete topprocslabinfo_;
  }
}

void APMemoryStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APMemoryStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APMemoryStatsMsgRsp_descriptor_;
}

const APMemoryStatsMsgRsp& APMemoryStatsMsgRsp::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APMemoryStatsMsgRsp> APMemoryStatsMsgRsp_default_instance_;

APMemoryStatsMsgRsp* APMemoryStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  APMemoryStatsMsgRsp* n = new APMemoryStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APMemoryStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APMemoryStatsMsgRsp)
  if (GetArenaNoVirtual() == NULL && procmeminfo_ != NULL) delete procmeminfo_;
  procmeminfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && topprocslabinfo_ != NULL) delete topprocslabinfo_;
  topprocslabinfo_ = NULL;
}

bool APMemoryStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APMemoryStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cheetah.MemInfo ProcMemInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_procmeminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TopProcSlabInfo;
        break;
      }

      // optional .cheetah.SlabInfo TopProcSlabInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TopProcSlabInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topprocslabinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APMemoryStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APMemoryStatsMsgRsp)
  return false;
#undef DO_
}

void APMemoryStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APMemoryStatsMsgRsp)
  // optional .cheetah.MemInfo ProcMemInfo = 1;
  if (this->has_procmeminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->procmeminfo_, output);
  }

  // optional .cheetah.SlabInfo TopProcSlabInfo = 2;
  if (this->has_topprocslabinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->topprocslabinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APMemoryStatsMsgRsp)
}

::google::protobuf::uint8* APMemoryStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APMemoryStatsMsgRsp)
  // optional .cheetah.MemInfo ProcMemInfo = 1;
  if (this->has_procmeminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->procmeminfo_, false, target);
  }

  // optional .cheetah.SlabInfo TopProcSlabInfo = 2;
  if (this->has_topprocslabinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->topprocslabinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APMemoryStatsMsgRsp)
  return target;
}

size_t APMemoryStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APMemoryStatsMsgRsp)
  size_t total_size = 0;

  // optional .cheetah.MemInfo ProcMemInfo = 1;
  if (this->has_procmeminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->procmeminfo_);
  }

  // optional .cheetah.SlabInfo TopProcSlabInfo = 2;
  if (this->has_topprocslabinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topprocslabinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APMemoryStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APMemoryStatsMsgRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APMemoryStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APMemoryStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APMemoryStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APMemoryStatsMsgRsp)
    UnsafeMergeFrom(*source);
  }
}

void APMemoryStatsMsgRsp::MergeFrom(const APMemoryStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APMemoryStatsMsgRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APMemoryStatsMsgRsp::UnsafeMergeFrom(const APMemoryStatsMsgRsp& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_procmeminfo()) {
    mutable_procmeminfo()->::cheetah::MemInfo::MergeFrom(from.procmeminfo());
  }
  if (from.has_topprocslabinfo()) {
    mutable_topprocslabinfo()->::cheetah::SlabInfo::MergeFrom(from.topprocslabinfo());
  }
}

void APMemoryStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APMemoryStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APMemoryStatsMsgRsp::CopyFrom(const APMemoryStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APMemoryStatsMsgRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APMemoryStatsMsgRsp::IsInitialized() const {

  return true;
}

void APMemoryStatsMsgRsp::Swap(APMemoryStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APMemoryStatsMsgRsp::InternalSwap(APMemoryStatsMsgRsp* other) {
  std::swap(procmeminfo_, other->procmeminfo_);
  std::swap(topprocslabinfo_, other->topprocslabinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APMemoryStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APMemoryStatsMsgRsp_descriptor_;
  metadata.reflection = APMemoryStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APMemoryStatsMsgRsp

// optional .cheetah.MemInfo ProcMemInfo = 1;
bool APMemoryStatsMsgRsp::has_procmeminfo() const {
  return this != internal_default_instance() && procmeminfo_ != NULL;
}
void APMemoryStatsMsgRsp::clear_procmeminfo() {
  if (GetArenaNoVirtual() == NULL && procmeminfo_ != NULL) delete procmeminfo_;
  procmeminfo_ = NULL;
}
const ::cheetah::MemInfo& APMemoryStatsMsgRsp::procmeminfo() const {
  // @@protoc_insertion_point(field_get:cheetah.APMemoryStatsMsgRsp.ProcMemInfo)
  return procmeminfo_ != NULL ? *procmeminfo_
                         : *::cheetah::MemInfo::internal_default_instance();
}
::cheetah::MemInfo* APMemoryStatsMsgRsp::mutable_procmeminfo() {
  
  if (procmeminfo_ == NULL) {
    procmeminfo_ = new ::cheetah::MemInfo;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APMemoryStatsMsgRsp.ProcMemInfo)
  return procmeminfo_;
}
::cheetah::MemInfo* APMemoryStatsMsgRsp::release_procmeminfo() {
  // @@protoc_insertion_point(field_release:cheetah.APMemoryStatsMsgRsp.ProcMemInfo)
  
  ::cheetah::MemInfo* temp = procmeminfo_;
  procmeminfo_ = NULL;
  return temp;
}
void APMemoryStatsMsgRsp::set_allocated_procmeminfo(::cheetah::MemInfo* procmeminfo) {
  delete procmeminfo_;
  procmeminfo_ = procmeminfo;
  if (procmeminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APMemoryStatsMsgRsp.ProcMemInfo)
}

// optional .cheetah.SlabInfo TopProcSlabInfo = 2;
bool APMemoryStatsMsgRsp::has_topprocslabinfo() const {
  return this != internal_default_instance() && topprocslabinfo_ != NULL;
}
void APMemoryStatsMsgRsp::clear_topprocslabinfo() {
  if (GetArenaNoVirtual() == NULL && topprocslabinfo_ != NULL) delete topprocslabinfo_;
  topprocslabinfo_ = NULL;
}
const ::cheetah::SlabInfo& APMemoryStatsMsgRsp::topprocslabinfo() const {
  // @@protoc_insertion_point(field_get:cheetah.APMemoryStatsMsgRsp.TopProcSlabInfo)
  return topprocslabinfo_ != NULL ? *topprocslabinfo_
                         : *::cheetah::SlabInfo::internal_default_instance();
}
::cheetah::SlabInfo* APMemoryStatsMsgRsp::mutable_topprocslabinfo() {
  
  if (topprocslabinfo_ == NULL) {
    topprocslabinfo_ = new ::cheetah::SlabInfo;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APMemoryStatsMsgRsp.TopProcSlabInfo)
  return topprocslabinfo_;
}
::cheetah::SlabInfo* APMemoryStatsMsgRsp::release_topprocslabinfo() {
  // @@protoc_insertion_point(field_release:cheetah.APMemoryStatsMsgRsp.TopProcSlabInfo)
  
  ::cheetah::SlabInfo* temp = topprocslabinfo_;
  topprocslabinfo_ = NULL;
  return temp;
}
void APMemoryStatsMsgRsp::set_allocated_topprocslabinfo(::cheetah::SlabInfo* topprocslabinfo) {
  delete topprocslabinfo_;
  topprocslabinfo_ = topprocslabinfo;
  if (topprocslabinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APMemoryStatsMsgRsp.TopProcSlabInfo)
}

inline const APMemoryStatsMsgRsp* APMemoryStatsMsgRsp::internal_default_instance() {
  return &APMemoryStatsMsgRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APDNSStatsMsgRsp::kIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APDNSStatsMsgRsp::APDNSStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APDNSStatsMsgRsp)
}

void APDNSStatsMsgRsp::InitAsDefaultInstance() {
}

APDNSStatsMsgRsp::APDNSStatsMsgRsp(const APDNSStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APDNSStatsMsgRsp)
}

void APDNSStatsMsgRsp::SharedCtor() {
  _cached_size_ = 0;
}

APDNSStatsMsgRsp::~APDNSStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:cheetah.APDNSStatsMsgRsp)
  SharedDtor();
}

void APDNSStatsMsgRsp::SharedDtor() {
}

void APDNSStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APDNSStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APDNSStatsMsgRsp_descriptor_;
}

const APDNSStatsMsgRsp& APDNSStatsMsgRsp::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APDNSStatsMsgRsp> APDNSStatsMsgRsp_default_instance_;

APDNSStatsMsgRsp* APDNSStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  APDNSStatsMsgRsp* n = new APDNSStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APDNSStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APDNSStatsMsgRsp)
  ip_.Clear();
}

bool APDNSStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APDNSStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string IP = 1;
      case 1: {
        if (tag == 10) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip(this->ip_size() - 1).data(),
            this->ip(this->ip_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.APDNSStatsMsgRsp.IP"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_IP;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APDNSStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APDNSStatsMsgRsp)
  return false;
#undef DO_
}

void APDNSStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APDNSStatsMsgRsp)
  // repeated string IP = 1;
  for (int i = 0; i < this->ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip(i).data(), this->ip(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APDNSStatsMsgRsp.IP");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APDNSStatsMsgRsp)
}

::google::protobuf::uint8* APDNSStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APDNSStatsMsgRsp)
  // repeated string IP = 1;
  for (int i = 0; i < this->ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip(i).data(), this->ip(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APDNSStatsMsgRsp.IP");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ip(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APDNSStatsMsgRsp)
  return target;
}

size_t APDNSStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APDNSStatsMsgRsp)
  size_t total_size = 0;

  // repeated string IP = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ip_size());
  for (int i = 0; i < this->ip_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APDNSStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APDNSStatsMsgRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APDNSStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APDNSStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APDNSStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APDNSStatsMsgRsp)
    UnsafeMergeFrom(*source);
  }
}

void APDNSStatsMsgRsp::MergeFrom(const APDNSStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APDNSStatsMsgRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APDNSStatsMsgRsp::UnsafeMergeFrom(const APDNSStatsMsgRsp& from) {
  GOOGLE_DCHECK(&from != this);
  ip_.UnsafeMergeFrom(from.ip_);
}

void APDNSStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APDNSStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APDNSStatsMsgRsp::CopyFrom(const APDNSStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APDNSStatsMsgRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APDNSStatsMsgRsp::IsInitialized() const {

  return true;
}

void APDNSStatsMsgRsp::Swap(APDNSStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APDNSStatsMsgRsp::InternalSwap(APDNSStatsMsgRsp* other) {
  ip_.UnsafeArenaSwap(&other->ip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APDNSStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APDNSStatsMsgRsp_descriptor_;
  metadata.reflection = APDNSStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APDNSStatsMsgRsp

// repeated string IP = 1;
int APDNSStatsMsgRsp::ip_size() const {
  return ip_.size();
}
void APDNSStatsMsgRsp::clear_ip() {
  ip_.Clear();
}
const ::std::string& APDNSStatsMsgRsp::ip(int index) const {
  // @@protoc_insertion_point(field_get:cheetah.APDNSStatsMsgRsp.IP)
  return ip_.Get(index);
}
::std::string* APDNSStatsMsgRsp::mutable_ip(int index) {
  // @@protoc_insertion_point(field_mutable:cheetah.APDNSStatsMsgRsp.IP)
  return ip_.Mutable(index);
}
void APDNSStatsMsgRsp::set_ip(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cheetah.APDNSStatsMsgRsp.IP)
  ip_.Mutable(index)->assign(value);
}
void APDNSStatsMsgRsp::set_ip(int index, const char* value) {
  ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cheetah.APDNSStatsMsgRsp.IP)
}
void APDNSStatsMsgRsp::set_ip(int index, const char* value, size_t size) {
  ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cheetah.APDNSStatsMsgRsp.IP)
}
::std::string* APDNSStatsMsgRsp::add_ip() {
  // @@protoc_insertion_point(field_add_mutable:cheetah.APDNSStatsMsgRsp.IP)
  return ip_.Add();
}
void APDNSStatsMsgRsp::add_ip(const ::std::string& value) {
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cheetah.APDNSStatsMsgRsp.IP)
}
void APDNSStatsMsgRsp::add_ip(const char* value) {
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cheetah.APDNSStatsMsgRsp.IP)
}
void APDNSStatsMsgRsp::add_ip(const char* value, size_t size) {
  ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cheetah.APDNSStatsMsgRsp.IP)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
APDNSStatsMsgRsp::ip() const {
  // @@protoc_insertion_point(field_list:cheetah.APDNSStatsMsgRsp.IP)
  return ip_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
APDNSStatsMsgRsp::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:cheetah.APDNSStatsMsgRsp.IP)
  return &ip_;
}

inline const APDNSStatsMsgRsp* APDNSStatsMsgRsp::internal_default_instance() {
  return &APDNSStatsMsgRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPv4Route::kDestinationFieldNumber;
const int IPv4Route::kGatewayFieldNumber;
const int IPv4Route::kGenmaskFieldNumber;
const int IPv4Route::kFlagsFieldNumber;
const int IPv4Route::kMetricFieldNumber;
const int IPv4Route::kRefFieldNumber;
const int IPv4Route::kUseFieldNumber;
const int IPv4Route::kIfaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPv4Route::IPv4Route()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.IPv4Route)
}

void IPv4Route::InitAsDefaultInstance() {
}

IPv4Route::IPv4Route(const IPv4Route& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.IPv4Route)
}

void IPv4Route::SharedCtor() {
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genmask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metric_, 0, reinterpret_cast<char*>(&use_) -
    reinterpret_cast<char*>(&metric_) + sizeof(use_));
  _cached_size_ = 0;
}

IPv4Route::~IPv4Route() {
  // @@protoc_insertion_point(destructor:cheetah.IPv4Route)
  SharedDtor();
}

void IPv4Route::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genmask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IPv4Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPv4Route::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPv4Route_descriptor_;
}

const IPv4Route& IPv4Route::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IPv4Route> IPv4Route_default_instance_;

IPv4Route* IPv4Route::New(::google::protobuf::Arena* arena) const {
  IPv4Route* n = new IPv4Route;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPv4Route::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.IPv4Route)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IPv4Route, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IPv4Route*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(metric_, use_);
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool IPv4Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.IPv4Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Destination = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.IPv4Route.Destination"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Gateway;
        break;
      }

      // optional string Gateway = 2;
      case 2: {
        if (tag == 18) {
         parse_Gateway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway().data(), this->gateway().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.IPv4Route.Gateway"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Genmask;
        break;
      }

      // optional string Genmask = 3;
      case 3: {
        if (tag == 26) {
         parse_Genmask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genmask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->genmask().data(), this->genmask().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.IPv4Route.Genmask"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Flags;
        break;
      }

      // optional string Flags = 4;
      case 4: {
        if (tag == 34) {
         parse_Flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->flags().data(), this->flags().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.IPv4Route.Flags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Metric;
        break;
      }

      // optional uint32 Metric = 5;
      case 5: {
        if (tag == 40) {
         parse_Metric:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metric_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Ref;
        break;
      }

      // optional uint32 Ref = 6;
      case 6: {
        if (tag == 48) {
         parse_Ref:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ref_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Use;
        break;
      }

      // optional uint32 Use = 7;
      case 7: {
        if (tag == 56) {
         parse_Use:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Iface;
        break;
      }

      // optional string Iface = 8;
      case 8: {
        if (tag == 66) {
         parse_Iface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iface().data(), this->iface().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.IPv4Route.Iface"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.IPv4Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.IPv4Route)
  return false;
#undef DO_
}

void IPv4Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.IPv4Route)
  // optional string Destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination(), output);
  }

  // optional string Gateway = 2;
  if (this->gateway().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Gateway");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gateway(), output);
  }

  // optional string Genmask = 3;
  if (this->genmask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genmask().data(), this->genmask().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Genmask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->genmask(), output);
  }

  // optional string Flags = 4;
  if (this->flags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Flags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->flags(), output);
  }

  // optional uint32 Metric = 5;
  if (this->metric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->metric(), output);
  }

  // optional uint32 Ref = 6;
  if (this->ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ref(), output);
  }

  // optional uint32 Use = 7;
  if (this->use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->use(), output);
  }

  // optional string Iface = 8;
  if (this->iface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iface().data(), this->iface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Iface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->iface(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.IPv4Route)
}

::google::protobuf::uint8* IPv4Route::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.IPv4Route)
  // optional string Destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination(), target);
  }

  // optional string Gateway = 2;
  if (this->gateway().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Gateway");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gateway(), target);
  }

  // optional string Genmask = 3;
  if (this->genmask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genmask().data(), this->genmask().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Genmask");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->genmask(), target);
  }

  // optional string Flags = 4;
  if (this->flags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Flags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->flags(), target);
  }

  // optional uint32 Metric = 5;
  if (this->metric() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->metric(), target);
  }

  // optional uint32 Ref = 6;
  if (this->ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ref(), target);
  }

  // optional uint32 Use = 7;
  if (this->use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->use(), target);
  }

  // optional string Iface = 8;
  if (this->iface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iface().data(), this->iface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.IPv4Route.Iface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->iface(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.IPv4Route)
  return target;
}

size_t IPv4Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.IPv4Route)
  size_t total_size = 0;

  // optional string Destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // optional string Gateway = 2;
  if (this->gateway().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gateway());
  }

  // optional string Genmask = 3;
  if (this->genmask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->genmask());
  }

  // optional string Flags = 4;
  if (this->flags().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flags());
  }

  // optional uint32 Metric = 5;
  if (this->metric() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->metric());
  }

  // optional uint32 Ref = 6;
  if (this->ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ref());
  }

  // optional uint32 Use = 7;
  if (this->use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->use());
  }

  // optional string Iface = 8;
  if (this->iface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iface());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPv4Route::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.IPv4Route)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IPv4Route* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IPv4Route>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.IPv4Route)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.IPv4Route)
    UnsafeMergeFrom(*source);
  }
}

void IPv4Route::MergeFrom(const IPv4Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.IPv4Route)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IPv4Route::UnsafeMergeFrom(const IPv4Route& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.gateway().size() > 0) {

    gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  if (from.genmask().size() > 0) {

    genmask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genmask_);
  }
  if (from.flags().size() > 0) {

    flags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flags_);
  }
  if (from.metric() != 0) {
    set_metric(from.metric());
  }
  if (from.ref() != 0) {
    set_ref(from.ref());
  }
  if (from.use() != 0) {
    set_use(from.use());
  }
  if (from.iface().size() > 0) {

    iface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iface_);
  }
}

void IPv4Route::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.IPv4Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPv4Route::CopyFrom(const IPv4Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.IPv4Route)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IPv4Route::IsInitialized() const {

  return true;
}

void IPv4Route::Swap(IPv4Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPv4Route::InternalSwap(IPv4Route* other) {
  destination_.Swap(&other->destination_);
  gateway_.Swap(&other->gateway_);
  genmask_.Swap(&other->genmask_);
  flags_.Swap(&other->flags_);
  std::swap(metric_, other->metric_);
  std::swap(ref_, other->ref_);
  std::swap(use_, other->use_);
  iface_.Swap(&other->iface_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPv4Route::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPv4Route_descriptor_;
  metadata.reflection = IPv4Route_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IPv4Route

// optional string Destination = 1;
void IPv4Route::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IPv4Route::destination() const {
  // @@protoc_insertion_point(field_get:cheetah.IPv4Route.Destination)
  return destination_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_destination(const ::std::string& value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.IPv4Route.Destination)
}
void IPv4Route::set_destination(const char* value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.IPv4Route.Destination)
}
void IPv4Route::set_destination(const char* value, size_t size) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.IPv4Route.Destination)
}
::std::string* IPv4Route::mutable_destination() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.IPv4Route.Destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPv4Route::release_destination() {
  // @@protoc_insertion_point(field_release:cheetah.IPv4Route.Destination)
  
  return destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    
  } else {
    
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:cheetah.IPv4Route.Destination)
}

// optional string Gateway = 2;
void IPv4Route::clear_gateway() {
  gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IPv4Route::gateway() const {
  // @@protoc_insertion_point(field_get:cheetah.IPv4Route.Gateway)
  return gateway_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_gateway(const ::std::string& value) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.IPv4Route.Gateway)
}
void IPv4Route::set_gateway(const char* value) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.IPv4Route.Gateway)
}
void IPv4Route::set_gateway(const char* value, size_t size) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.IPv4Route.Gateway)
}
::std::string* IPv4Route::mutable_gateway() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.IPv4Route.Gateway)
  return gateway_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPv4Route::release_gateway() {
  // @@protoc_insertion_point(field_release:cheetah.IPv4Route.Gateway)
  
  return gateway_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_allocated_gateway(::std::string* gateway) {
  if (gateway != NULL) {
    
  } else {
    
  }
  gateway_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway);
  // @@protoc_insertion_point(field_set_allocated:cheetah.IPv4Route.Gateway)
}

// optional string Genmask = 3;
void IPv4Route::clear_genmask() {
  genmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IPv4Route::genmask() const {
  // @@protoc_insertion_point(field_get:cheetah.IPv4Route.Genmask)
  return genmask_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_genmask(const ::std::string& value) {
  
  genmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.IPv4Route.Genmask)
}
void IPv4Route::set_genmask(const char* value) {
  
  genmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.IPv4Route.Genmask)
}
void IPv4Route::set_genmask(const char* value, size_t size) {
  
  genmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.IPv4Route.Genmask)
}
::std::string* IPv4Route::mutable_genmask() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.IPv4Route.Genmask)
  return genmask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPv4Route::release_genmask() {
  // @@protoc_insertion_point(field_release:cheetah.IPv4Route.Genmask)
  
  return genmask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_allocated_genmask(::std::string* genmask) {
  if (genmask != NULL) {
    
  } else {
    
  }
  genmask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genmask);
  // @@protoc_insertion_point(field_set_allocated:cheetah.IPv4Route.Genmask)
}

// optional string Flags = 4;
void IPv4Route::clear_flags() {
  flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IPv4Route::flags() const {
  // @@protoc_insertion_point(field_get:cheetah.IPv4Route.Flags)
  return flags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_flags(const ::std::string& value) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.IPv4Route.Flags)
}
void IPv4Route::set_flags(const char* value) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.IPv4Route.Flags)
}
void IPv4Route::set_flags(const char* value, size_t size) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.IPv4Route.Flags)
}
::std::string* IPv4Route::mutable_flags() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.IPv4Route.Flags)
  return flags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPv4Route::release_flags() {
  // @@protoc_insertion_point(field_release:cheetah.IPv4Route.Flags)
  
  return flags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_allocated_flags(::std::string* flags) {
  if (flags != NULL) {
    
  } else {
    
  }
  flags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flags);
  // @@protoc_insertion_point(field_set_allocated:cheetah.IPv4Route.Flags)
}

// optional uint32 Metric = 5;
void IPv4Route::clear_metric() {
  metric_ = 0u;
}
::google::protobuf::uint32 IPv4Route::metric() const {
  // @@protoc_insertion_point(field_get:cheetah.IPv4Route.Metric)
  return metric_;
}
void IPv4Route::set_metric(::google::protobuf::uint32 value) {
  
  metric_ = value;
  // @@protoc_insertion_point(field_set:cheetah.IPv4Route.Metric)
}

// optional uint32 Ref = 6;
void IPv4Route::clear_ref() {
  ref_ = 0u;
}
::google::protobuf::uint32 IPv4Route::ref() const {
  // @@protoc_insertion_point(field_get:cheetah.IPv4Route.Ref)
  return ref_;
}
void IPv4Route::set_ref(::google::protobuf::uint32 value) {
  
  ref_ = value;
  // @@protoc_insertion_point(field_set:cheetah.IPv4Route.Ref)
}

// optional uint32 Use = 7;
void IPv4Route::clear_use() {
  use_ = 0u;
}
::google::protobuf::uint32 IPv4Route::use() const {
  // @@protoc_insertion_point(field_get:cheetah.IPv4Route.Use)
  return use_;
}
void IPv4Route::set_use(::google::protobuf::uint32 value) {
  
  use_ = value;
  // @@protoc_insertion_point(field_set:cheetah.IPv4Route.Use)
}

// optional string Iface = 8;
void IPv4Route::clear_iface() {
  iface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IPv4Route::iface() const {
  // @@protoc_insertion_point(field_get:cheetah.IPv4Route.Iface)
  return iface_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_iface(const ::std::string& value) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.IPv4Route.Iface)
}
void IPv4Route::set_iface(const char* value) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.IPv4Route.Iface)
}
void IPv4Route::set_iface(const char* value, size_t size) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.IPv4Route.Iface)
}
::std::string* IPv4Route::mutable_iface() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.IPv4Route.Iface)
  return iface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPv4Route::release_iface() {
  // @@protoc_insertion_point(field_release:cheetah.IPv4Route.Iface)
  
  return iface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPv4Route::set_allocated_iface(::std::string* iface) {
  if (iface != NULL) {
    
  } else {
    
  }
  iface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iface);
  // @@protoc_insertion_point(field_set_allocated:cheetah.IPv4Route.Iface)
}

inline const IPv4Route* IPv4Route::internal_default_instance() {
  return &IPv4Route_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APRoutingStatsMsgRsp::kIPv4RoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APRoutingStatsMsgRsp::APRoutingStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APRoutingStatsMsgRsp)
}

void APRoutingStatsMsgRsp::InitAsDefaultInstance() {
}

APRoutingStatsMsgRsp::APRoutingStatsMsgRsp(const APRoutingStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APRoutingStatsMsgRsp)
}

void APRoutingStatsMsgRsp::SharedCtor() {
  _cached_size_ = 0;
}

APRoutingStatsMsgRsp::~APRoutingStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:cheetah.APRoutingStatsMsgRsp)
  SharedDtor();
}

void APRoutingStatsMsgRsp::SharedDtor() {
}

void APRoutingStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APRoutingStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APRoutingStatsMsgRsp_descriptor_;
}

const APRoutingStatsMsgRsp& APRoutingStatsMsgRsp::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APRoutingStatsMsgRsp> APRoutingStatsMsgRsp_default_instance_;

APRoutingStatsMsgRsp* APRoutingStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  APRoutingStatsMsgRsp* n = new APRoutingStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APRoutingStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APRoutingStatsMsgRsp)
  ipv4routes_.Clear();
}

bool APRoutingStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APRoutingStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cheetah.IPv4Route IPv4Routes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_IPv4Routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ipv4routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_IPv4Routes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APRoutingStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APRoutingStatsMsgRsp)
  return false;
#undef DO_
}

void APRoutingStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APRoutingStatsMsgRsp)
  // repeated .cheetah.IPv4Route IPv4Routes = 1;
  for (unsigned int i = 0, n = this->ipv4routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ipv4routes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APRoutingStatsMsgRsp)
}

::google::protobuf::uint8* APRoutingStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APRoutingStatsMsgRsp)
  // repeated .cheetah.IPv4Route IPv4Routes = 1;
  for (unsigned int i = 0, n = this->ipv4routes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->ipv4routes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APRoutingStatsMsgRsp)
  return target;
}

size_t APRoutingStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APRoutingStatsMsgRsp)
  size_t total_size = 0;

  // repeated .cheetah.IPv4Route IPv4Routes = 1;
  {
    unsigned int count = this->ipv4routes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipv4routes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APRoutingStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APRoutingStatsMsgRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APRoutingStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APRoutingStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APRoutingStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APRoutingStatsMsgRsp)
    UnsafeMergeFrom(*source);
  }
}

void APRoutingStatsMsgRsp::MergeFrom(const APRoutingStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APRoutingStatsMsgRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APRoutingStatsMsgRsp::UnsafeMergeFrom(const APRoutingStatsMsgRsp& from) {
  GOOGLE_DCHECK(&from != this);
  ipv4routes_.MergeFrom(from.ipv4routes_);
}

void APRoutingStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APRoutingStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APRoutingStatsMsgRsp::CopyFrom(const APRoutingStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APRoutingStatsMsgRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APRoutingStatsMsgRsp::IsInitialized() const {

  return true;
}

void APRoutingStatsMsgRsp::Swap(APRoutingStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APRoutingStatsMsgRsp::InternalSwap(APRoutingStatsMsgRsp* other) {
  ipv4routes_.UnsafeArenaSwap(&other->ipv4routes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APRoutingStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APRoutingStatsMsgRsp_descriptor_;
  metadata.reflection = APRoutingStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APRoutingStatsMsgRsp

// repeated .cheetah.IPv4Route IPv4Routes = 1;
int APRoutingStatsMsgRsp::ipv4routes_size() const {
  return ipv4routes_.size();
}
void APRoutingStatsMsgRsp::clear_ipv4routes() {
  ipv4routes_.Clear();
}
const ::cheetah::IPv4Route& APRoutingStatsMsgRsp::ipv4routes(int index) const {
  // @@protoc_insertion_point(field_get:cheetah.APRoutingStatsMsgRsp.IPv4Routes)
  return ipv4routes_.Get(index);
}
::cheetah::IPv4Route* APRoutingStatsMsgRsp::mutable_ipv4routes(int index) {
  // @@protoc_insertion_point(field_mutable:cheetah.APRoutingStatsMsgRsp.IPv4Routes)
  return ipv4routes_.Mutable(index);
}
::cheetah::IPv4Route* APRoutingStatsMsgRsp::add_ipv4routes() {
  // @@protoc_insertion_point(field_add:cheetah.APRoutingStatsMsgRsp.IPv4Routes)
  return ipv4routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::cheetah::IPv4Route >*
APRoutingStatsMsgRsp::mutable_ipv4routes() {
  // @@protoc_insertion_point(field_mutable_list:cheetah.APRoutingStatsMsgRsp.IPv4Routes)
  return &ipv4routes_;
}
const ::google::protobuf::RepeatedPtrField< ::cheetah::IPv4Route >&
APRoutingStatsMsgRsp::ipv4routes() const {
  // @@protoc_insertion_point(field_list:cheetah.APRoutingStatsMsgRsp.IPv4Routes)
  return ipv4routes_;
}

inline const APRoutingStatsMsgRsp* APRoutingStatsMsgRsp::internal_default_instance() {
  return &APRoutingStatsMsgRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MulticastCounter::kTxMcastPktsFieldNumber;
const int MulticastCounter::kTxMcastBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MulticastCounter::MulticastCounter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.MulticastCounter)
}

void MulticastCounter::InitAsDefaultInstance() {
}

MulticastCounter::MulticastCounter(const MulticastCounter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.MulticastCounter)
}

void MulticastCounter::SharedCtor() {
  ::memset(&txmcastbytes_, 0, reinterpret_cast<char*>(&txmcastpkts_) -
    reinterpret_cast<char*>(&txmcastbytes_) + sizeof(txmcastpkts_));
  _cached_size_ = 0;
}

MulticastCounter::~MulticastCounter() {
  // @@protoc_insertion_point(destructor:cheetah.MulticastCounter)
  SharedDtor();
}

void MulticastCounter::SharedDtor() {
}

void MulticastCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MulticastCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MulticastCounter_descriptor_;
}

const MulticastCounter& MulticastCounter::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MulticastCounter> MulticastCounter_default_instance_;

MulticastCounter* MulticastCounter::New(::google::protobuf::Arena* arena) const {
  MulticastCounter* n = new MulticastCounter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MulticastCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.MulticastCounter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MulticastCounter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MulticastCounter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(txmcastbytes_, txmcastpkts_);

#undef ZR_HELPER_
#undef ZR_

}

bool MulticastCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.MulticastCounter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TxMcastPkts = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txmcastpkts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TxMcastBytes;
        break;
      }

      // optional uint64 TxMcastBytes = 2;
      case 2: {
        if (tag == 16) {
         parse_TxMcastBytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txmcastbytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.MulticastCounter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.MulticastCounter)
  return false;
#undef DO_
}

void MulticastCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.MulticastCounter)
  // optional uint32 TxMcastPkts = 1;
  if (this->txmcastpkts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->txmcastpkts(), output);
  }

  // optional uint64 TxMcastBytes = 2;
  if (this->txmcastbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txmcastbytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.MulticastCounter)
}

::google::protobuf::uint8* MulticastCounter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.MulticastCounter)
  // optional uint32 TxMcastPkts = 1;
  if (this->txmcastpkts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->txmcastpkts(), target);
  }

  // optional uint64 TxMcastBytes = 2;
  if (this->txmcastbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->txmcastbytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.MulticastCounter)
  return target;
}

size_t MulticastCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.MulticastCounter)
  size_t total_size = 0;

  // optional uint32 TxMcastPkts = 1;
  if (this->txmcastpkts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->txmcastpkts());
  }

  // optional uint64 TxMcastBytes = 2;
  if (this->txmcastbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txmcastbytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MulticastCounter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.MulticastCounter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MulticastCounter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MulticastCounter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.MulticastCounter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.MulticastCounter)
    UnsafeMergeFrom(*source);
  }
}

void MulticastCounter::MergeFrom(const MulticastCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.MulticastCounter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MulticastCounter::UnsafeMergeFrom(const MulticastCounter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.txmcastpkts() != 0) {
    set_txmcastpkts(from.txmcastpkts());
  }
  if (from.txmcastbytes() != 0) {
    set_txmcastbytes(from.txmcastbytes());
  }
}

void MulticastCounter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.MulticastCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MulticastCounter::CopyFrom(const MulticastCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.MulticastCounter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MulticastCounter::IsInitialized() const {

  return true;
}

void MulticastCounter::Swap(MulticastCounter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MulticastCounter::InternalSwap(MulticastCounter* other) {
  std::swap(txmcastpkts_, other->txmcastpkts_);
  std::swap(txmcastbytes_, other->txmcastbytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MulticastCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MulticastCounter_descriptor_;
  metadata.reflection = MulticastCounter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MulticastCounter

// optional uint32 TxMcastPkts = 1;
void MulticastCounter::clear_txmcastpkts() {
  txmcastpkts_ = 0u;
}
::google::protobuf::uint32 MulticastCounter::txmcastpkts() const {
  // @@protoc_insertion_point(field_get:cheetah.MulticastCounter.TxMcastPkts)
  return txmcastpkts_;
}
void MulticastCounter::set_txmcastpkts(::google::protobuf::uint32 value) {
  
  txmcastpkts_ = value;
  // @@protoc_insertion_point(field_set:cheetah.MulticastCounter.TxMcastPkts)
}

// optional uint64 TxMcastBytes = 2;
void MulticastCounter::clear_txmcastbytes() {
  txmcastbytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MulticastCounter::txmcastbytes() const {
  // @@protoc_insertion_point(field_get:cheetah.MulticastCounter.TxMcastBytes)
  return txmcastbytes_;
}
void MulticastCounter::set_txmcastbytes(::google::protobuf::uint64 value) {
  
  txmcastbytes_ = value;
  // @@protoc_insertion_point(field_set:cheetah.MulticastCounter.TxMcastBytes)
}

inline const MulticastCounter* MulticastCounter::internal_default_instance() {
  return &MulticastCounter_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WLAN::kIDFieldNumber;
const int WLAN::kSSIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WLAN::WLAN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.WLAN)
}

void WLAN::InitAsDefaultInstance() {
}

WLAN::WLAN(const WLAN& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.WLAN)
}

void WLAN::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WLAN::~WLAN() {
  // @@protoc_insertion_point(destructor:cheetah.WLAN)
  SharedDtor();
}

void WLAN::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WLAN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WLAN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WLAN_descriptor_;
}

const WLAN& WLAN::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WLAN> WLAN_default_instance_;

WLAN* WLAN::New(::google::protobuf::Arena* arena) const {
  WLAN* n = new WLAN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WLAN::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.WLAN)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WLAN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.WLAN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.WLAN.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SSID;
        break;
      }

      // optional string SSID = 2;
      case 2: {
        if (tag == 18) {
         parse_SSID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ssid().data(), this->ssid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.WLAN.SSID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.WLAN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.WLAN)
  return false;
#undef DO_
}

void WLAN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.WLAN)
  // optional string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.WLAN.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string SSID = 2;
  if (this->ssid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ssid().data(), this->ssid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.WLAN.SSID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ssid(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.WLAN)
}

::google::protobuf::uint8* WLAN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.WLAN)
  // optional string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.WLAN.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string SSID = 2;
  if (this->ssid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ssid().data(), this->ssid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.WLAN.SSID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ssid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.WLAN)
  return target;
}

size_t WLAN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.WLAN)
  size_t total_size = 0;

  // optional string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string SSID = 2;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ssid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WLAN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.WLAN)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WLAN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WLAN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.WLAN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.WLAN)
    UnsafeMergeFrom(*source);
  }
}

void WLAN::MergeFrom(const WLAN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.WLAN)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WLAN::UnsafeMergeFrom(const WLAN& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.ssid().size() > 0) {

    ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
}

void WLAN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.WLAN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLAN::CopyFrom(const WLAN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.WLAN)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WLAN::IsInitialized() const {

  return true;
}

void WLAN::Swap(WLAN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WLAN::InternalSwap(WLAN* other) {
  id_.Swap(&other->id_);
  ssid_.Swap(&other->ssid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WLAN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WLAN_descriptor_;
  metadata.reflection = WLAN_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WLAN

// optional string ID = 1;
void WLAN::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WLAN::id() const {
  // @@protoc_insertion_point(field_get:cheetah.WLAN.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WLAN::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.WLAN.ID)
}
void WLAN::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.WLAN.ID)
}
void WLAN::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.WLAN.ID)
}
::std::string* WLAN::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.WLAN.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WLAN::release_id() {
  // @@protoc_insertion_point(field_release:cheetah.WLAN.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WLAN::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cheetah.WLAN.ID)
}

// optional string SSID = 2;
void WLAN::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WLAN::ssid() const {
  // @@protoc_insertion_point(field_get:cheetah.WLAN.SSID)
  return ssid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WLAN::set_ssid(const ::std::string& value) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.WLAN.SSID)
}
void WLAN::set_ssid(const char* value) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.WLAN.SSID)
}
void WLAN::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.WLAN.SSID)
}
::std::string* WLAN::mutable_ssid() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.WLAN.SSID)
  return ssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WLAN::release_ssid() {
  // @@protoc_insertion_point(field_release:cheetah.WLAN.SSID)
  
  return ssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WLAN::set_allocated_ssid(::std::string* ssid) {
  if (ssid != NULL) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:cheetah.WLAN.SSID)
}

inline const WLAN* WLAN::internal_default_instance() {
  return &WLAN_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WLANEntry::kWlanFieldNumber;
const int WLANEntry::kRadioIndexFieldNumber;
const int WLANEntry::kBSSIDFieldNumber;
const int WLANEntry::kDevFieldNumber;
const int WLANEntry::kNumClientsFieldNumber;
const int WLANEntry::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WLANEntry::WLANEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.WLANEntry)
}

void WLANEntry::InitAsDefaultInstance() {
  wlan_ = const_cast< ::cheetah::WLAN*>(
      ::cheetah::WLAN::internal_default_instance());
  counter_ = const_cast< ::cheetah::MulticastCounter*>(
      ::cheetah::MulticastCounter::internal_default_instance());
}

WLANEntry::WLANEntry(const WLANEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.WLANEntry)
}

void WLANEntry::SharedCtor() {
  bssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wlan_ = NULL;
  counter_ = NULL;
  ::memset(&radioindex_, 0, reinterpret_cast<char*>(&numclients_) -
    reinterpret_cast<char*>(&radioindex_) + sizeof(numclients_));
  _cached_size_ = 0;
}

WLANEntry::~WLANEntry() {
  // @@protoc_insertion_point(destructor:cheetah.WLANEntry)
  SharedDtor();
}

void WLANEntry::SharedDtor() {
  bssid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &WLANEntry_default_instance_.get()) {
    delete wlan_;
    delete counter_;
  }
}

void WLANEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WLANEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WLANEntry_descriptor_;
}

const WLANEntry& WLANEntry::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WLANEntry> WLANEntry_default_instance_;

WLANEntry* WLANEntry::New(::google::protobuf::Arena* arena) const {
  WLANEntry* n = new WLANEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WLANEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.WLANEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WLANEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WLANEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(radioindex_, numclients_);
  if (GetArenaNoVirtual() == NULL && wlan_ != NULL) delete wlan_;
  wlan_ = NULL;
  bssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && counter_ != NULL) delete counter_;
  counter_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool WLANEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.WLANEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cheetah.WLAN Wlan = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wlan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RadioIndex;
        break;
      }

      // optional uint32 RadioIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_RadioIndex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radioindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BSSID;
        break;
      }

      // optional string BSSID = 3;
      case 3: {
        if (tag == 26) {
         parse_BSSID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bssid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bssid().data(), this->bssid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.WLANEntry.BSSID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Dev;
        break;
      }

      // optional string Dev = 4;
      case 4: {
        if (tag == 34) {
         parse_Dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dev()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dev().data(), this->dev().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.WLANEntry.Dev"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NumClients;
        break;
      }

      // optional int32 NumClients = 5;
      case 5: {
        if (tag == 40) {
         parse_NumClients:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numclients_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Counter;
        break;
      }

      // optional .cheetah.MulticastCounter Counter = 6;
      case 6: {
        if (tag == 50) {
         parse_Counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.WLANEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.WLANEntry)
  return false;
#undef DO_
}

void WLANEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.WLANEntry)
  // optional .cheetah.WLAN Wlan = 1;
  if (this->has_wlan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->wlan_, output);
  }

  // optional uint32 RadioIndex = 2;
  if (this->radioindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radioindex(), output);
  }

  // optional string BSSID = 3;
  if (this->bssid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bssid().data(), this->bssid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.WLANEntry.BSSID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bssid(), output);
  }

  // optional string Dev = 4;
  if (this->dev().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev().data(), this->dev().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.WLANEntry.Dev");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dev(), output);
  }

  // optional int32 NumClients = 5;
  if (this->numclients() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numclients(), output);
  }

  // optional .cheetah.MulticastCounter Counter = 6;
  if (this->has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->counter_, output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.WLANEntry)
}

::google::protobuf::uint8* WLANEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.WLANEntry)
  // optional .cheetah.WLAN Wlan = 1;
  if (this->has_wlan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->wlan_, false, target);
  }

  // optional uint32 RadioIndex = 2;
  if (this->radioindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radioindex(), target);
  }

  // optional string BSSID = 3;
  if (this->bssid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bssid().data(), this->bssid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.WLANEntry.BSSID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bssid(), target);
  }

  // optional string Dev = 4;
  if (this->dev().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev().data(), this->dev().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.WLANEntry.Dev");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dev(), target);
  }

  // optional int32 NumClients = 5;
  if (this->numclients() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numclients(), target);
  }

  // optional .cheetah.MulticastCounter Counter = 6;
  if (this->has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->counter_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.WLANEntry)
  return target;
}

size_t WLANEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.WLANEntry)
  size_t total_size = 0;

  // optional .cheetah.WLAN Wlan = 1;
  if (this->has_wlan()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wlan_);
  }

  // optional uint32 RadioIndex = 2;
  if (this->radioindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radioindex());
  }

  // optional string BSSID = 3;
  if (this->bssid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bssid());
  }

  // optional string Dev = 4;
  if (this->dev().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dev());
  }

  // optional int32 NumClients = 5;
  if (this->numclients() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numclients());
  }

  // optional .cheetah.MulticastCounter Counter = 6;
  if (this->has_counter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WLANEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.WLANEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WLANEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WLANEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.WLANEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.WLANEntry)
    UnsafeMergeFrom(*source);
  }
}

void WLANEntry::MergeFrom(const WLANEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.WLANEntry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WLANEntry::UnsafeMergeFrom(const WLANEntry& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_wlan()) {
    mutable_wlan()->::cheetah::WLAN::MergeFrom(from.wlan());
  }
  if (from.radioindex() != 0) {
    set_radioindex(from.radioindex());
  }
  if (from.bssid().size() > 0) {

    bssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bssid_);
  }
  if (from.dev().size() > 0) {

    dev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_);
  }
  if (from.numclients() != 0) {
    set_numclients(from.numclients());
  }
  if (from.has_counter()) {
    mutable_counter()->::cheetah::MulticastCounter::MergeFrom(from.counter());
  }
}

void WLANEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.WLANEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLANEntry::CopyFrom(const WLANEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.WLANEntry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WLANEntry::IsInitialized() const {

  return true;
}

void WLANEntry::Swap(WLANEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WLANEntry::InternalSwap(WLANEntry* other) {
  std::swap(wlan_, other->wlan_);
  std::swap(radioindex_, other->radioindex_);
  bssid_.Swap(&other->bssid_);
  dev_.Swap(&other->dev_);
  std::swap(numclients_, other->numclients_);
  std::swap(counter_, other->counter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WLANEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WLANEntry_descriptor_;
  metadata.reflection = WLANEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WLANEntry

// optional .cheetah.WLAN Wlan = 1;
bool WLANEntry::has_wlan() const {
  return this != internal_default_instance() && wlan_ != NULL;
}
void WLANEntry::clear_wlan() {
  if (GetArenaNoVirtual() == NULL && wlan_ != NULL) delete wlan_;
  wlan_ = NULL;
}
const ::cheetah::WLAN& WLANEntry::wlan() const {
  // @@protoc_insertion_point(field_get:cheetah.WLANEntry.Wlan)
  return wlan_ != NULL ? *wlan_
                         : *::cheetah::WLAN::internal_default_instance();
}
::cheetah::WLAN* WLANEntry::mutable_wlan() {
  
  if (wlan_ == NULL) {
    wlan_ = new ::cheetah::WLAN;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.WLANEntry.Wlan)
  return wlan_;
}
::cheetah::WLAN* WLANEntry::release_wlan() {
  // @@protoc_insertion_point(field_release:cheetah.WLANEntry.Wlan)
  
  ::cheetah::WLAN* temp = wlan_;
  wlan_ = NULL;
  return temp;
}
void WLANEntry::set_allocated_wlan(::cheetah::WLAN* wlan) {
  delete wlan_;
  wlan_ = wlan;
  if (wlan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.WLANEntry.Wlan)
}

// optional uint32 RadioIndex = 2;
void WLANEntry::clear_radioindex() {
  radioindex_ = 0u;
}
::google::protobuf::uint32 WLANEntry::radioindex() const {
  // @@protoc_insertion_point(field_get:cheetah.WLANEntry.RadioIndex)
  return radioindex_;
}
void WLANEntry::set_radioindex(::google::protobuf::uint32 value) {
  
  radioindex_ = value;
  // @@protoc_insertion_point(field_set:cheetah.WLANEntry.RadioIndex)
}

// optional string BSSID = 3;
void WLANEntry::clear_bssid() {
  bssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WLANEntry::bssid() const {
  // @@protoc_insertion_point(field_get:cheetah.WLANEntry.BSSID)
  return bssid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WLANEntry::set_bssid(const ::std::string& value) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.WLANEntry.BSSID)
}
void WLANEntry::set_bssid(const char* value) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.WLANEntry.BSSID)
}
void WLANEntry::set_bssid(const char* value, size_t size) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.WLANEntry.BSSID)
}
::std::string* WLANEntry::mutable_bssid() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.WLANEntry.BSSID)
  return bssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WLANEntry::release_bssid() {
  // @@protoc_insertion_point(field_release:cheetah.WLANEntry.BSSID)
  
  return bssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WLANEntry::set_allocated_bssid(::std::string* bssid) {
  if (bssid != NULL) {
    
  } else {
    
  }
  bssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bssid);
  // @@protoc_insertion_point(field_set_allocated:cheetah.WLANEntry.BSSID)
}

// optional string Dev = 4;
void WLANEntry::clear_dev() {
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WLANEntry::dev() const {
  // @@protoc_insertion_point(field_get:cheetah.WLANEntry.Dev)
  return dev_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WLANEntry::set_dev(const ::std::string& value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.WLANEntry.Dev)
}
void WLANEntry::set_dev(const char* value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.WLANEntry.Dev)
}
void WLANEntry::set_dev(const char* value, size_t size) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.WLANEntry.Dev)
}
::std::string* WLANEntry::mutable_dev() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.WLANEntry.Dev)
  return dev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WLANEntry::release_dev() {
  // @@protoc_insertion_point(field_release:cheetah.WLANEntry.Dev)
  
  return dev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WLANEntry::set_allocated_dev(::std::string* dev) {
  if (dev != NULL) {
    
  } else {
    
  }
  dev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev);
  // @@protoc_insertion_point(field_set_allocated:cheetah.WLANEntry.Dev)
}

// optional int32 NumClients = 5;
void WLANEntry::clear_numclients() {
  numclients_ = 0;
}
::google::protobuf::int32 WLANEntry::numclients() const {
  // @@protoc_insertion_point(field_get:cheetah.WLANEntry.NumClients)
  return numclients_;
}
void WLANEntry::set_numclients(::google::protobuf::int32 value) {
  
  numclients_ = value;
  // @@protoc_insertion_point(field_set:cheetah.WLANEntry.NumClients)
}

// optional .cheetah.MulticastCounter Counter = 6;
bool WLANEntry::has_counter() const {
  return this != internal_default_instance() && counter_ != NULL;
}
void WLANEntry::clear_counter() {
  if (GetArenaNoVirtual() == NULL && counter_ != NULL) delete counter_;
  counter_ = NULL;
}
const ::cheetah::MulticastCounter& WLANEntry::counter() const {
  // @@protoc_insertion_point(field_get:cheetah.WLANEntry.Counter)
  return counter_ != NULL ? *counter_
                         : *::cheetah::MulticastCounter::internal_default_instance();
}
::cheetah::MulticastCounter* WLANEntry::mutable_counter() {
  
  if (counter_ == NULL) {
    counter_ = new ::cheetah::MulticastCounter;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.WLANEntry.Counter)
  return counter_;
}
::cheetah::MulticastCounter* WLANEntry::release_counter() {
  // @@protoc_insertion_point(field_release:cheetah.WLANEntry.Counter)
  
  ::cheetah::MulticastCounter* temp = counter_;
  counter_ = NULL;
  return temp;
}
void WLANEntry::set_allocated_counter(::cheetah::MulticastCounter* counter) {
  delete counter_;
  counter_ = counter;
  if (counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.WLANEntry.Counter)
}

inline const WLANEntry* WLANEntry::internal_default_instance() {
  return &WLANEntry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APWLANStatsMsgRsp::kWLANEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APWLANStatsMsgRsp::APWLANStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APWLANStatsMsgRsp)
}

void APWLANStatsMsgRsp::InitAsDefaultInstance() {
}

APWLANStatsMsgRsp::APWLANStatsMsgRsp(const APWLANStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APWLANStatsMsgRsp)
}

void APWLANStatsMsgRsp::SharedCtor() {
  _cached_size_ = 0;
}

APWLANStatsMsgRsp::~APWLANStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:cheetah.APWLANStatsMsgRsp)
  SharedDtor();
}

void APWLANStatsMsgRsp::SharedDtor() {
}

void APWLANStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APWLANStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APWLANStatsMsgRsp_descriptor_;
}

const APWLANStatsMsgRsp& APWLANStatsMsgRsp::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APWLANStatsMsgRsp> APWLANStatsMsgRsp_default_instance_;

APWLANStatsMsgRsp* APWLANStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  APWLANStatsMsgRsp* n = new APWLANStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APWLANStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APWLANStatsMsgRsp)
  wlanentries_.Clear();
}

bool APWLANStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APWLANStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cheetah.WLANEntry WLANEntries = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_WLANEntries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wlanentries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_WLANEntries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APWLANStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APWLANStatsMsgRsp)
  return false;
#undef DO_
}

void APWLANStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APWLANStatsMsgRsp)
  // repeated .cheetah.WLANEntry WLANEntries = 1;
  for (unsigned int i = 0, n = this->wlanentries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wlanentries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APWLANStatsMsgRsp)
}

::google::protobuf::uint8* APWLANStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APWLANStatsMsgRsp)
  // repeated .cheetah.WLANEntry WLANEntries = 1;
  for (unsigned int i = 0, n = this->wlanentries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->wlanentries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APWLANStatsMsgRsp)
  return target;
}

size_t APWLANStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APWLANStatsMsgRsp)
  size_t total_size = 0;

  // repeated .cheetah.WLANEntry WLANEntries = 1;
  {
    unsigned int count = this->wlanentries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wlanentries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APWLANStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APWLANStatsMsgRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APWLANStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APWLANStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APWLANStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APWLANStatsMsgRsp)
    UnsafeMergeFrom(*source);
  }
}

void APWLANStatsMsgRsp::MergeFrom(const APWLANStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APWLANStatsMsgRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APWLANStatsMsgRsp::UnsafeMergeFrom(const APWLANStatsMsgRsp& from) {
  GOOGLE_DCHECK(&from != this);
  wlanentries_.MergeFrom(from.wlanentries_);
}

void APWLANStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APWLANStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APWLANStatsMsgRsp::CopyFrom(const APWLANStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APWLANStatsMsgRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APWLANStatsMsgRsp::IsInitialized() const {

  return true;
}

void APWLANStatsMsgRsp::Swap(APWLANStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APWLANStatsMsgRsp::InternalSwap(APWLANStatsMsgRsp* other) {
  wlanentries_.UnsafeArenaSwap(&other->wlanentries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APWLANStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APWLANStatsMsgRsp_descriptor_;
  metadata.reflection = APWLANStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APWLANStatsMsgRsp

// repeated .cheetah.WLANEntry WLANEntries = 1;
int APWLANStatsMsgRsp::wlanentries_size() const {
  return wlanentries_.size();
}
void APWLANStatsMsgRsp::clear_wlanentries() {
  wlanentries_.Clear();
}
const ::cheetah::WLANEntry& APWLANStatsMsgRsp::wlanentries(int index) const {
  // @@protoc_insertion_point(field_get:cheetah.APWLANStatsMsgRsp.WLANEntries)
  return wlanentries_.Get(index);
}
::cheetah::WLANEntry* APWLANStatsMsgRsp::mutable_wlanentries(int index) {
  // @@protoc_insertion_point(field_mutable:cheetah.APWLANStatsMsgRsp.WLANEntries)
  return wlanentries_.Mutable(index);
}
::cheetah::WLANEntry* APWLANStatsMsgRsp::add_wlanentries() {
  // @@protoc_insertion_point(field_add:cheetah.APWLANStatsMsgRsp.WLANEntries)
  return wlanentries_.Add();
}
::google::protobuf::RepeatedPtrField< ::cheetah::WLANEntry >*
APWLANStatsMsgRsp::mutable_wlanentries() {
  // @@protoc_insertion_point(field_mutable_list:cheetah.APWLANStatsMsgRsp.WLANEntries)
  return &wlanentries_;
}
const ::google::protobuf::RepeatedPtrField< ::cheetah::WLANEntry >&
APWLANStatsMsgRsp::wlanentries() const {
  // @@protoc_insertion_point(field_list:cheetah.APWLANStatsMsgRsp.WLANEntries)
  return wlanentries_;
}

inline const APWLANStatsMsgRsp* APWLANStatsMsgRsp::internal_default_instance() {
  return &APWLANStatsMsgRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadioUtilization::kAllFieldNumber;
const int RadioUtilization::kTxFieldNumber;
const int RadioUtilization::kRxInBSSFieldNumber;
const int RadioUtilization::kRxOtherBSSFieldNumber;
const int RadioUtilization::kNonWifiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadioUtilization::RadioUtilization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.RadioUtilization)
}

void RadioUtilization::InitAsDefaultInstance() {
}

RadioUtilization::RadioUtilization(const RadioUtilization& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.RadioUtilization)
}

void RadioUtilization::SharedCtor() {
  ::memset(&all_, 0, reinterpret_cast<char*>(&nonwifi_) -
    reinterpret_cast<char*>(&all_) + sizeof(nonwifi_));
  _cached_size_ = 0;
}

RadioUtilization::~RadioUtilization() {
  // @@protoc_insertion_point(destructor:cheetah.RadioUtilization)
  SharedDtor();
}

void RadioUtilization::SharedDtor() {
}

void RadioUtilization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadioUtilization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadioUtilization_descriptor_;
}

const RadioUtilization& RadioUtilization::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RadioUtilization> RadioUtilization_default_instance_;

RadioUtilization* RadioUtilization::New(::google::protobuf::Arena* arena) const {
  RadioUtilization* n = new RadioUtilization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadioUtilization::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.RadioUtilization)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RadioUtilization, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RadioUtilization*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(all_, nonwifi_);

#undef ZR_HELPER_
#undef ZR_

}

bool RadioUtilization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.RadioUtilization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float All = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &all_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Tx;
        break;
      }

      // optional float Tx = 2;
      case 2: {
        if (tag == 21) {
         parse_Tx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_RxInBSS;
        break;
      }

      // optional float RxInBSS = 3;
      case 3: {
        if (tag == 29) {
         parse_RxInBSS:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rxinbss_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_RxOtherBSS;
        break;
      }

      // optional float RxOtherBSS = 4;
      case 4: {
        if (tag == 37) {
         parse_RxOtherBSS:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rxotherbss_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_NonWifi;
        break;
      }

      // optional float NonWifi = 5;
      case 5: {
        if (tag == 45) {
         parse_NonWifi:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nonwifi_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.RadioUtilization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.RadioUtilization)
  return false;
#undef DO_
}

void RadioUtilization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.RadioUtilization)
  // optional float All = 1;
  if (this->all() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->all(), output);
  }

  // optional float Tx = 2;
  if (this->tx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->tx(), output);
  }

  // optional float RxInBSS = 3;
  if (this->rxinbss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rxinbss(), output);
  }

  // optional float RxOtherBSS = 4;
  if (this->rxotherbss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rxotherbss(), output);
  }

  // optional float NonWifi = 5;
  if (this->nonwifi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->nonwifi(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.RadioUtilization)
}

::google::protobuf::uint8* RadioUtilization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.RadioUtilization)
  // optional float All = 1;
  if (this->all() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->all(), target);
  }

  // optional float Tx = 2;
  if (this->tx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->tx(), target);
  }

  // optional float RxInBSS = 3;
  if (this->rxinbss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rxinbss(), target);
  }

  // optional float RxOtherBSS = 4;
  if (this->rxotherbss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rxotherbss(), target);
  }

  // optional float NonWifi = 5;
  if (this->nonwifi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->nonwifi(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.RadioUtilization)
  return target;
}

size_t RadioUtilization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.RadioUtilization)
  size_t total_size = 0;

  // optional float All = 1;
  if (this->all() != 0) {
    total_size += 1 + 4;
  }

  // optional float Tx = 2;
  if (this->tx() != 0) {
    total_size += 1 + 4;
  }

  // optional float RxInBSS = 3;
  if (this->rxinbss() != 0) {
    total_size += 1 + 4;
  }

  // optional float RxOtherBSS = 4;
  if (this->rxotherbss() != 0) {
    total_size += 1 + 4;
  }

  // optional float NonWifi = 5;
  if (this->nonwifi() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadioUtilization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.RadioUtilization)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RadioUtilization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadioUtilization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.RadioUtilization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.RadioUtilization)
    UnsafeMergeFrom(*source);
  }
}

void RadioUtilization::MergeFrom(const RadioUtilization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.RadioUtilization)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RadioUtilization::UnsafeMergeFrom(const RadioUtilization& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.all() != 0) {
    set_all(from.all());
  }
  if (from.tx() != 0) {
    set_tx(from.tx());
  }
  if (from.rxinbss() != 0) {
    set_rxinbss(from.rxinbss());
  }
  if (from.rxotherbss() != 0) {
    set_rxotherbss(from.rxotherbss());
  }
  if (from.nonwifi() != 0) {
    set_nonwifi(from.nonwifi());
  }
}

void RadioUtilization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.RadioUtilization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioUtilization::CopyFrom(const RadioUtilization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.RadioUtilization)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RadioUtilization::IsInitialized() const {

  return true;
}

void RadioUtilization::Swap(RadioUtilization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadioUtilization::InternalSwap(RadioUtilization* other) {
  std::swap(all_, other->all_);
  std::swap(tx_, other->tx_);
  std::swap(rxinbss_, other->rxinbss_);
  std::swap(rxotherbss_, other->rxotherbss_);
  std::swap(nonwifi_, other->nonwifi_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadioUtilization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadioUtilization_descriptor_;
  metadata.reflection = RadioUtilization_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadioUtilization

// optional float All = 1;
void RadioUtilization::clear_all() {
  all_ = 0;
}
float RadioUtilization::all() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioUtilization.All)
  return all_;
}
void RadioUtilization::set_all(float value) {
  
  all_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioUtilization.All)
}

// optional float Tx = 2;
void RadioUtilization::clear_tx() {
  tx_ = 0;
}
float RadioUtilization::tx() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioUtilization.Tx)
  return tx_;
}
void RadioUtilization::set_tx(float value) {
  
  tx_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioUtilization.Tx)
}

// optional float RxInBSS = 3;
void RadioUtilization::clear_rxinbss() {
  rxinbss_ = 0;
}
float RadioUtilization::rxinbss() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioUtilization.RxInBSS)
  return rxinbss_;
}
void RadioUtilization::set_rxinbss(float value) {
  
  rxinbss_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioUtilization.RxInBSS)
}

// optional float RxOtherBSS = 4;
void RadioUtilization::clear_rxotherbss() {
  rxotherbss_ = 0;
}
float RadioUtilization::rxotherbss() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioUtilization.RxOtherBSS)
  return rxotherbss_;
}
void RadioUtilization::set_rxotherbss(float value) {
  
  rxotherbss_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioUtilization.RxOtherBSS)
}

// optional float NonWifi = 5;
void RadioUtilization::clear_nonwifi() {
  nonwifi_ = 0;
}
float RadioUtilization::nonwifi() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioUtilization.NonWifi)
  return nonwifi_;
}
void RadioUtilization::set_nonwifi(float value) {
  
  nonwifi_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioUtilization.NonWifi)
}

inline const RadioUtilization* RadioUtilization::internal_default_instance() {
  return &RadioUtilization_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadioCounters::kTxBytesFieldNumber;
const int RadioCounters::kTxPktsFieldNumber;
const int RadioCounters::kTxMgmtFieldNumber;
const int RadioCounters::kTxErrorsFieldNumber;
const int RadioCounters::kRxBytesFieldNumber;
const int RadioCounters::kRxPktsFieldNumber;
const int RadioCounters::kRxMgmtFieldNumber;
const int RadioCounters::kRxErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadioCounters::RadioCounters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.RadioCounters)
}

void RadioCounters::InitAsDefaultInstance() {
}

RadioCounters::RadioCounters(const RadioCounters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.RadioCounters)
}

void RadioCounters::SharedCtor() {
  ::memset(&txbytes_, 0, reinterpret_cast<char*>(&rxerrors_) -
    reinterpret_cast<char*>(&txbytes_) + sizeof(rxerrors_));
  _cached_size_ = 0;
}

RadioCounters::~RadioCounters() {
  // @@protoc_insertion_point(destructor:cheetah.RadioCounters)
  SharedDtor();
}

void RadioCounters::SharedDtor() {
}

void RadioCounters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadioCounters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadioCounters_descriptor_;
}

const RadioCounters& RadioCounters::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RadioCounters> RadioCounters_default_instance_;

RadioCounters* RadioCounters::New(::google::protobuf::Arena* arena) const {
  RadioCounters* n = new RadioCounters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadioCounters::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.RadioCounters)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RadioCounters, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RadioCounters*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(txbytes_, rxerrors_);

#undef ZR_HELPER_
#undef ZR_

}

bool RadioCounters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.RadioCounters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TxBytes = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txbytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TxPkts;
        break;
      }

      // optional uint32 TxPkts = 2;
      case 2: {
        if (tag == 16) {
         parse_TxPkts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txpkts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TxMgmt;
        break;
      }

      // optional uint32 TxMgmt = 3;
      case 3: {
        if (tag == 24) {
         parse_TxMgmt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txmgmt_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TxErrors;
        break;
      }

      // optional uint32 TxErrors = 4;
      case 4: {
        if (tag == 32) {
         parse_TxErrors:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txerrors_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RxBytes;
        break;
      }

      // optional uint64 RxBytes = 5;
      case 5: {
        if (tag == 40) {
         parse_RxBytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxbytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RxPkts;
        break;
      }

      // optional uint32 RxPkts = 6;
      case 6: {
        if (tag == 48) {
         parse_RxPkts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxpkts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RxMgmt;
        break;
      }

      // optional uint32 RxMgmt = 7;
      case 7: {
        if (tag == 56) {
         parse_RxMgmt:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxmgmt_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_RxErrors;
        break;
      }

      // optional uint32 RxErrors = 8;
      case 8: {
        if (tag == 64) {
         parse_RxErrors:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxerrors_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.RadioCounters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.RadioCounters)
  return false;
#undef DO_
}

void RadioCounters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.RadioCounters)
  // optional uint64 TxBytes = 1;
  if (this->txbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txbytes(), output);
  }

  // optional uint32 TxPkts = 2;
  if (this->txpkts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->txpkts(), output);
  }

  // optional uint32 TxMgmt = 3;
  if (this->txmgmt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->txmgmt(), output);
  }

  // optional uint32 TxErrors = 4;
  if (this->txerrors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->txerrors(), output);
  }

  // optional uint64 RxBytes = 5;
  if (this->rxbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rxbytes(), output);
  }

  // optional uint32 RxPkts = 6;
  if (this->rxpkts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rxpkts(), output);
  }

  // optional uint32 RxMgmt = 7;
  if (this->rxmgmt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rxmgmt(), output);
  }

  // optional uint32 RxErrors = 8;
  if (this->rxerrors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rxerrors(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.RadioCounters)
}

::google::protobuf::uint8* RadioCounters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.RadioCounters)
  // optional uint64 TxBytes = 1;
  if (this->txbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->txbytes(), target);
  }

  // optional uint32 TxPkts = 2;
  if (this->txpkts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->txpkts(), target);
  }

  // optional uint32 TxMgmt = 3;
  if (this->txmgmt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->txmgmt(), target);
  }

  // optional uint32 TxErrors = 4;
  if (this->txerrors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->txerrors(), target);
  }

  // optional uint64 RxBytes = 5;
  if (this->rxbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rxbytes(), target);
  }

  // optional uint32 RxPkts = 6;
  if (this->rxpkts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rxpkts(), target);
  }

  // optional uint32 RxMgmt = 7;
  if (this->rxmgmt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rxmgmt(), target);
  }

  // optional uint32 RxErrors = 8;
  if (this->rxerrors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rxerrors(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.RadioCounters)
  return target;
}

size_t RadioCounters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.RadioCounters)
  size_t total_size = 0;

  // optional uint64 TxBytes = 1;
  if (this->txbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txbytes());
  }

  // optional uint32 TxPkts = 2;
  if (this->txpkts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->txpkts());
  }

  // optional uint32 TxMgmt = 3;
  if (this->txmgmt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->txmgmt());
  }

  // optional uint32 TxErrors = 4;
  if (this->txerrors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->txerrors());
  }

  // optional uint64 RxBytes = 5;
  if (this->rxbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rxbytes());
  }

  // optional uint32 RxPkts = 6;
  if (this->rxpkts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rxpkts());
  }

  // optional uint32 RxMgmt = 7;
  if (this->rxmgmt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rxmgmt());
  }

  // optional uint32 RxErrors = 8;
  if (this->rxerrors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rxerrors());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadioCounters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.RadioCounters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RadioCounters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadioCounters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.RadioCounters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.RadioCounters)
    UnsafeMergeFrom(*source);
  }
}

void RadioCounters::MergeFrom(const RadioCounters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.RadioCounters)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RadioCounters::UnsafeMergeFrom(const RadioCounters& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.txbytes() != 0) {
    set_txbytes(from.txbytes());
  }
  if (from.txpkts() != 0) {
    set_txpkts(from.txpkts());
  }
  if (from.txmgmt() != 0) {
    set_txmgmt(from.txmgmt());
  }
  if (from.txerrors() != 0) {
    set_txerrors(from.txerrors());
  }
  if (from.rxbytes() != 0) {
    set_rxbytes(from.rxbytes());
  }
  if (from.rxpkts() != 0) {
    set_rxpkts(from.rxpkts());
  }
  if (from.rxmgmt() != 0) {
    set_rxmgmt(from.rxmgmt());
  }
  if (from.rxerrors() != 0) {
    set_rxerrors(from.rxerrors());
  }
}

void RadioCounters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.RadioCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioCounters::CopyFrom(const RadioCounters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.RadioCounters)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RadioCounters::IsInitialized() const {

  return true;
}

void RadioCounters::Swap(RadioCounters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadioCounters::InternalSwap(RadioCounters* other) {
  std::swap(txbytes_, other->txbytes_);
  std::swap(txpkts_, other->txpkts_);
  std::swap(txmgmt_, other->txmgmt_);
  std::swap(txerrors_, other->txerrors_);
  std::swap(rxbytes_, other->rxbytes_);
  std::swap(rxpkts_, other->rxpkts_);
  std::swap(rxmgmt_, other->rxmgmt_);
  std::swap(rxerrors_, other->rxerrors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadioCounters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadioCounters_descriptor_;
  metadata.reflection = RadioCounters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadioCounters

// optional uint64 TxBytes = 1;
void RadioCounters::clear_txbytes() {
  txbytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RadioCounters::txbytes() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioCounters.TxBytes)
  return txbytes_;
}
void RadioCounters::set_txbytes(::google::protobuf::uint64 value) {
  
  txbytes_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioCounters.TxBytes)
}

// optional uint32 TxPkts = 2;
void RadioCounters::clear_txpkts() {
  txpkts_ = 0u;
}
::google::protobuf::uint32 RadioCounters::txpkts() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioCounters.TxPkts)
  return txpkts_;
}
void RadioCounters::set_txpkts(::google::protobuf::uint32 value) {
  
  txpkts_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioCounters.TxPkts)
}

// optional uint32 TxMgmt = 3;
void RadioCounters::clear_txmgmt() {
  txmgmt_ = 0u;
}
::google::protobuf::uint32 RadioCounters::txmgmt() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioCounters.TxMgmt)
  return txmgmt_;
}
void RadioCounters::set_txmgmt(::google::protobuf::uint32 value) {
  
  txmgmt_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioCounters.TxMgmt)
}

// optional uint32 TxErrors = 4;
void RadioCounters::clear_txerrors() {
  txerrors_ = 0u;
}
::google::protobuf::uint32 RadioCounters::txerrors() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioCounters.TxErrors)
  return txerrors_;
}
void RadioCounters::set_txerrors(::google::protobuf::uint32 value) {
  
  txerrors_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioCounters.TxErrors)
}

// optional uint64 RxBytes = 5;
void RadioCounters::clear_rxbytes() {
  rxbytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RadioCounters::rxbytes() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioCounters.RxBytes)
  return rxbytes_;
}
void RadioCounters::set_rxbytes(::google::protobuf::uint64 value) {
  
  rxbytes_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioCounters.RxBytes)
}

// optional uint32 RxPkts = 6;
void RadioCounters::clear_rxpkts() {
  rxpkts_ = 0u;
}
::google::protobuf::uint32 RadioCounters::rxpkts() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioCounters.RxPkts)
  return rxpkts_;
}
void RadioCounters::set_rxpkts(::google::protobuf::uint32 value) {
  
  rxpkts_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioCounters.RxPkts)
}

// optional uint32 RxMgmt = 7;
void RadioCounters::clear_rxmgmt() {
  rxmgmt_ = 0u;
}
::google::protobuf::uint32 RadioCounters::rxmgmt() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioCounters.RxMgmt)
  return rxmgmt_;
}
void RadioCounters::set_rxmgmt(::google::protobuf::uint32 value) {
  
  rxmgmt_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioCounters.RxMgmt)
}

// optional uint32 RxErrors = 8;
void RadioCounters::clear_rxerrors() {
  rxerrors_ = 0u;
}
::google::protobuf::uint32 RadioCounters::rxerrors() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioCounters.RxErrors)
  return rxerrors_;
}
void RadioCounters::set_rxerrors(::google::protobuf::uint32 value) {
  
  rxerrors_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioCounters.RxErrors)
}

inline const RadioCounters* RadioCounters::internal_default_instance() {
  return &RadioCounters_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DfsState::kCacStateFieldNumber;
const int DfsState::kRadarDetectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsState::DfsState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.DfsState)
}

void DfsState::InitAsDefaultInstance() {
}

DfsState::DfsState(const DfsState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.DfsState)
}

void DfsState::SharedCtor() {
  ::memset(&cacstate_, 0, reinterpret_cast<char*>(&radardetected_) -
    reinterpret_cast<char*>(&cacstate_) + sizeof(radardetected_));
  _cached_size_ = 0;
}

DfsState::~DfsState() {
  // @@protoc_insertion_point(destructor:cheetah.DfsState)
  SharedDtor();
}

void DfsState::SharedDtor() {
}

void DfsState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DfsState_descriptor_;
}

const DfsState& DfsState::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DfsState> DfsState_default_instance_;

DfsState* DfsState::New(::google::protobuf::Arena* arena) const {
  DfsState* n = new DfsState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsState::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.DfsState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DfsState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DfsState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cacstate_, radardetected_);

#undef ZR_HELPER_
#undef ZR_

}

bool DfsState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.DfsState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CacState = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cacstate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RadarDetected;
        break;
      }

      // optional bool RadarDetected = 2;
      case 2: {
        if (tag == 16) {
         parse_RadarDetected:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radardetected_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.DfsState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.DfsState)
  return false;
#undef DO_
}

void DfsState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.DfsState)
  // optional uint32 CacState = 1;
  if (this->cacstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cacstate(), output);
  }

  // optional bool RadarDetected = 2;
  if (this->radardetected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->radardetected(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.DfsState)
}

::google::protobuf::uint8* DfsState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.DfsState)
  // optional uint32 CacState = 1;
  if (this->cacstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cacstate(), target);
  }

  // optional bool RadarDetected = 2;
  if (this->radardetected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->radardetected(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.DfsState)
  return target;
}

size_t DfsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.DfsState)
  size_t total_size = 0;

  // optional uint32 CacState = 1;
  if (this->cacstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cacstate());
  }

  // optional bool RadarDetected = 2;
  if (this->radardetected() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.DfsState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DfsState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.DfsState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.DfsState)
    UnsafeMergeFrom(*source);
  }
}

void DfsState::MergeFrom(const DfsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.DfsState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DfsState::UnsafeMergeFrom(const DfsState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cacstate() != 0) {
    set_cacstate(from.cacstate());
  }
  if (from.radardetected() != 0) {
    set_radardetected(from.radardetected());
  }
}

void DfsState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.DfsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsState::CopyFrom(const DfsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.DfsState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DfsState::IsInitialized() const {

  return true;
}

void DfsState::Swap(DfsState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsState::InternalSwap(DfsState* other) {
  std::swap(cacstate_, other->cacstate_);
  std::swap(radardetected_, other->radardetected_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DfsState_descriptor_;
  metadata.reflection = DfsState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsState

// optional uint32 CacState = 1;
void DfsState::clear_cacstate() {
  cacstate_ = 0u;
}
::google::protobuf::uint32 DfsState::cacstate() const {
  // @@protoc_insertion_point(field_get:cheetah.DfsState.CacState)
  return cacstate_;
}
void DfsState::set_cacstate(::google::protobuf::uint32 value) {
  
  cacstate_ = value;
  // @@protoc_insertion_point(field_set:cheetah.DfsState.CacState)
}

// optional bool RadarDetected = 2;
void DfsState::clear_radardetected() {
  radardetected_ = false;
}
bool DfsState::radardetected() const {
  // @@protoc_insertion_point(field_get:cheetah.DfsState.RadarDetected)
  return radardetected_;
}
void DfsState::set_radardetected(bool value) {
  
  radardetected_ = value;
  // @@protoc_insertion_point(field_set:cheetah.DfsState.RadarDetected)
}

inline const DfsState* DfsState::internal_default_instance() {
  return &DfsState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadioEntry::kDevFieldNumber;
const int RadioEntry::kBandFieldNumber;
const int RadioEntry::kChannelFieldNumber;
const int RadioEntry::kSecondaryChannelFieldNumber;
const int RadioEntry::kBandwidthFieldNumber;
const int RadioEntry::kNoiseFloorFieldNumber;
const int RadioEntry::kMaxTxPowerFieldNumber;
const int RadioEntry::kUtilizationFieldNumber;
const int RadioEntry::kAntennaRSSIFieldNumber;
const int RadioEntry::kCounterFieldNumber;
const int RadioEntry::kDFSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadioEntry::RadioEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.RadioEntry)
}

void RadioEntry::InitAsDefaultInstance() {
  utilization_ = const_cast< ::cheetah::RadioUtilization*>(
      ::cheetah::RadioUtilization::internal_default_instance());
  counter_ = const_cast< ::cheetah::RadioCounters*>(
      ::cheetah::RadioCounters::internal_default_instance());
  dfs_ = const_cast< ::cheetah::DfsState*>(
      ::cheetah::DfsState::internal_default_instance());
}

RadioEntry::RadioEntry(const RadioEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.RadioEntry)
}

void RadioEntry::SharedCtor() {
  dev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utilization_ = NULL;
  counter_ = NULL;
  dfs_ = NULL;
  ::memset(&channel_, 0, reinterpret_cast<char*>(&maxtxpower_) -
    reinterpret_cast<char*>(&channel_) + sizeof(maxtxpower_));
  _cached_size_ = 0;
}

RadioEntry::~RadioEntry() {
  // @@protoc_insertion_point(destructor:cheetah.RadioEntry)
  SharedDtor();
}

void RadioEntry::SharedDtor() {
  dev_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RadioEntry_default_instance_.get()) {
    delete utilization_;
    delete counter_;
    delete dfs_;
  }
}

void RadioEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadioEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadioEntry_descriptor_;
}

const RadioEntry& RadioEntry::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RadioEntry> RadioEntry_default_instance_;

RadioEntry* RadioEntry::New(::google::protobuf::Arena* arena) const {
  RadioEntry* n = new RadioEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadioEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.RadioEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RadioEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RadioEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channel_, maxtxpower_);
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && utilization_ != NULL) delete utilization_;
  utilization_ = NULL;
  if (GetArenaNoVirtual() == NULL && counter_ != NULL) delete counter_;
  counter_ = NULL;
  if (GetArenaNoVirtual() == NULL && dfs_ != NULL) delete dfs_;
  dfs_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  antennarssi_.Clear();
}

bool RadioEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.RadioEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Dev = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dev()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dev().data(), this->dev().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.RadioEntry.Dev"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Band;
        break;
      }

      // optional string Band = 2;
      case 2: {
        if (tag == 18) {
         parse_Band:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_band()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->band().data(), this->band().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.RadioEntry.Band"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Channel;
        break;
      }

      // optional uint32 Channel = 3;
      case 3: {
        if (tag == 24) {
         parse_Channel:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SecondaryChannel;
        break;
      }

      // optional uint32 SecondaryChannel = 4;
      case 4: {
        if (tag == 32) {
         parse_SecondaryChannel:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondarychannel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Bandwidth;
        break;
      }

      // optional uint32 Bandwidth = 5;
      case 5: {
        if (tag == 40) {
         parse_Bandwidth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bandwidth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_NoiseFloor;
        break;
      }

      // optional int32 NoiseFloor = 6;
      case 6: {
        if (tag == 48) {
         parse_NoiseFloor:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noisefloor_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_MaxTxPower;
        break;
      }

      // optional uint32 MaxTxPower = 7;
      case 7: {
        if (tag == 56) {
         parse_MaxTxPower:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtxpower_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Utilization;
        break;
      }

      // optional .cheetah.RadioUtilization Utilization = 8;
      case 8: {
        if (tag == 66) {
         parse_Utilization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_utilization()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_AntennaRSSI;
        break;
      }

      // repeated int32 AntennaRSSI = 9;
      case 9: {
        if (tag == 74) {
         parse_AntennaRSSI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_antennarssi())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_antennarssi())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Counter;
        break;
      }

      // optional .cheetah.RadioCounters Counter = 10;
      case 10: {
        if (tag == 82) {
         parse_Counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_DFS;
        break;
      }

      // optional .cheetah.DfsState DFS = 11;
      case 11: {
        if (tag == 90) {
         parse_DFS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dfs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.RadioEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.RadioEntry)
  return false;
#undef DO_
}

void RadioEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.RadioEntry)
  // optional string Dev = 1;
  if (this->dev().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev().data(), this->dev().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.RadioEntry.Dev");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dev(), output);
  }

  // optional string Band = 2;
  if (this->band().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.RadioEntry.Band");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->band(), output);
  }

  // optional uint32 Channel = 3;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel(), output);
  }

  // optional uint32 SecondaryChannel = 4;
  if (this->secondarychannel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->secondarychannel(), output);
  }

  // optional uint32 Bandwidth = 5;
  if (this->bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bandwidth(), output);
  }

  // optional int32 NoiseFloor = 6;
  if (this->noisefloor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->noisefloor(), output);
  }

  // optional uint32 MaxTxPower = 7;
  if (this->maxtxpower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxtxpower(), output);
  }

  // optional .cheetah.RadioUtilization Utilization = 8;
  if (this->has_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->utilization_, output);
  }

  // repeated int32 AntennaRSSI = 9;
  if (this->antennarssi_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_antennarssi_cached_byte_size_);
  }
  for (int i = 0; i < this->antennarssi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->antennarssi(i), output);
  }

  // optional .cheetah.RadioCounters Counter = 10;
  if (this->has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->counter_, output);
  }

  // optional .cheetah.DfsState DFS = 11;
  if (this->has_dfs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->dfs_, output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.RadioEntry)
}

::google::protobuf::uint8* RadioEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.RadioEntry)
  // optional string Dev = 1;
  if (this->dev().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev().data(), this->dev().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.RadioEntry.Dev");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dev(), target);
  }

  // optional string Band = 2;
  if (this->band().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.RadioEntry.Band");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->band(), target);
  }

  // optional uint32 Channel = 3;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel(), target);
  }

  // optional uint32 SecondaryChannel = 4;
  if (this->secondarychannel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->secondarychannel(), target);
  }

  // optional uint32 Bandwidth = 5;
  if (this->bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bandwidth(), target);
  }

  // optional int32 NoiseFloor = 6;
  if (this->noisefloor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->noisefloor(), target);
  }

  // optional uint32 MaxTxPower = 7;
  if (this->maxtxpower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxtxpower(), target);
  }

  // optional .cheetah.RadioUtilization Utilization = 8;
  if (this->has_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->utilization_, false, target);
  }

  // repeated int32 AntennaRSSI = 9;
  if (this->antennarssi_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _antennarssi_cached_byte_size_, target);
  }
  for (int i = 0; i < this->antennarssi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->antennarssi(i), target);
  }

  // optional .cheetah.RadioCounters Counter = 10;
  if (this->has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->counter_, false, target);
  }

  // optional .cheetah.DfsState DFS = 11;
  if (this->has_dfs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->dfs_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.RadioEntry)
  return target;
}

size_t RadioEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.RadioEntry)
  size_t total_size = 0;

  // optional string Dev = 1;
  if (this->dev().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dev());
  }

  // optional string Band = 2;
  if (this->band().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->band());
  }

  // optional uint32 Channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // optional uint32 SecondaryChannel = 4;
  if (this->secondarychannel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondarychannel());
  }

  // optional uint32 Bandwidth = 5;
  if (this->bandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bandwidth());
  }

  // optional int32 NoiseFloor = 6;
  if (this->noisefloor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->noisefloor());
  }

  // optional uint32 MaxTxPower = 7;
  if (this->maxtxpower() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxtxpower());
  }

  // optional .cheetah.RadioUtilization Utilization = 8;
  if (this->has_utilization()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->utilization_);
  }

  // optional .cheetah.RadioCounters Counter = 10;
  if (this->has_counter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counter_);
  }

  // optional .cheetah.DfsState DFS = 11;
  if (this->has_dfs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dfs_);
  }

  // repeated int32 AntennaRSSI = 9;
  {
    size_t data_size = 0;
    unsigned int count = this->antennarssi_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->antennarssi(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _antennarssi_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadioEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.RadioEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RadioEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadioEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.RadioEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.RadioEntry)
    UnsafeMergeFrom(*source);
  }
}

void RadioEntry::MergeFrom(const RadioEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.RadioEntry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RadioEntry::UnsafeMergeFrom(const RadioEntry& from) {
  GOOGLE_DCHECK(&from != this);
  antennarssi_.UnsafeMergeFrom(from.antennarssi_);
  if (from.dev().size() > 0) {

    dev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_);
  }
  if (from.band().size() > 0) {

    band_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.band_);
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.secondarychannel() != 0) {
    set_secondarychannel(from.secondarychannel());
  }
  if (from.bandwidth() != 0) {
    set_bandwidth(from.bandwidth());
  }
  if (from.noisefloor() != 0) {
    set_noisefloor(from.noisefloor());
  }
  if (from.maxtxpower() != 0) {
    set_maxtxpower(from.maxtxpower());
  }
  if (from.has_utilization()) {
    mutable_utilization()->::cheetah::RadioUtilization::MergeFrom(from.utilization());
  }
  if (from.has_counter()) {
    mutable_counter()->::cheetah::RadioCounters::MergeFrom(from.counter());
  }
  if (from.has_dfs()) {
    mutable_dfs()->::cheetah::DfsState::MergeFrom(from.dfs());
  }
}

void RadioEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.RadioEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioEntry::CopyFrom(const RadioEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.RadioEntry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RadioEntry::IsInitialized() const {

  return true;
}

void RadioEntry::Swap(RadioEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadioEntry::InternalSwap(RadioEntry* other) {
  dev_.Swap(&other->dev_);
  band_.Swap(&other->band_);
  std::swap(channel_, other->channel_);
  std::swap(secondarychannel_, other->secondarychannel_);
  std::swap(bandwidth_, other->bandwidth_);
  std::swap(noisefloor_, other->noisefloor_);
  std::swap(maxtxpower_, other->maxtxpower_);
  std::swap(utilization_, other->utilization_);
  antennarssi_.UnsafeArenaSwap(&other->antennarssi_);
  std::swap(counter_, other->counter_);
  std::swap(dfs_, other->dfs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadioEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadioEntry_descriptor_;
  metadata.reflection = RadioEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadioEntry

// optional string Dev = 1;
void RadioEntry::clear_dev() {
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RadioEntry::dev() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.Dev)
  return dev_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadioEntry::set_dev(const ::std::string& value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.RadioEntry.Dev)
}
void RadioEntry::set_dev(const char* value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.RadioEntry.Dev)
}
void RadioEntry::set_dev(const char* value, size_t size) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.RadioEntry.Dev)
}
::std::string* RadioEntry::mutable_dev() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.RadioEntry.Dev)
  return dev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RadioEntry::release_dev() {
  // @@protoc_insertion_point(field_release:cheetah.RadioEntry.Dev)
  
  return dev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadioEntry::set_allocated_dev(::std::string* dev) {
  if (dev != NULL) {
    
  } else {
    
  }
  dev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev);
  // @@protoc_insertion_point(field_set_allocated:cheetah.RadioEntry.Dev)
}

// optional string Band = 2;
void RadioEntry::clear_band() {
  band_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RadioEntry::band() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.Band)
  return band_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadioEntry::set_band(const ::std::string& value) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.RadioEntry.Band)
}
void RadioEntry::set_band(const char* value) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.RadioEntry.Band)
}
void RadioEntry::set_band(const char* value, size_t size) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.RadioEntry.Band)
}
::std::string* RadioEntry::mutable_band() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.RadioEntry.Band)
  return band_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RadioEntry::release_band() {
  // @@protoc_insertion_point(field_release:cheetah.RadioEntry.Band)
  
  return band_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadioEntry::set_allocated_band(::std::string* band) {
  if (band != NULL) {
    
  } else {
    
  }
  band_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), band);
  // @@protoc_insertion_point(field_set_allocated:cheetah.RadioEntry.Band)
}

// optional uint32 Channel = 3;
void RadioEntry::clear_channel() {
  channel_ = 0u;
}
::google::protobuf::uint32 RadioEntry::channel() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.Channel)
  return channel_;
}
void RadioEntry::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioEntry.Channel)
}

// optional uint32 SecondaryChannel = 4;
void RadioEntry::clear_secondarychannel() {
  secondarychannel_ = 0u;
}
::google::protobuf::uint32 RadioEntry::secondarychannel() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.SecondaryChannel)
  return secondarychannel_;
}
void RadioEntry::set_secondarychannel(::google::protobuf::uint32 value) {
  
  secondarychannel_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioEntry.SecondaryChannel)
}

// optional uint32 Bandwidth = 5;
void RadioEntry::clear_bandwidth() {
  bandwidth_ = 0u;
}
::google::protobuf::uint32 RadioEntry::bandwidth() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.Bandwidth)
  return bandwidth_;
}
void RadioEntry::set_bandwidth(::google::protobuf::uint32 value) {
  
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioEntry.Bandwidth)
}

// optional int32 NoiseFloor = 6;
void RadioEntry::clear_noisefloor() {
  noisefloor_ = 0;
}
::google::protobuf::int32 RadioEntry::noisefloor() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.NoiseFloor)
  return noisefloor_;
}
void RadioEntry::set_noisefloor(::google::protobuf::int32 value) {
  
  noisefloor_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioEntry.NoiseFloor)
}

// optional uint32 MaxTxPower = 7;
void RadioEntry::clear_maxtxpower() {
  maxtxpower_ = 0u;
}
::google::protobuf::uint32 RadioEntry::maxtxpower() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.MaxTxPower)
  return maxtxpower_;
}
void RadioEntry::set_maxtxpower(::google::protobuf::uint32 value) {
  
  maxtxpower_ = value;
  // @@protoc_insertion_point(field_set:cheetah.RadioEntry.MaxTxPower)
}

// optional .cheetah.RadioUtilization Utilization = 8;
bool RadioEntry::has_utilization() const {
  return this != internal_default_instance() && utilization_ != NULL;
}
void RadioEntry::clear_utilization() {
  if (GetArenaNoVirtual() == NULL && utilization_ != NULL) delete utilization_;
  utilization_ = NULL;
}
const ::cheetah::RadioUtilization& RadioEntry::utilization() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.Utilization)
  return utilization_ != NULL ? *utilization_
                         : *::cheetah::RadioUtilization::internal_default_instance();
}
::cheetah::RadioUtilization* RadioEntry::mutable_utilization() {
  
  if (utilization_ == NULL) {
    utilization_ = new ::cheetah::RadioUtilization;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.RadioEntry.Utilization)
  return utilization_;
}
::cheetah::RadioUtilization* RadioEntry::release_utilization() {
  // @@protoc_insertion_point(field_release:cheetah.RadioEntry.Utilization)
  
  ::cheetah::RadioUtilization* temp = utilization_;
  utilization_ = NULL;
  return temp;
}
void RadioEntry::set_allocated_utilization(::cheetah::RadioUtilization* utilization) {
  delete utilization_;
  utilization_ = utilization;
  if (utilization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.RadioEntry.Utilization)
}

// repeated int32 AntennaRSSI = 9;
int RadioEntry::antennarssi_size() const {
  return antennarssi_.size();
}
void RadioEntry::clear_antennarssi() {
  antennarssi_.Clear();
}
::google::protobuf::int32 RadioEntry::antennarssi(int index) const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.AntennaRSSI)
  return antennarssi_.Get(index);
}
void RadioEntry::set_antennarssi(int index, ::google::protobuf::int32 value) {
  antennarssi_.Set(index, value);
  // @@protoc_insertion_point(field_set:cheetah.RadioEntry.AntennaRSSI)
}
void RadioEntry::add_antennarssi(::google::protobuf::int32 value) {
  antennarssi_.Add(value);
  // @@protoc_insertion_point(field_add:cheetah.RadioEntry.AntennaRSSI)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RadioEntry::antennarssi() const {
  // @@protoc_insertion_point(field_list:cheetah.RadioEntry.AntennaRSSI)
  return antennarssi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RadioEntry::mutable_antennarssi() {
  // @@protoc_insertion_point(field_mutable_list:cheetah.RadioEntry.AntennaRSSI)
  return &antennarssi_;
}

// optional .cheetah.RadioCounters Counter = 10;
bool RadioEntry::has_counter() const {
  return this != internal_default_instance() && counter_ != NULL;
}
void RadioEntry::clear_counter() {
  if (GetArenaNoVirtual() == NULL && counter_ != NULL) delete counter_;
  counter_ = NULL;
}
const ::cheetah::RadioCounters& RadioEntry::counter() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.Counter)
  return counter_ != NULL ? *counter_
                         : *::cheetah::RadioCounters::internal_default_instance();
}
::cheetah::RadioCounters* RadioEntry::mutable_counter() {
  
  if (counter_ == NULL) {
    counter_ = new ::cheetah::RadioCounters;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.RadioEntry.Counter)
  return counter_;
}
::cheetah::RadioCounters* RadioEntry::release_counter() {
  // @@protoc_insertion_point(field_release:cheetah.RadioEntry.Counter)
  
  ::cheetah::RadioCounters* temp = counter_;
  counter_ = NULL;
  return temp;
}
void RadioEntry::set_allocated_counter(::cheetah::RadioCounters* counter) {
  delete counter_;
  counter_ = counter;
  if (counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.RadioEntry.Counter)
}

// optional .cheetah.DfsState DFS = 11;
bool RadioEntry::has_dfs() const {
  return this != internal_default_instance() && dfs_ != NULL;
}
void RadioEntry::clear_dfs() {
  if (GetArenaNoVirtual() == NULL && dfs_ != NULL) delete dfs_;
  dfs_ = NULL;
}
const ::cheetah::DfsState& RadioEntry::dfs() const {
  // @@protoc_insertion_point(field_get:cheetah.RadioEntry.DFS)
  return dfs_ != NULL ? *dfs_
                         : *::cheetah::DfsState::internal_default_instance();
}
::cheetah::DfsState* RadioEntry::mutable_dfs() {
  
  if (dfs_ == NULL) {
    dfs_ = new ::cheetah::DfsState;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.RadioEntry.DFS)
  return dfs_;
}
::cheetah::DfsState* RadioEntry::release_dfs() {
  // @@protoc_insertion_point(field_release:cheetah.RadioEntry.DFS)
  
  ::cheetah::DfsState* temp = dfs_;
  dfs_ = NULL;
  return temp;
}
void RadioEntry::set_allocated_dfs(::cheetah::DfsState* dfs) {
  delete dfs_;
  dfs_ = dfs;
  if (dfs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.RadioEntry.DFS)
}

inline const RadioEntry* RadioEntry::internal_default_instance() {
  return &RadioEntry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APRadioStatsMsgRsp::kRadiosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APRadioStatsMsgRsp::APRadioStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APRadioStatsMsgRsp)
}

void APRadioStatsMsgRsp::InitAsDefaultInstance() {
}

APRadioStatsMsgRsp::APRadioStatsMsgRsp(const APRadioStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APRadioStatsMsgRsp)
}

void APRadioStatsMsgRsp::SharedCtor() {
  _cached_size_ = 0;
}

APRadioStatsMsgRsp::~APRadioStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:cheetah.APRadioStatsMsgRsp)
  SharedDtor();
}

void APRadioStatsMsgRsp::SharedDtor() {
}

void APRadioStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APRadioStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APRadioStatsMsgRsp_descriptor_;
}

const APRadioStatsMsgRsp& APRadioStatsMsgRsp::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APRadioStatsMsgRsp> APRadioStatsMsgRsp_default_instance_;

APRadioStatsMsgRsp* APRadioStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  APRadioStatsMsgRsp* n = new APRadioStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APRadioStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APRadioStatsMsgRsp)
  radios_.Clear();
}

bool APRadioStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APRadioStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cheetah.RadioEntry Radios = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Radios:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_radios()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Radios;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APRadioStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APRadioStatsMsgRsp)
  return false;
#undef DO_
}

void APRadioStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APRadioStatsMsgRsp)
  // repeated .cheetah.RadioEntry Radios = 1;
  for (unsigned int i = 0, n = this->radios_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->radios(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APRadioStatsMsgRsp)
}

::google::protobuf::uint8* APRadioStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APRadioStatsMsgRsp)
  // repeated .cheetah.RadioEntry Radios = 1;
  for (unsigned int i = 0, n = this->radios_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->radios(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APRadioStatsMsgRsp)
  return target;
}

size_t APRadioStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APRadioStatsMsgRsp)
  size_t total_size = 0;

  // repeated .cheetah.RadioEntry Radios = 1;
  {
    unsigned int count = this->radios_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radios(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APRadioStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APRadioStatsMsgRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APRadioStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APRadioStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APRadioStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APRadioStatsMsgRsp)
    UnsafeMergeFrom(*source);
  }
}

void APRadioStatsMsgRsp::MergeFrom(const APRadioStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APRadioStatsMsgRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APRadioStatsMsgRsp::UnsafeMergeFrom(const APRadioStatsMsgRsp& from) {
  GOOGLE_DCHECK(&from != this);
  radios_.MergeFrom(from.radios_);
}

void APRadioStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APRadioStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APRadioStatsMsgRsp::CopyFrom(const APRadioStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APRadioStatsMsgRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APRadioStatsMsgRsp::IsInitialized() const {

  return true;
}

void APRadioStatsMsgRsp::Swap(APRadioStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APRadioStatsMsgRsp::InternalSwap(APRadioStatsMsgRsp* other) {
  radios_.UnsafeArenaSwap(&other->radios_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APRadioStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APRadioStatsMsgRsp_descriptor_;
  metadata.reflection = APRadioStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APRadioStatsMsgRsp

// repeated .cheetah.RadioEntry Radios = 1;
int APRadioStatsMsgRsp::radios_size() const {
  return radios_.size();
}
void APRadioStatsMsgRsp::clear_radios() {
  radios_.Clear();
}
const ::cheetah::RadioEntry& APRadioStatsMsgRsp::radios(int index) const {
  // @@protoc_insertion_point(field_get:cheetah.APRadioStatsMsgRsp.Radios)
  return radios_.Get(index);
}
::cheetah::RadioEntry* APRadioStatsMsgRsp::mutable_radios(int index) {
  // @@protoc_insertion_point(field_mutable:cheetah.APRadioStatsMsgRsp.Radios)
  return radios_.Mutable(index);
}
::cheetah::RadioEntry* APRadioStatsMsgRsp::add_radios() {
  // @@protoc_insertion_point(field_add:cheetah.APRadioStatsMsgRsp.Radios)
  return radios_.Add();
}
::google::protobuf::RepeatedPtrField< ::cheetah::RadioEntry >*
APRadioStatsMsgRsp::mutable_radios() {
  // @@protoc_insertion_point(field_mutable_list:cheetah.APRadioStatsMsgRsp.Radios)
  return &radios_;
}
const ::google::protobuf::RepeatedPtrField< ::cheetah::RadioEntry >&
APRadioStatsMsgRsp::radios() const {
  // @@protoc_insertion_point(field_list:cheetah.APRadioStatsMsgRsp.Radios)
  return radios_;
}

inline const APRadioStatsMsgRsp* APRadioStatsMsgRsp::internal_default_instance() {
  return &APRadioStatsMsgRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APClientEntry::kMACFieldNumber;
const int APClientEntry::kRadioIndexFieldNumber;
const int APClientEntry::kBandFieldNumber;
const int APClientEntry::kWlanFieldNumber;
const int APClientEntry::kConnectedTimeSecFieldNumber;
const int APClientEntry::kInactiveTimeMilliSecFieldNumber;
const int APClientEntry::kRSSIFieldNumber;
const int APClientEntry::kNFFieldNumber;
const int APClientEntry::kAntennaRSSIFieldNumber;
const int APClientEntry::kTxBitRateFieldNumber;
const int APClientEntry::kTxUnicastBytesFieldNumber;
const int APClientEntry::kTxUnicastPktsFieldNumber;
const int APClientEntry::kRxBytesFieldNumber;
const int APClientEntry::kRxPktsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APClientEntry::APClientEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APClientEntry)
}

void APClientEntry::InitAsDefaultInstance() {
  wlan_ = const_cast< ::cheetah::WLAN*>(
      ::cheetah::WLAN::internal_default_instance());
}

APClientEntry::APClientEntry(const APClientEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APClientEntry)
}

void APClientEntry::SharedCtor() {
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wlan_ = NULL;
  ::memset(&radioindex_, 0, reinterpret_cast<char*>(&rxpkts_) -
    reinterpret_cast<char*>(&radioindex_) + sizeof(rxpkts_));
  _cached_size_ = 0;
}

APClientEntry::~APClientEntry() {
  // @@protoc_insertion_point(destructor:cheetah.APClientEntry)
  SharedDtor();
}

void APClientEntry::SharedDtor() {
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &APClientEntry_default_instance_.get()) {
    delete wlan_;
  }
}

void APClientEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APClientEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APClientEntry_descriptor_;
}

const APClientEntry& APClientEntry::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APClientEntry> APClientEntry_default_instance_;

APClientEntry* APClientEntry::New(::google::protobuf::Arena* arena) const {
  APClientEntry* n = new APClientEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APClientEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APClientEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(APClientEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<APClientEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(radioindex_, nf_);
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && wlan_ != NULL) delete wlan_;
  wlan_ = NULL;
  ZR_(txbitrate_, rxpkts_);

#undef ZR_HELPER_
#undef ZR_

  antennarssi_.Clear();
}

bool APClientEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APClientEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MAC = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.APClientEntry.MAC"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RadioIndex;
        break;
      }

      // optional uint32 RadioIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_RadioIndex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radioindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Band;
        break;
      }

      // optional string Band = 4;
      case 4: {
        if (tag == 34) {
         parse_Band:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_band()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->band().data(), this->band().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.APClientEntry.Band"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Wlan;
        break;
      }

      // optional .cheetah.WLAN Wlan = 6;
      case 6: {
        if (tag == 50) {
         parse_Wlan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wlan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ConnectedTimeSec;
        break;
      }

      // optional uint32 ConnectedTimeSec = 7;
      case 7: {
        if (tag == 56) {
         parse_ConnectedTimeSec:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connectedtimesec_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_InactiveTimeMilliSec;
        break;
      }

      // optional uint32 InactiveTimeMilliSec = 8;
      case 8: {
        if (tag == 64) {
         parse_InactiveTimeMilliSec:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inactivetimemillisec_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_RSSI;
        break;
      }

      // optional int32 RSSI = 9;
      case 9: {
        if (tag == 72) {
         parse_RSSI:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_NF;
        break;
      }

      // optional int32 NF = 10;
      case 10: {
        if (tag == 80) {
         parse_NF:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nf_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_AntennaRSSI;
        break;
      }

      // repeated int32 AntennaRSSI = 11;
      case 11: {
        if (tag == 90) {
         parse_AntennaRSSI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_antennarssi())));
        } else if (tag == 88) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90, input, this->mutable_antennarssi())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_TxBitRate;
        break;
      }

      // optional int32 TxBitRate = 12;
      case 12: {
        if (tag == 96) {
         parse_TxBitRate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &txbitrate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_TxUnicastBytes;
        break;
      }

      // optional uint64 TxUnicastBytes = 13;
      case 13: {
        if (tag == 104) {
         parse_TxUnicastBytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txunicastbytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_TxUnicastPkts;
        break;
      }

      // optional uint32 TxUnicastPkts = 14;
      case 14: {
        if (tag == 112) {
         parse_TxUnicastPkts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txunicastpkts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_RxBytes;
        break;
      }

      // optional uint64 RxBytes = 15;
      case 15: {
        if (tag == 120) {
         parse_RxBytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxbytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_RxPkts;
        break;
      }

      // optional uint32 RxPkts = 16;
      case 16: {
        if (tag == 128) {
         parse_RxPkts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxpkts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APClientEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APClientEntry)
  return false;
#undef DO_
}

void APClientEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APClientEntry)
  // optional string MAC = 2;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APClientEntry.MAC");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac(), output);
  }

  // optional uint32 RadioIndex = 3;
  if (this->radioindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->radioindex(), output);
  }

  // optional string Band = 4;
  if (this->band().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APClientEntry.Band");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->band(), output);
  }

  // optional .cheetah.WLAN Wlan = 6;
  if (this->has_wlan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->wlan_, output);
  }

  // optional uint32 ConnectedTimeSec = 7;
  if (this->connectedtimesec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->connectedtimesec(), output);
  }

  // optional uint32 InactiveTimeMilliSec = 8;
  if (this->inactivetimemillisec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->inactivetimemillisec(), output);
  }

  // optional int32 RSSI = 9;
  if (this->rssi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rssi(), output);
  }

  // optional int32 NF = 10;
  if (this->nf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nf(), output);
  }

  // repeated int32 AntennaRSSI = 11;
  if (this->antennarssi_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_antennarssi_cached_byte_size_);
  }
  for (int i = 0; i < this->antennarssi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->antennarssi(i), output);
  }

  // optional int32 TxBitRate = 12;
  if (this->txbitrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->txbitrate(), output);
  }

  // optional uint64 TxUnicastBytes = 13;
  if (this->txunicastbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->txunicastbytes(), output);
  }

  // optional uint32 TxUnicastPkts = 14;
  if (this->txunicastpkts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->txunicastpkts(), output);
  }

  // optional uint64 RxBytes = 15;
  if (this->rxbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->rxbytes(), output);
  }

  // optional uint32 RxPkts = 16;
  if (this->rxpkts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->rxpkts(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APClientEntry)
}

::google::protobuf::uint8* APClientEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APClientEntry)
  // optional string MAC = 2;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APClientEntry.MAC");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mac(), target);
  }

  // optional uint32 RadioIndex = 3;
  if (this->radioindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->radioindex(), target);
  }

  // optional string Band = 4;
  if (this->band().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->band().data(), this->band().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APClientEntry.Band");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->band(), target);
  }

  // optional .cheetah.WLAN Wlan = 6;
  if (this->has_wlan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->wlan_, false, target);
  }

  // optional uint32 ConnectedTimeSec = 7;
  if (this->connectedtimesec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->connectedtimesec(), target);
  }

  // optional uint32 InactiveTimeMilliSec = 8;
  if (this->inactivetimemillisec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->inactivetimemillisec(), target);
  }

  // optional int32 RSSI = 9;
  if (this->rssi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rssi(), target);
  }

  // optional int32 NF = 10;
  if (this->nf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->nf(), target);
  }

  // repeated int32 AntennaRSSI = 11;
  if (this->antennarssi_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _antennarssi_cached_byte_size_, target);
  }
  for (int i = 0; i < this->antennarssi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->antennarssi(i), target);
  }

  // optional int32 TxBitRate = 12;
  if (this->txbitrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->txbitrate(), target);
  }

  // optional uint64 TxUnicastBytes = 13;
  if (this->txunicastbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->txunicastbytes(), target);
  }

  // optional uint32 TxUnicastPkts = 14;
  if (this->txunicastpkts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->txunicastpkts(), target);
  }

  // optional uint64 RxBytes = 15;
  if (this->rxbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->rxbytes(), target);
  }

  // optional uint32 RxPkts = 16;
  if (this->rxpkts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->rxpkts(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APClientEntry)
  return target;
}

size_t APClientEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APClientEntry)
  size_t total_size = 0;

  // optional string MAC = 2;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // optional uint32 RadioIndex = 3;
  if (this->radioindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radioindex());
  }

  // optional string Band = 4;
  if (this->band().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->band());
  }

  // optional .cheetah.WLAN Wlan = 6;
  if (this->has_wlan()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wlan_);
  }

  // optional uint32 ConnectedTimeSec = 7;
  if (this->connectedtimesec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connectedtimesec());
  }

  // optional uint32 InactiveTimeMilliSec = 8;
  if (this->inactivetimemillisec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inactivetimemillisec());
  }

  // optional int32 RSSI = 9;
  if (this->rssi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rssi());
  }

  // optional int32 NF = 10;
  if (this->nf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nf());
  }

  // optional int32 TxBitRate = 12;
  if (this->txbitrate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->txbitrate());
  }

  // optional uint64 TxUnicastBytes = 13;
  if (this->txunicastbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txunicastbytes());
  }

  // optional uint32 TxUnicastPkts = 14;
  if (this->txunicastpkts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->txunicastpkts());
  }

  // optional uint64 RxBytes = 15;
  if (this->rxbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rxbytes());
  }

  // optional uint32 RxPkts = 16;
  if (this->rxpkts() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rxpkts());
  }

  // repeated int32 AntennaRSSI = 11;
  {
    size_t data_size = 0;
    unsigned int count = this->antennarssi_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->antennarssi(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _antennarssi_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APClientEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APClientEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APClientEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APClientEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APClientEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APClientEntry)
    UnsafeMergeFrom(*source);
  }
}

void APClientEntry::MergeFrom(const APClientEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APClientEntry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APClientEntry::UnsafeMergeFrom(const APClientEntry& from) {
  GOOGLE_DCHECK(&from != this);
  antennarssi_.UnsafeMergeFrom(from.antennarssi_);
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.radioindex() != 0) {
    set_radioindex(from.radioindex());
  }
  if (from.band().size() > 0) {

    band_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.band_);
  }
  if (from.has_wlan()) {
    mutable_wlan()->::cheetah::WLAN::MergeFrom(from.wlan());
  }
  if (from.connectedtimesec() != 0) {
    set_connectedtimesec(from.connectedtimesec());
  }
  if (from.inactivetimemillisec() != 0) {
    set_inactivetimemillisec(from.inactivetimemillisec());
  }
  if (from.rssi() != 0) {
    set_rssi(from.rssi());
  }
  if (from.nf() != 0) {
    set_nf(from.nf());
  }
  if (from.txbitrate() != 0) {
    set_txbitrate(from.txbitrate());
  }
  if (from.txunicastbytes() != 0) {
    set_txunicastbytes(from.txunicastbytes());
  }
  if (from.txunicastpkts() != 0) {
    set_txunicastpkts(from.txunicastpkts());
  }
  if (from.rxbytes() != 0) {
    set_rxbytes(from.rxbytes());
  }
  if (from.rxpkts() != 0) {
    set_rxpkts(from.rxpkts());
  }
}

void APClientEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APClientEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APClientEntry::CopyFrom(const APClientEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APClientEntry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APClientEntry::IsInitialized() const {

  return true;
}

void APClientEntry::Swap(APClientEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APClientEntry::InternalSwap(APClientEntry* other) {
  mac_.Swap(&other->mac_);
  std::swap(radioindex_, other->radioindex_);
  band_.Swap(&other->band_);
  std::swap(wlan_, other->wlan_);
  std::swap(connectedtimesec_, other->connectedtimesec_);
  std::swap(inactivetimemillisec_, other->inactivetimemillisec_);
  std::swap(rssi_, other->rssi_);
  std::swap(nf_, other->nf_);
  antennarssi_.UnsafeArenaSwap(&other->antennarssi_);
  std::swap(txbitrate_, other->txbitrate_);
  std::swap(txunicastbytes_, other->txunicastbytes_);
  std::swap(txunicastpkts_, other->txunicastpkts_);
  std::swap(rxbytes_, other->rxbytes_);
  std::swap(rxpkts_, other->rxpkts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APClientEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APClientEntry_descriptor_;
  metadata.reflection = APClientEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APClientEntry

// optional string MAC = 2;
void APClientEntry::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& APClientEntry::mac() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.MAC)
  return mac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APClientEntry::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.MAC)
}
void APClientEntry::set_mac(const char* value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.APClientEntry.MAC)
}
void APClientEntry::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.APClientEntry.MAC)
}
::std::string* APClientEntry::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.APClientEntry.MAC)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APClientEntry::release_mac() {
  // @@protoc_insertion_point(field_release:cheetah.APClientEntry.MAC)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APClientEntry::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:cheetah.APClientEntry.MAC)
}

// optional uint32 RadioIndex = 3;
void APClientEntry::clear_radioindex() {
  radioindex_ = 0u;
}
::google::protobuf::uint32 APClientEntry::radioindex() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.RadioIndex)
  return radioindex_;
}
void APClientEntry::set_radioindex(::google::protobuf::uint32 value) {
  
  radioindex_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.RadioIndex)
}

// optional string Band = 4;
void APClientEntry::clear_band() {
  band_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& APClientEntry::band() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.Band)
  return band_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APClientEntry::set_band(const ::std::string& value) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.Band)
}
void APClientEntry::set_band(const char* value) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.APClientEntry.Band)
}
void APClientEntry::set_band(const char* value, size_t size) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.APClientEntry.Band)
}
::std::string* APClientEntry::mutable_band() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.APClientEntry.Band)
  return band_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APClientEntry::release_band() {
  // @@protoc_insertion_point(field_release:cheetah.APClientEntry.Band)
  
  return band_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APClientEntry::set_allocated_band(::std::string* band) {
  if (band != NULL) {
    
  } else {
    
  }
  band_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), band);
  // @@protoc_insertion_point(field_set_allocated:cheetah.APClientEntry.Band)
}

// optional .cheetah.WLAN Wlan = 6;
bool APClientEntry::has_wlan() const {
  return this != internal_default_instance() && wlan_ != NULL;
}
void APClientEntry::clear_wlan() {
  if (GetArenaNoVirtual() == NULL && wlan_ != NULL) delete wlan_;
  wlan_ = NULL;
}
const ::cheetah::WLAN& APClientEntry::wlan() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.Wlan)
  return wlan_ != NULL ? *wlan_
                         : *::cheetah::WLAN::internal_default_instance();
}
::cheetah::WLAN* APClientEntry::mutable_wlan() {
  
  if (wlan_ == NULL) {
    wlan_ = new ::cheetah::WLAN;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APClientEntry.Wlan)
  return wlan_;
}
::cheetah::WLAN* APClientEntry::release_wlan() {
  // @@protoc_insertion_point(field_release:cheetah.APClientEntry.Wlan)
  
  ::cheetah::WLAN* temp = wlan_;
  wlan_ = NULL;
  return temp;
}
void APClientEntry::set_allocated_wlan(::cheetah::WLAN* wlan) {
  delete wlan_;
  wlan_ = wlan;
  if (wlan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APClientEntry.Wlan)
}

// optional uint32 ConnectedTimeSec = 7;
void APClientEntry::clear_connectedtimesec() {
  connectedtimesec_ = 0u;
}
::google::protobuf::uint32 APClientEntry::connectedtimesec() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.ConnectedTimeSec)
  return connectedtimesec_;
}
void APClientEntry::set_connectedtimesec(::google::protobuf::uint32 value) {
  
  connectedtimesec_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.ConnectedTimeSec)
}

// optional uint32 InactiveTimeMilliSec = 8;
void APClientEntry::clear_inactivetimemillisec() {
  inactivetimemillisec_ = 0u;
}
::google::protobuf::uint32 APClientEntry::inactivetimemillisec() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.InactiveTimeMilliSec)
  return inactivetimemillisec_;
}
void APClientEntry::set_inactivetimemillisec(::google::protobuf::uint32 value) {
  
  inactivetimemillisec_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.InactiveTimeMilliSec)
}

// optional int32 RSSI = 9;
void APClientEntry::clear_rssi() {
  rssi_ = 0;
}
::google::protobuf::int32 APClientEntry::rssi() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.RSSI)
  return rssi_;
}
void APClientEntry::set_rssi(::google::protobuf::int32 value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.RSSI)
}

// optional int32 NF = 10;
void APClientEntry::clear_nf() {
  nf_ = 0;
}
::google::protobuf::int32 APClientEntry::nf() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.NF)
  return nf_;
}
void APClientEntry::set_nf(::google::protobuf::int32 value) {
  
  nf_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.NF)
}

// repeated int32 AntennaRSSI = 11;
int APClientEntry::antennarssi_size() const {
  return antennarssi_.size();
}
void APClientEntry::clear_antennarssi() {
  antennarssi_.Clear();
}
::google::protobuf::int32 APClientEntry::antennarssi(int index) const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.AntennaRSSI)
  return antennarssi_.Get(index);
}
void APClientEntry::set_antennarssi(int index, ::google::protobuf::int32 value) {
  antennarssi_.Set(index, value);
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.AntennaRSSI)
}
void APClientEntry::add_antennarssi(::google::protobuf::int32 value) {
  antennarssi_.Add(value);
  // @@protoc_insertion_point(field_add:cheetah.APClientEntry.AntennaRSSI)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
APClientEntry::antennarssi() const {
  // @@protoc_insertion_point(field_list:cheetah.APClientEntry.AntennaRSSI)
  return antennarssi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
APClientEntry::mutable_antennarssi() {
  // @@protoc_insertion_point(field_mutable_list:cheetah.APClientEntry.AntennaRSSI)
  return &antennarssi_;
}

// optional int32 TxBitRate = 12;
void APClientEntry::clear_txbitrate() {
  txbitrate_ = 0;
}
::google::protobuf::int32 APClientEntry::txbitrate() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.TxBitRate)
  return txbitrate_;
}
void APClientEntry::set_txbitrate(::google::protobuf::int32 value) {
  
  txbitrate_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.TxBitRate)
}

// optional uint64 TxUnicastBytes = 13;
void APClientEntry::clear_txunicastbytes() {
  txunicastbytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 APClientEntry::txunicastbytes() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.TxUnicastBytes)
  return txunicastbytes_;
}
void APClientEntry::set_txunicastbytes(::google::protobuf::uint64 value) {
  
  txunicastbytes_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.TxUnicastBytes)
}

// optional uint32 TxUnicastPkts = 14;
void APClientEntry::clear_txunicastpkts() {
  txunicastpkts_ = 0u;
}
::google::protobuf::uint32 APClientEntry::txunicastpkts() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.TxUnicastPkts)
  return txunicastpkts_;
}
void APClientEntry::set_txunicastpkts(::google::protobuf::uint32 value) {
  
  txunicastpkts_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.TxUnicastPkts)
}

// optional uint64 RxBytes = 15;
void APClientEntry::clear_rxbytes() {
  rxbytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 APClientEntry::rxbytes() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.RxBytes)
  return rxbytes_;
}
void APClientEntry::set_rxbytes(::google::protobuf::uint64 value) {
  
  rxbytes_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.RxBytes)
}

// optional uint32 RxPkts = 16;
void APClientEntry::clear_rxpkts() {
  rxpkts_ = 0u;
}
::google::protobuf::uint32 APClientEntry::rxpkts() const {
  // @@protoc_insertion_point(field_get:cheetah.APClientEntry.RxPkts)
  return rxpkts_;
}
void APClientEntry::set_rxpkts(::google::protobuf::uint32 value) {
  
  rxpkts_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APClientEntry.RxPkts)
}

inline const APClientEntry* APClientEntry::internal_default_instance() {
  return &APClientEntry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APClientStatsMsgRsp::kClientsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APClientStatsMsgRsp::APClientStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APClientStatsMsgRsp)
}

void APClientStatsMsgRsp::InitAsDefaultInstance() {
}

APClientStatsMsgRsp::APClientStatsMsgRsp(const APClientStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APClientStatsMsgRsp)
}

void APClientStatsMsgRsp::SharedCtor() {
  _cached_size_ = 0;
}

APClientStatsMsgRsp::~APClientStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:cheetah.APClientStatsMsgRsp)
  SharedDtor();
}

void APClientStatsMsgRsp::SharedDtor() {
}

void APClientStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APClientStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APClientStatsMsgRsp_descriptor_;
}

const APClientStatsMsgRsp& APClientStatsMsgRsp::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APClientStatsMsgRsp> APClientStatsMsgRsp_default_instance_;

APClientStatsMsgRsp* APClientStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  APClientStatsMsgRsp* n = new APClientStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APClientStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APClientStatsMsgRsp)
  clients_.Clear();
}

bool APClientStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APClientStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cheetah.APClientEntry Clients = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Clients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_clients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Clients;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APClientStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APClientStatsMsgRsp)
  return false;
#undef DO_
}

void APClientStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APClientStatsMsgRsp)
  // repeated .cheetah.APClientEntry Clients = 1;
  for (unsigned int i = 0, n = this->clients_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clients(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APClientStatsMsgRsp)
}

::google::protobuf::uint8* APClientStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APClientStatsMsgRsp)
  // repeated .cheetah.APClientEntry Clients = 1;
  for (unsigned int i = 0, n = this->clients_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->clients(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APClientStatsMsgRsp)
  return target;
}

size_t APClientStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APClientStatsMsgRsp)
  size_t total_size = 0;

  // repeated .cheetah.APClientEntry Clients = 1;
  {
    unsigned int count = this->clients_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clients(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APClientStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APClientStatsMsgRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APClientStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APClientStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APClientStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APClientStatsMsgRsp)
    UnsafeMergeFrom(*source);
  }
}

void APClientStatsMsgRsp::MergeFrom(const APClientStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APClientStatsMsgRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APClientStatsMsgRsp::UnsafeMergeFrom(const APClientStatsMsgRsp& from) {
  GOOGLE_DCHECK(&from != this);
  clients_.MergeFrom(from.clients_);
}

void APClientStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APClientStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APClientStatsMsgRsp::CopyFrom(const APClientStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APClientStatsMsgRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APClientStatsMsgRsp::IsInitialized() const {

  return true;
}

void APClientStatsMsgRsp::Swap(APClientStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APClientStatsMsgRsp::InternalSwap(APClientStatsMsgRsp* other) {
  clients_.UnsafeArenaSwap(&other->clients_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APClientStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APClientStatsMsgRsp_descriptor_;
  metadata.reflection = APClientStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APClientStatsMsgRsp

// repeated .cheetah.APClientEntry Clients = 1;
int APClientStatsMsgRsp::clients_size() const {
  return clients_.size();
}
void APClientStatsMsgRsp::clear_clients() {
  clients_.Clear();
}
const ::cheetah::APClientEntry& APClientStatsMsgRsp::clients(int index) const {
  // @@protoc_insertion_point(field_get:cheetah.APClientStatsMsgRsp.Clients)
  return clients_.Get(index);
}
::cheetah::APClientEntry* APClientStatsMsgRsp::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:cheetah.APClientStatsMsgRsp.Clients)
  return clients_.Mutable(index);
}
::cheetah::APClientEntry* APClientStatsMsgRsp::add_clients() {
  // @@protoc_insertion_point(field_add:cheetah.APClientStatsMsgRsp.Clients)
  return clients_.Add();
}
::google::protobuf::RepeatedPtrField< ::cheetah::APClientEntry >*
APClientStatsMsgRsp::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:cheetah.APClientStatsMsgRsp.Clients)
  return &clients_;
}
const ::google::protobuf::RepeatedPtrField< ::cheetah::APClientEntry >&
APClientStatsMsgRsp::clients() const {
  // @@protoc_insertion_point(field_list:cheetah.APClientStatsMsgRsp.Clients)
  return clients_;
}

inline const APClientStatsMsgRsp* APClientStatsMsgRsp::internal_default_instance() {
  return &APClientStatsMsgRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APInterfaceEntry::kNameFieldNumber;
const int APInterfaceEntry::kLinkFieldNumber;
const int APInterfaceEntry::kFullDuplexFieldNumber;
const int APInterfaceEntry::kSpeedFieldNumber;
const int APInterfaceEntry::kRxBytesFieldNumber;
const int APInterfaceEntry::kRxPktsFieldNumber;
const int APInterfaceEntry::kRxDiscardsFieldNumber;
const int APInterfaceEntry::kTxBytesFieldNumber;
const int APInterfaceEntry::kTxPktsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APInterfaceEntry::APInterfaceEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APInterfaceEntry)
}

void APInterfaceEntry::InitAsDefaultInstance() {
}

APInterfaceEntry::APInterfaceEntry(const APInterfaceEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APInterfaceEntry)
}

void APInterfaceEntry::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&link_, 0, reinterpret_cast<char*>(&txpkts_) -
    reinterpret_cast<char*>(&link_) + sizeof(txpkts_));
  _cached_size_ = 0;
}

APInterfaceEntry::~APInterfaceEntry() {
  // @@protoc_insertion_point(destructor:cheetah.APInterfaceEntry)
  SharedDtor();
}

void APInterfaceEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void APInterfaceEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APInterfaceEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APInterfaceEntry_descriptor_;
}

const APInterfaceEntry& APInterfaceEntry::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APInterfaceEntry> APInterfaceEntry_default_instance_;

APInterfaceEntry* APInterfaceEntry::New(::google::protobuf::Arena* arena) const {
  APInterfaceEntry* n = new APInterfaceEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APInterfaceEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APInterfaceEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(APInterfaceEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<APInterfaceEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(link_, txbytes_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txpkts_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool APInterfaceEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APInterfaceEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cheetah.APInterfaceEntry.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Link;
        break;
      }

      // optional bool Link = 2;
      case 2: {
        if (tag == 16) {
         parse_Link:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &link_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FullDuplex;
        break;
      }

      // optional bool FullDuplex = 3;
      case 3: {
        if (tag == 24) {
         parse_FullDuplex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fullduplex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Speed;
        break;
      }

      // optional uint32 Speed = 4;
      case 4: {
        if (tag == 32) {
         parse_Speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RxBytes;
        break;
      }

      // optional uint64 RxBytes = 5;
      case 5: {
        if (tag == 40) {
         parse_RxBytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxbytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RxPkts;
        break;
      }

      // optional uint32 RxPkts = 6;
      case 6: {
        if (tag == 48) {
         parse_RxPkts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxpkts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RxDiscards;
        break;
      }

      // optional uint32 RxDiscards = 7;
      case 7: {
        if (tag == 56) {
         parse_RxDiscards:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxdiscards_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TxBytes;
        break;
      }

      // optional uint64 TxBytes = 8;
      case 8: {
        if (tag == 64) {
         parse_TxBytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txbytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_TxPkts;
        break;
      }

      // optional uint32 TxPkts = 9;
      case 9: {
        if (tag == 72) {
         parse_TxPkts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txpkts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APInterfaceEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APInterfaceEntry)
  return false;
#undef DO_
}

void APInterfaceEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APInterfaceEntry)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APInterfaceEntry.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool Link = 2;
  if (this->link() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->link(), output);
  }

  // optional bool FullDuplex = 3;
  if (this->fullduplex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fullduplex(), output);
  }

  // optional uint32 Speed = 4;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->speed(), output);
  }

  // optional uint64 RxBytes = 5;
  if (this->rxbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rxbytes(), output);
  }

  // optional uint32 RxPkts = 6;
  if (this->rxpkts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rxpkts(), output);
  }

  // optional uint32 RxDiscards = 7;
  if (this->rxdiscards() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rxdiscards(), output);
  }

  // optional uint64 TxBytes = 8;
  if (this->txbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->txbytes(), output);
  }

  // optional uint32 TxPkts = 9;
  if (this->txpkts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->txpkts(), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APInterfaceEntry)
}

::google::protobuf::uint8* APInterfaceEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APInterfaceEntry)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cheetah.APInterfaceEntry.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool Link = 2;
  if (this->link() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->link(), target);
  }

  // optional bool FullDuplex = 3;
  if (this->fullduplex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fullduplex(), target);
  }

  // optional uint32 Speed = 4;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->speed(), target);
  }

  // optional uint64 RxBytes = 5;
  if (this->rxbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rxbytes(), target);
  }

  // optional uint32 RxPkts = 6;
  if (this->rxpkts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rxpkts(), target);
  }

  // optional uint32 RxDiscards = 7;
  if (this->rxdiscards() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rxdiscards(), target);
  }

  // optional uint64 TxBytes = 8;
  if (this->txbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->txbytes(), target);
  }

  // optional uint32 TxPkts = 9;
  if (this->txpkts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->txpkts(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APInterfaceEntry)
  return target;
}

size_t APInterfaceEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APInterfaceEntry)
  size_t total_size = 0;

  // optional string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bool Link = 2;
  if (this->link() != 0) {
    total_size += 1 + 1;
  }

  // optional bool FullDuplex = 3;
  if (this->fullduplex() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 Speed = 4;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  // optional uint64 RxBytes = 5;
  if (this->rxbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rxbytes());
  }

  // optional uint32 RxPkts = 6;
  if (this->rxpkts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rxpkts());
  }

  // optional uint32 RxDiscards = 7;
  if (this->rxdiscards() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rxdiscards());
  }

  // optional uint64 TxBytes = 8;
  if (this->txbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txbytes());
  }

  // optional uint32 TxPkts = 9;
  if (this->txpkts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->txpkts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APInterfaceEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APInterfaceEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APInterfaceEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APInterfaceEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APInterfaceEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APInterfaceEntry)
    UnsafeMergeFrom(*source);
  }
}

void APInterfaceEntry::MergeFrom(const APInterfaceEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APInterfaceEntry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APInterfaceEntry::UnsafeMergeFrom(const APInterfaceEntry& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.link() != 0) {
    set_link(from.link());
  }
  if (from.fullduplex() != 0) {
    set_fullduplex(from.fullduplex());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.rxbytes() != 0) {
    set_rxbytes(from.rxbytes());
  }
  if (from.rxpkts() != 0) {
    set_rxpkts(from.rxpkts());
  }
  if (from.rxdiscards() != 0) {
    set_rxdiscards(from.rxdiscards());
  }
  if (from.txbytes() != 0) {
    set_txbytes(from.txbytes());
  }
  if (from.txpkts() != 0) {
    set_txpkts(from.txpkts());
  }
}

void APInterfaceEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APInterfaceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APInterfaceEntry::CopyFrom(const APInterfaceEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APInterfaceEntry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APInterfaceEntry::IsInitialized() const {

  return true;
}

void APInterfaceEntry::Swap(APInterfaceEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APInterfaceEntry::InternalSwap(APInterfaceEntry* other) {
  name_.Swap(&other->name_);
  std::swap(link_, other->link_);
  std::swap(fullduplex_, other->fullduplex_);
  std::swap(speed_, other->speed_);
  std::swap(rxbytes_, other->rxbytes_);
  std::swap(rxpkts_, other->rxpkts_);
  std::swap(rxdiscards_, other->rxdiscards_);
  std::swap(txbytes_, other->txbytes_);
  std::swap(txpkts_, other->txpkts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APInterfaceEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APInterfaceEntry_descriptor_;
  metadata.reflection = APInterfaceEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APInterfaceEntry

// optional string Name = 1;
void APInterfaceEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& APInterfaceEntry::name() const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceEntry.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APInterfaceEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cheetah.APInterfaceEntry.Name)
}
void APInterfaceEntry::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cheetah.APInterfaceEntry.Name)
}
void APInterfaceEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cheetah.APInterfaceEntry.Name)
}
::std::string* APInterfaceEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cheetah.APInterfaceEntry.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* APInterfaceEntry::release_name() {
  // @@protoc_insertion_point(field_release:cheetah.APInterfaceEntry.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void APInterfaceEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cheetah.APInterfaceEntry.Name)
}

// optional bool Link = 2;
void APInterfaceEntry::clear_link() {
  link_ = false;
}
bool APInterfaceEntry::link() const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceEntry.Link)
  return link_;
}
void APInterfaceEntry::set_link(bool value) {
  
  link_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APInterfaceEntry.Link)
}

// optional bool FullDuplex = 3;
void APInterfaceEntry::clear_fullduplex() {
  fullduplex_ = false;
}
bool APInterfaceEntry::fullduplex() const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceEntry.FullDuplex)
  return fullduplex_;
}
void APInterfaceEntry::set_fullduplex(bool value) {
  
  fullduplex_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APInterfaceEntry.FullDuplex)
}

// optional uint32 Speed = 4;
void APInterfaceEntry::clear_speed() {
  speed_ = 0u;
}
::google::protobuf::uint32 APInterfaceEntry::speed() const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceEntry.Speed)
  return speed_;
}
void APInterfaceEntry::set_speed(::google::protobuf::uint32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APInterfaceEntry.Speed)
}

// optional uint64 RxBytes = 5;
void APInterfaceEntry::clear_rxbytes() {
  rxbytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 APInterfaceEntry::rxbytes() const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceEntry.RxBytes)
  return rxbytes_;
}
void APInterfaceEntry::set_rxbytes(::google::protobuf::uint64 value) {
  
  rxbytes_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APInterfaceEntry.RxBytes)
}

// optional uint32 RxPkts = 6;
void APInterfaceEntry::clear_rxpkts() {
  rxpkts_ = 0u;
}
::google::protobuf::uint32 APInterfaceEntry::rxpkts() const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceEntry.RxPkts)
  return rxpkts_;
}
void APInterfaceEntry::set_rxpkts(::google::protobuf::uint32 value) {
  
  rxpkts_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APInterfaceEntry.RxPkts)
}

// optional uint32 RxDiscards = 7;
void APInterfaceEntry::clear_rxdiscards() {
  rxdiscards_ = 0u;
}
::google::protobuf::uint32 APInterfaceEntry::rxdiscards() const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceEntry.RxDiscards)
  return rxdiscards_;
}
void APInterfaceEntry::set_rxdiscards(::google::protobuf::uint32 value) {
  
  rxdiscards_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APInterfaceEntry.RxDiscards)
}

// optional uint64 TxBytes = 8;
void APInterfaceEntry::clear_txbytes() {
  txbytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 APInterfaceEntry::txbytes() const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceEntry.TxBytes)
  return txbytes_;
}
void APInterfaceEntry::set_txbytes(::google::protobuf::uint64 value) {
  
  txbytes_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APInterfaceEntry.TxBytes)
}

// optional uint32 TxPkts = 9;
void APInterfaceEntry::clear_txpkts() {
  txpkts_ = 0u;
}
::google::protobuf::uint32 APInterfaceEntry::txpkts() const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceEntry.TxPkts)
  return txpkts_;
}
void APInterfaceEntry::set_txpkts(::google::protobuf::uint32 value) {
  
  txpkts_ = value;
  // @@protoc_insertion_point(field_set:cheetah.APInterfaceEntry.TxPkts)
}

inline const APInterfaceEntry* APInterfaceEntry::internal_default_instance() {
  return &APInterfaceEntry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APInterfaceStatsMsgRsp::kInterfacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APInterfaceStatsMsgRsp::APInterfaceStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APInterfaceStatsMsgRsp)
}

void APInterfaceStatsMsgRsp::InitAsDefaultInstance() {
}

APInterfaceStatsMsgRsp::APInterfaceStatsMsgRsp(const APInterfaceStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APInterfaceStatsMsgRsp)
}

void APInterfaceStatsMsgRsp::SharedCtor() {
  _cached_size_ = 0;
}

APInterfaceStatsMsgRsp::~APInterfaceStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:cheetah.APInterfaceStatsMsgRsp)
  SharedDtor();
}

void APInterfaceStatsMsgRsp::SharedDtor() {
}

void APInterfaceStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APInterfaceStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APInterfaceStatsMsgRsp_descriptor_;
}

const APInterfaceStatsMsgRsp& APInterfaceStatsMsgRsp::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APInterfaceStatsMsgRsp> APInterfaceStatsMsgRsp_default_instance_;

APInterfaceStatsMsgRsp* APInterfaceStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  APInterfaceStatsMsgRsp* n = new APInterfaceStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APInterfaceStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APInterfaceStatsMsgRsp)
  interfaces_.Clear();
}

bool APInterfaceStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APInterfaceStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cheetah.APInterfaceEntry Interfaces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Interfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_interfaces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Interfaces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APInterfaceStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APInterfaceStatsMsgRsp)
  return false;
#undef DO_
}

void APInterfaceStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APInterfaceStatsMsgRsp)
  // repeated .cheetah.APInterfaceEntry Interfaces = 1;
  for (unsigned int i = 0, n = this->interfaces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->interfaces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APInterfaceStatsMsgRsp)
}

::google::protobuf::uint8* APInterfaceStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APInterfaceStatsMsgRsp)
  // repeated .cheetah.APInterfaceEntry Interfaces = 1;
  for (unsigned int i = 0, n = this->interfaces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->interfaces(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APInterfaceStatsMsgRsp)
  return target;
}

size_t APInterfaceStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APInterfaceStatsMsgRsp)
  size_t total_size = 0;

  // repeated .cheetah.APInterfaceEntry Interfaces = 1;
  {
    unsigned int count = this->interfaces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interfaces(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APInterfaceStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APInterfaceStatsMsgRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APInterfaceStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APInterfaceStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APInterfaceStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APInterfaceStatsMsgRsp)
    UnsafeMergeFrom(*source);
  }
}

void APInterfaceStatsMsgRsp::MergeFrom(const APInterfaceStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APInterfaceStatsMsgRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APInterfaceStatsMsgRsp::UnsafeMergeFrom(const APInterfaceStatsMsgRsp& from) {
  GOOGLE_DCHECK(&from != this);
  interfaces_.MergeFrom(from.interfaces_);
}

void APInterfaceStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APInterfaceStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APInterfaceStatsMsgRsp::CopyFrom(const APInterfaceStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APInterfaceStatsMsgRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APInterfaceStatsMsgRsp::IsInitialized() const {

  return true;
}

void APInterfaceStatsMsgRsp::Swap(APInterfaceStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APInterfaceStatsMsgRsp::InternalSwap(APInterfaceStatsMsgRsp* other) {
  interfaces_.UnsafeArenaSwap(&other->interfaces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APInterfaceStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APInterfaceStatsMsgRsp_descriptor_;
  metadata.reflection = APInterfaceStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APInterfaceStatsMsgRsp

// repeated .cheetah.APInterfaceEntry Interfaces = 1;
int APInterfaceStatsMsgRsp::interfaces_size() const {
  return interfaces_.size();
}
void APInterfaceStatsMsgRsp::clear_interfaces() {
  interfaces_.Clear();
}
const ::cheetah::APInterfaceEntry& APInterfaceStatsMsgRsp::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:cheetah.APInterfaceStatsMsgRsp.Interfaces)
  return interfaces_.Get(index);
}
::cheetah::APInterfaceEntry* APInterfaceStatsMsgRsp::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:cheetah.APInterfaceStatsMsgRsp.Interfaces)
  return interfaces_.Mutable(index);
}
::cheetah::APInterfaceEntry* APInterfaceStatsMsgRsp::add_interfaces() {
  // @@protoc_insertion_point(field_add:cheetah.APInterfaceStatsMsgRsp.Interfaces)
  return interfaces_.Add();
}
::google::protobuf::RepeatedPtrField< ::cheetah::APInterfaceEntry >*
APInterfaceStatsMsgRsp::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:cheetah.APInterfaceStatsMsgRsp.Interfaces)
  return &interfaces_;
}
const ::google::protobuf::RepeatedPtrField< ::cheetah::APInterfaceEntry >&
APInterfaceStatsMsgRsp::interfaces() const {
  // @@protoc_insertion_point(field_list:cheetah.APInterfaceStatsMsgRsp.Interfaces)
  return interfaces_;
}

inline const APInterfaceStatsMsgRsp* APInterfaceStatsMsgRsp::internal_default_instance() {
  return &APInterfaceStatsMsgRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APStatsMsgRsp::kErrStatusFieldNumber;
const int APStatsMsgRsp::kSystemStatsFieldNumber;
const int APStatsMsgRsp::kMemoryStatsFieldNumber;
const int APStatsMsgRsp::kInterfaceStatsFieldNumber;
const int APStatsMsgRsp::kRoutingStatsFieldNumber;
const int APStatsMsgRsp::kDNSStatsFieldNumber;
const int APStatsMsgRsp::kRadioStatsFieldNumber;
const int APStatsMsgRsp::kWLANStatsFieldNumber;
const int APStatsMsgRsp::kClientStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APStatsMsgRsp::APStatsMsgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ap_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cheetah.APStatsMsgRsp)
}

void APStatsMsgRsp::InitAsDefaultInstance() {
  errstatus_ = const_cast< ::cheetah::APErrorStatus*>(
      ::cheetah::APErrorStatus::internal_default_instance());
  APStatsMsgRsp_default_oneof_instance_->systemstats_ = const_cast< ::cheetah::APSystemStatsMsgRsp*>(
      ::cheetah::APSystemStatsMsgRsp::internal_default_instance());
  APStatsMsgRsp_default_oneof_instance_->memorystats_ = const_cast< ::cheetah::APMemoryStatsMsgRsp*>(
      ::cheetah::APMemoryStatsMsgRsp::internal_default_instance());
  APStatsMsgRsp_default_oneof_instance_->interfacestats_ = const_cast< ::cheetah::APInterfaceStatsMsgRsp*>(
      ::cheetah::APInterfaceStatsMsgRsp::internal_default_instance());
  APStatsMsgRsp_default_oneof_instance_->routingstats_ = const_cast< ::cheetah::APRoutingStatsMsgRsp*>(
      ::cheetah::APRoutingStatsMsgRsp::internal_default_instance());
  APStatsMsgRsp_default_oneof_instance_->dnsstats_ = const_cast< ::cheetah::APDNSStatsMsgRsp*>(
      ::cheetah::APDNSStatsMsgRsp::internal_default_instance());
  APStatsMsgRsp_default_oneof_instance_->radiostats_ = const_cast< ::cheetah::APRadioStatsMsgRsp*>(
      ::cheetah::APRadioStatsMsgRsp::internal_default_instance());
  APStatsMsgRsp_default_oneof_instance_->wlanstats_ = const_cast< ::cheetah::APWLANStatsMsgRsp*>(
      ::cheetah::APWLANStatsMsgRsp::internal_default_instance());
  APStatsMsgRsp_default_oneof_instance_->clientstats_ = const_cast< ::cheetah::APClientStatsMsgRsp*>(
      ::cheetah::APClientStatsMsgRsp::internal_default_instance());
}

APStatsMsgRsp::APStatsMsgRsp(const APStatsMsgRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cheetah.APStatsMsgRsp)
}

void APStatsMsgRsp::SharedCtor() {
  errstatus_ = NULL;
  clear_has_msg_rsp();
  _cached_size_ = 0;
}

APStatsMsgRsp::~APStatsMsgRsp() {
  // @@protoc_insertion_point(destructor:cheetah.APStatsMsgRsp)
  SharedDtor();
}

void APStatsMsgRsp::SharedDtor() {
  if (has_msg_rsp()) {
    clear_msg_rsp();
  }
  if (this != &APStatsMsgRsp_default_instance_.get()) {
    delete errstatus_;
  }
}

void APStatsMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APStatsMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APStatsMsgRsp_descriptor_;
}

const APStatsMsgRsp& APStatsMsgRsp::default_instance() {
  protobuf_InitDefaults_ap_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<APStatsMsgRsp> APStatsMsgRsp_default_instance_;

APStatsMsgRsp* APStatsMsgRsp::New(::google::protobuf::Arena* arena) const {
  APStatsMsgRsp* n = new APStatsMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APStatsMsgRsp::clear_msg_rsp() {
// @@protoc_insertion_point(one_of_clear_start:cheetah.APStatsMsgRsp)
  switch (msg_rsp_case()) {
    case kSystemStats: {
      delete msg_rsp_.systemstats_;
      break;
    }
    case kMemoryStats: {
      delete msg_rsp_.memorystats_;
      break;
    }
    case kInterfaceStats: {
      delete msg_rsp_.interfacestats_;
      break;
    }
    case kRoutingStats: {
      delete msg_rsp_.routingstats_;
      break;
    }
    case kDNSStats: {
      delete msg_rsp_.dnsstats_;
      break;
    }
    case kRadioStats: {
      delete msg_rsp_.radiostats_;
      break;
    }
    case kWLANStats: {
      delete msg_rsp_.wlanstats_;
      break;
    }
    case kClientStats: {
      delete msg_rsp_.clientstats_;
      break;
    }
    case MSG_RSP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_RSP_NOT_SET;
}


void APStatsMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:cheetah.APStatsMsgRsp)
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
  clear_msg_rsp();
}

bool APStatsMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cheetah.APStatsMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cheetah.APErrorStatus ErrStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SystemStats;
        break;
      }

      // optional .cheetah.APSystemStatsMsgRsp SystemStats = 2;
      case 2: {
        if (tag == 18) {
         parse_SystemStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemstats()));
        } else {
          goto handle_unusual;
        }
        goto after_clientstats;
        break;
      }

      // optional .cheetah.APMemoryStatsMsgRsp MemoryStats = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memorystats()));
        } else {
          goto handle_unusual;
        }
        goto after_clientstats;
        break;
      }

      // optional .cheetah.APInterfaceStatsMsgRsp InterfaceStats = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interfacestats()));
        } else {
          goto handle_unusual;
        }
        goto after_clientstats;
        break;
      }

      // optional .cheetah.APRoutingStatsMsgRsp RoutingStats = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routingstats()));
        } else {
          goto handle_unusual;
        }
        goto after_clientstats;
        break;
      }

      // optional .cheetah.APDNSStatsMsgRsp DNSStats = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dnsstats()));
        } else {
          goto handle_unusual;
        }
        goto after_clientstats;
        break;
      }

      // optional .cheetah.APRadioStatsMsgRsp RadioStats = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radiostats()));
        } else {
          goto handle_unusual;
        }
        goto after_clientstats;
        break;
      }

      // optional .cheetah.APWLANStatsMsgRsp WLANStats = 8;
      case 8: {
        if (tag == 66) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wlanstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ClientStats;
        break;
      }

      // optional .cheetah.APClientStatsMsgRsp ClientStats = 9;
      case 9: {
        if (tag == 74) {
         parse_ClientStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientstats()));
        } else {
          goto handle_unusual;
        }
       after_clientstats:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cheetah.APStatsMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cheetah.APStatsMsgRsp)
  return false;
#undef DO_
}

void APStatsMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cheetah.APStatsMsgRsp)
  // optional .cheetah.APErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->errstatus_, output);
  }

  // optional .cheetah.APSystemStatsMsgRsp SystemStats = 2;
  if (has_systemstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_rsp_.systemstats_, output);
  }

  // optional .cheetah.APMemoryStatsMsgRsp MemoryStats = 3;
  if (has_memorystats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_rsp_.memorystats_, output);
  }

  // optional .cheetah.APInterfaceStatsMsgRsp InterfaceStats = 4;
  if (has_interfacestats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_rsp_.interfacestats_, output);
  }

  // optional .cheetah.APRoutingStatsMsgRsp RoutingStats = 5;
  if (has_routingstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *msg_rsp_.routingstats_, output);
  }

  // optional .cheetah.APDNSStatsMsgRsp DNSStats = 6;
  if (has_dnsstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *msg_rsp_.dnsstats_, output);
  }

  // optional .cheetah.APRadioStatsMsgRsp RadioStats = 7;
  if (has_radiostats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *msg_rsp_.radiostats_, output);
  }

  // optional .cheetah.APWLANStatsMsgRsp WLANStats = 8;
  if (has_wlanstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *msg_rsp_.wlanstats_, output);
  }

  // optional .cheetah.APClientStatsMsgRsp ClientStats = 9;
  if (has_clientstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *msg_rsp_.clientstats_, output);
  }

  // @@protoc_insertion_point(serialize_end:cheetah.APStatsMsgRsp)
}

::google::protobuf::uint8* APStatsMsgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cheetah.APStatsMsgRsp)
  // optional .cheetah.APErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->errstatus_, false, target);
  }

  // optional .cheetah.APSystemStatsMsgRsp SystemStats = 2;
  if (has_systemstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_rsp_.systemstats_, false, target);
  }

  // optional .cheetah.APMemoryStatsMsgRsp MemoryStats = 3;
  if (has_memorystats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *msg_rsp_.memorystats_, false, target);
  }

  // optional .cheetah.APInterfaceStatsMsgRsp InterfaceStats = 4;
  if (has_interfacestats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *msg_rsp_.interfacestats_, false, target);
  }

  // optional .cheetah.APRoutingStatsMsgRsp RoutingStats = 5;
  if (has_routingstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *msg_rsp_.routingstats_, false, target);
  }

  // optional .cheetah.APDNSStatsMsgRsp DNSStats = 6;
  if (has_dnsstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *msg_rsp_.dnsstats_, false, target);
  }

  // optional .cheetah.APRadioStatsMsgRsp RadioStats = 7;
  if (has_radiostats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *msg_rsp_.radiostats_, false, target);
  }

  // optional .cheetah.APWLANStatsMsgRsp WLANStats = 8;
  if (has_wlanstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *msg_rsp_.wlanstats_, false, target);
  }

  // optional .cheetah.APClientStatsMsgRsp ClientStats = 9;
  if (has_clientstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *msg_rsp_.clientstats_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cheetah.APStatsMsgRsp)
  return target;
}

size_t APStatsMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cheetah.APStatsMsgRsp)
  size_t total_size = 0;

  // optional .cheetah.APErrorStatus ErrStatus = 1;
  if (this->has_errstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errstatus_);
  }

  switch (msg_rsp_case()) {
    // optional .cheetah.APSystemStatsMsgRsp SystemStats = 2;
    case kSystemStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_rsp_.systemstats_);
      break;
    }
    // optional .cheetah.APMemoryStatsMsgRsp MemoryStats = 3;
    case kMemoryStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_rsp_.memorystats_);
      break;
    }
    // optional .cheetah.APInterfaceStatsMsgRsp InterfaceStats = 4;
    case kInterfaceStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_rsp_.interfacestats_);
      break;
    }
    // optional .cheetah.APRoutingStatsMsgRsp RoutingStats = 5;
    case kRoutingStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_rsp_.routingstats_);
      break;
    }
    // optional .cheetah.APDNSStatsMsgRsp DNSStats = 6;
    case kDNSStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_rsp_.dnsstats_);
      break;
    }
    // optional .cheetah.APRadioStatsMsgRsp RadioStats = 7;
    case kRadioStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_rsp_.radiostats_);
      break;
    }
    // optional .cheetah.APWLANStatsMsgRsp WLANStats = 8;
    case kWLANStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_rsp_.wlanstats_);
      break;
    }
    // optional .cheetah.APClientStatsMsgRsp ClientStats = 9;
    case kClientStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_rsp_.clientstats_);
      break;
    }
    case MSG_RSP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APStatsMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cheetah.APStatsMsgRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const APStatsMsgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const APStatsMsgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cheetah.APStatsMsgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cheetah.APStatsMsgRsp)
    UnsafeMergeFrom(*source);
  }
}

void APStatsMsgRsp::MergeFrom(const APStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cheetah.APStatsMsgRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void APStatsMsgRsp::UnsafeMergeFrom(const APStatsMsgRsp& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.msg_rsp_case()) {
    case kSystemStats: {
      mutable_systemstats()->::cheetah::APSystemStatsMsgRsp::MergeFrom(from.systemstats());
      break;
    }
    case kMemoryStats: {
      mutable_memorystats()->::cheetah::APMemoryStatsMsgRsp::MergeFrom(from.memorystats());
      break;
    }
    case kInterfaceStats: {
      mutable_interfacestats()->::cheetah::APInterfaceStatsMsgRsp::MergeFrom(from.interfacestats());
      break;
    }
    case kRoutingStats: {
      mutable_routingstats()->::cheetah::APRoutingStatsMsgRsp::MergeFrom(from.routingstats());
      break;
    }
    case kDNSStats: {
      mutable_dnsstats()->::cheetah::APDNSStatsMsgRsp::MergeFrom(from.dnsstats());
      break;
    }
    case kRadioStats: {
      mutable_radiostats()->::cheetah::APRadioStatsMsgRsp::MergeFrom(from.radiostats());
      break;
    }
    case kWLANStats: {
      mutable_wlanstats()->::cheetah::APWLANStatsMsgRsp::MergeFrom(from.wlanstats());
      break;
    }
    case kClientStats: {
      mutable_clientstats()->::cheetah::APClientStatsMsgRsp::MergeFrom(from.clientstats());
      break;
    }
    case MSG_RSP_NOT_SET: {
      break;
    }
  }
  if (from.has_errstatus()) {
    mutable_errstatus()->::cheetah::APErrorStatus::MergeFrom(from.errstatus());
  }
}

void APStatsMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cheetah.APStatsMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APStatsMsgRsp::CopyFrom(const APStatsMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cheetah.APStatsMsgRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool APStatsMsgRsp::IsInitialized() const {

  return true;
}

void APStatsMsgRsp::Swap(APStatsMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APStatsMsgRsp::InternalSwap(APStatsMsgRsp* other) {
  std::swap(errstatus_, other->errstatus_);
  std::swap(msg_rsp_, other->msg_rsp_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APStatsMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APStatsMsgRsp_descriptor_;
  metadata.reflection = APStatsMsgRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APStatsMsgRsp

// optional .cheetah.APErrorStatus ErrStatus = 1;
bool APStatsMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
void APStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
const ::cheetah::APErrorStatus& APStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::cheetah::APErrorStatus::internal_default_instance();
}
::cheetah::APErrorStatus* APStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::cheetah::APErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsgRsp.ErrStatus)
  return errstatus_;
}
::cheetah::APErrorStatus* APStatsMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:cheetah.APStatsMsgRsp.ErrStatus)
  
  ::cheetah::APErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
void APStatsMsgRsp::set_allocated_errstatus(::cheetah::APErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APStatsMsgRsp.ErrStatus)
}

// optional .cheetah.APSystemStatsMsgRsp SystemStats = 2;
bool APStatsMsgRsp::has_systemstats() const {
  return msg_rsp_case() == kSystemStats;
}
void APStatsMsgRsp::set_has_systemstats() {
  _oneof_case_[0] = kSystemStats;
}
void APStatsMsgRsp::clear_systemstats() {
  if (has_systemstats()) {
    delete msg_rsp_.systemstats_;
    clear_has_msg_rsp();
  }
}
 const ::cheetah::APSystemStatsMsgRsp& APStatsMsgRsp::systemstats() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsgRsp.SystemStats)
  return has_systemstats()
      ? *msg_rsp_.systemstats_
      : ::cheetah::APSystemStatsMsgRsp::default_instance();
}
::cheetah::APSystemStatsMsgRsp* APStatsMsgRsp::mutable_systemstats() {
  if (!has_systemstats()) {
    clear_msg_rsp();
    set_has_systemstats();
    msg_rsp_.systemstats_ = new ::cheetah::APSystemStatsMsgRsp;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsgRsp.SystemStats)
  return msg_rsp_.systemstats_;
}
::cheetah::APSystemStatsMsgRsp* APStatsMsgRsp::release_systemstats() {
  // @@protoc_insertion_point(field_release:cheetah.APStatsMsgRsp.SystemStats)
  if (has_systemstats()) {
    clear_has_msg_rsp();
    ::cheetah::APSystemStatsMsgRsp* temp = msg_rsp_.systemstats_;
    msg_rsp_.systemstats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void APStatsMsgRsp::set_allocated_systemstats(::cheetah::APSystemStatsMsgRsp* systemstats) {
  clear_msg_rsp();
  if (systemstats) {
    set_has_systemstats();
    msg_rsp_.systemstats_ = systemstats;
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APStatsMsgRsp.SystemStats)
}

// optional .cheetah.APMemoryStatsMsgRsp MemoryStats = 3;
bool APStatsMsgRsp::has_memorystats() const {
  return msg_rsp_case() == kMemoryStats;
}
void APStatsMsgRsp::set_has_memorystats() {
  _oneof_case_[0] = kMemoryStats;
}
void APStatsMsgRsp::clear_memorystats() {
  if (has_memorystats()) {
    delete msg_rsp_.memorystats_;
    clear_has_msg_rsp();
  }
}
 const ::cheetah::APMemoryStatsMsgRsp& APStatsMsgRsp::memorystats() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsgRsp.MemoryStats)
  return has_memorystats()
      ? *msg_rsp_.memorystats_
      : ::cheetah::APMemoryStatsMsgRsp::default_instance();
}
::cheetah::APMemoryStatsMsgRsp* APStatsMsgRsp::mutable_memorystats() {
  if (!has_memorystats()) {
    clear_msg_rsp();
    set_has_memorystats();
    msg_rsp_.memorystats_ = new ::cheetah::APMemoryStatsMsgRsp;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsgRsp.MemoryStats)
  return msg_rsp_.memorystats_;
}
::cheetah::APMemoryStatsMsgRsp* APStatsMsgRsp::release_memorystats() {
  // @@protoc_insertion_point(field_release:cheetah.APStatsMsgRsp.MemoryStats)
  if (has_memorystats()) {
    clear_has_msg_rsp();
    ::cheetah::APMemoryStatsMsgRsp* temp = msg_rsp_.memorystats_;
    msg_rsp_.memorystats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void APStatsMsgRsp::set_allocated_memorystats(::cheetah::APMemoryStatsMsgRsp* memorystats) {
  clear_msg_rsp();
  if (memorystats) {
    set_has_memorystats();
    msg_rsp_.memorystats_ = memorystats;
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APStatsMsgRsp.MemoryStats)
}

// optional .cheetah.APInterfaceStatsMsgRsp InterfaceStats = 4;
bool APStatsMsgRsp::has_interfacestats() const {
  return msg_rsp_case() == kInterfaceStats;
}
void APStatsMsgRsp::set_has_interfacestats() {
  _oneof_case_[0] = kInterfaceStats;
}
void APStatsMsgRsp::clear_interfacestats() {
  if (has_interfacestats()) {
    delete msg_rsp_.interfacestats_;
    clear_has_msg_rsp();
  }
}
 const ::cheetah::APInterfaceStatsMsgRsp& APStatsMsgRsp::interfacestats() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsgRsp.InterfaceStats)
  return has_interfacestats()
      ? *msg_rsp_.interfacestats_
      : ::cheetah::APInterfaceStatsMsgRsp::default_instance();
}
::cheetah::APInterfaceStatsMsgRsp* APStatsMsgRsp::mutable_interfacestats() {
  if (!has_interfacestats()) {
    clear_msg_rsp();
    set_has_interfacestats();
    msg_rsp_.interfacestats_ = new ::cheetah::APInterfaceStatsMsgRsp;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsgRsp.InterfaceStats)
  return msg_rsp_.interfacestats_;
}
::cheetah::APInterfaceStatsMsgRsp* APStatsMsgRsp::release_interfacestats() {
  // @@protoc_insertion_point(field_release:cheetah.APStatsMsgRsp.InterfaceStats)
  if (has_interfacestats()) {
    clear_has_msg_rsp();
    ::cheetah::APInterfaceStatsMsgRsp* temp = msg_rsp_.interfacestats_;
    msg_rsp_.interfacestats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void APStatsMsgRsp::set_allocated_interfacestats(::cheetah::APInterfaceStatsMsgRsp* interfacestats) {
  clear_msg_rsp();
  if (interfacestats) {
    set_has_interfacestats();
    msg_rsp_.interfacestats_ = interfacestats;
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APStatsMsgRsp.InterfaceStats)
}

// optional .cheetah.APRoutingStatsMsgRsp RoutingStats = 5;
bool APStatsMsgRsp::has_routingstats() const {
  return msg_rsp_case() == kRoutingStats;
}
void APStatsMsgRsp::set_has_routingstats() {
  _oneof_case_[0] = kRoutingStats;
}
void APStatsMsgRsp::clear_routingstats() {
  if (has_routingstats()) {
    delete msg_rsp_.routingstats_;
    clear_has_msg_rsp();
  }
}
 const ::cheetah::APRoutingStatsMsgRsp& APStatsMsgRsp::routingstats() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsgRsp.RoutingStats)
  return has_routingstats()
      ? *msg_rsp_.routingstats_
      : ::cheetah::APRoutingStatsMsgRsp::default_instance();
}
::cheetah::APRoutingStatsMsgRsp* APStatsMsgRsp::mutable_routingstats() {
  if (!has_routingstats()) {
    clear_msg_rsp();
    set_has_routingstats();
    msg_rsp_.routingstats_ = new ::cheetah::APRoutingStatsMsgRsp;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsgRsp.RoutingStats)
  return msg_rsp_.routingstats_;
}
::cheetah::APRoutingStatsMsgRsp* APStatsMsgRsp::release_routingstats() {
  // @@protoc_insertion_point(field_release:cheetah.APStatsMsgRsp.RoutingStats)
  if (has_routingstats()) {
    clear_has_msg_rsp();
    ::cheetah::APRoutingStatsMsgRsp* temp = msg_rsp_.routingstats_;
    msg_rsp_.routingstats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void APStatsMsgRsp::set_allocated_routingstats(::cheetah::APRoutingStatsMsgRsp* routingstats) {
  clear_msg_rsp();
  if (routingstats) {
    set_has_routingstats();
    msg_rsp_.routingstats_ = routingstats;
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APStatsMsgRsp.RoutingStats)
}

// optional .cheetah.APDNSStatsMsgRsp DNSStats = 6;
bool APStatsMsgRsp::has_dnsstats() const {
  return msg_rsp_case() == kDNSStats;
}
void APStatsMsgRsp::set_has_dnsstats() {
  _oneof_case_[0] = kDNSStats;
}
void APStatsMsgRsp::clear_dnsstats() {
  if (has_dnsstats()) {
    delete msg_rsp_.dnsstats_;
    clear_has_msg_rsp();
  }
}
 const ::cheetah::APDNSStatsMsgRsp& APStatsMsgRsp::dnsstats() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsgRsp.DNSStats)
  return has_dnsstats()
      ? *msg_rsp_.dnsstats_
      : ::cheetah::APDNSStatsMsgRsp::default_instance();
}
::cheetah::APDNSStatsMsgRsp* APStatsMsgRsp::mutable_dnsstats() {
  if (!has_dnsstats()) {
    clear_msg_rsp();
    set_has_dnsstats();
    msg_rsp_.dnsstats_ = new ::cheetah::APDNSStatsMsgRsp;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsgRsp.DNSStats)
  return msg_rsp_.dnsstats_;
}
::cheetah::APDNSStatsMsgRsp* APStatsMsgRsp::release_dnsstats() {
  // @@protoc_insertion_point(field_release:cheetah.APStatsMsgRsp.DNSStats)
  if (has_dnsstats()) {
    clear_has_msg_rsp();
    ::cheetah::APDNSStatsMsgRsp* temp = msg_rsp_.dnsstats_;
    msg_rsp_.dnsstats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void APStatsMsgRsp::set_allocated_dnsstats(::cheetah::APDNSStatsMsgRsp* dnsstats) {
  clear_msg_rsp();
  if (dnsstats) {
    set_has_dnsstats();
    msg_rsp_.dnsstats_ = dnsstats;
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APStatsMsgRsp.DNSStats)
}

// optional .cheetah.APRadioStatsMsgRsp RadioStats = 7;
bool APStatsMsgRsp::has_radiostats() const {
  return msg_rsp_case() == kRadioStats;
}
void APStatsMsgRsp::set_has_radiostats() {
  _oneof_case_[0] = kRadioStats;
}
void APStatsMsgRsp::clear_radiostats() {
  if (has_radiostats()) {
    delete msg_rsp_.radiostats_;
    clear_has_msg_rsp();
  }
}
 const ::cheetah::APRadioStatsMsgRsp& APStatsMsgRsp::radiostats() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsgRsp.RadioStats)
  return has_radiostats()
      ? *msg_rsp_.radiostats_
      : ::cheetah::APRadioStatsMsgRsp::default_instance();
}
::cheetah::APRadioStatsMsgRsp* APStatsMsgRsp::mutable_radiostats() {
  if (!has_radiostats()) {
    clear_msg_rsp();
    set_has_radiostats();
    msg_rsp_.radiostats_ = new ::cheetah::APRadioStatsMsgRsp;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsgRsp.RadioStats)
  return msg_rsp_.radiostats_;
}
::cheetah::APRadioStatsMsgRsp* APStatsMsgRsp::release_radiostats() {
  // @@protoc_insertion_point(field_release:cheetah.APStatsMsgRsp.RadioStats)
  if (has_radiostats()) {
    clear_has_msg_rsp();
    ::cheetah::APRadioStatsMsgRsp* temp = msg_rsp_.radiostats_;
    msg_rsp_.radiostats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void APStatsMsgRsp::set_allocated_radiostats(::cheetah::APRadioStatsMsgRsp* radiostats) {
  clear_msg_rsp();
  if (radiostats) {
    set_has_radiostats();
    msg_rsp_.radiostats_ = radiostats;
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APStatsMsgRsp.RadioStats)
}

// optional .cheetah.APWLANStatsMsgRsp WLANStats = 8;
bool APStatsMsgRsp::has_wlanstats() const {
  return msg_rsp_case() == kWLANStats;
}
void APStatsMsgRsp::set_has_wlanstats() {
  _oneof_case_[0] = kWLANStats;
}
void APStatsMsgRsp::clear_wlanstats() {
  if (has_wlanstats()) {
    delete msg_rsp_.wlanstats_;
    clear_has_msg_rsp();
  }
}
 const ::cheetah::APWLANStatsMsgRsp& APStatsMsgRsp::wlanstats() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsgRsp.WLANStats)
  return has_wlanstats()
      ? *msg_rsp_.wlanstats_
      : ::cheetah::APWLANStatsMsgRsp::default_instance();
}
::cheetah::APWLANStatsMsgRsp* APStatsMsgRsp::mutable_wlanstats() {
  if (!has_wlanstats()) {
    clear_msg_rsp();
    set_has_wlanstats();
    msg_rsp_.wlanstats_ = new ::cheetah::APWLANStatsMsgRsp;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsgRsp.WLANStats)
  return msg_rsp_.wlanstats_;
}
::cheetah::APWLANStatsMsgRsp* APStatsMsgRsp::release_wlanstats() {
  // @@protoc_insertion_point(field_release:cheetah.APStatsMsgRsp.WLANStats)
  if (has_wlanstats()) {
    clear_has_msg_rsp();
    ::cheetah::APWLANStatsMsgRsp* temp = msg_rsp_.wlanstats_;
    msg_rsp_.wlanstats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void APStatsMsgRsp::set_allocated_wlanstats(::cheetah::APWLANStatsMsgRsp* wlanstats) {
  clear_msg_rsp();
  if (wlanstats) {
    set_has_wlanstats();
    msg_rsp_.wlanstats_ = wlanstats;
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APStatsMsgRsp.WLANStats)
}

// optional .cheetah.APClientStatsMsgRsp ClientStats = 9;
bool APStatsMsgRsp::has_clientstats() const {
  return msg_rsp_case() == kClientStats;
}
void APStatsMsgRsp::set_has_clientstats() {
  _oneof_case_[0] = kClientStats;
}
void APStatsMsgRsp::clear_clientstats() {
  if (has_clientstats()) {
    delete msg_rsp_.clientstats_;
    clear_has_msg_rsp();
  }
}
 const ::cheetah::APClientStatsMsgRsp& APStatsMsgRsp::clientstats() const {
  // @@protoc_insertion_point(field_get:cheetah.APStatsMsgRsp.ClientStats)
  return has_clientstats()
      ? *msg_rsp_.clientstats_
      : ::cheetah::APClientStatsMsgRsp::default_instance();
}
::cheetah::APClientStatsMsgRsp* APStatsMsgRsp::mutable_clientstats() {
  if (!has_clientstats()) {
    clear_msg_rsp();
    set_has_clientstats();
    msg_rsp_.clientstats_ = new ::cheetah::APClientStatsMsgRsp;
  }
  // @@protoc_insertion_point(field_mutable:cheetah.APStatsMsgRsp.ClientStats)
  return msg_rsp_.clientstats_;
}
::cheetah::APClientStatsMsgRsp* APStatsMsgRsp::release_clientstats() {
  // @@protoc_insertion_point(field_release:cheetah.APStatsMsgRsp.ClientStats)
  if (has_clientstats()) {
    clear_has_msg_rsp();
    ::cheetah::APClientStatsMsgRsp* temp = msg_rsp_.clientstats_;
    msg_rsp_.clientstats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void APStatsMsgRsp::set_allocated_clientstats(::cheetah::APClientStatsMsgRsp* clientstats) {
  clear_msg_rsp();
  if (clientstats) {
    set_has_clientstats();
    msg_rsp_.clientstats_ = clientstats;
  }
  // @@protoc_insertion_point(field_set_allocated:cheetah.APStatsMsgRsp.ClientStats)
}

bool APStatsMsgRsp::has_msg_rsp() const {
  return msg_rsp_case() != MSG_RSP_NOT_SET;
}
void APStatsMsgRsp::clear_has_msg_rsp() {
  _oneof_case_[0] = MSG_RSP_NOT_SET;
}
APStatsMsgRsp::MsgRspCase APStatsMsgRsp::msg_rsp_case() const {
  return APStatsMsgRsp::MsgRspCase(_oneof_case_[0]);
}
inline const APStatsMsgRsp* APStatsMsgRsp::internal_default_instance() {
  return &APStatsMsgRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cheetah

// @@protoc_insertion_point(global_scope)
