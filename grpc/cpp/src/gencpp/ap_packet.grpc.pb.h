// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: ap_packet.proto
// Original file comments:
// @file
// @brief Packet I/O proto file
//
// ----------------------------------------------------------------
//  Copyright (c) 2017 by Cisco Systems, Inc.
//  All rights reserved.
// -----------------------------------------------------------------
//
//
//
#ifndef GRPC_ap_5fpacket_2eproto__INCLUDED
#define GRPC_ap_5fpacket_2eproto__INCLUDED

#include "ap_packet.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace cheetah {

// @defgroup APPackets
// @ingroup System
// The following RPCs are used to register for packets that the
// client is interested in receiving
// @{
class APPackets GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Registration RPC for packet types to be pushed
    std::unique_ptr< ::grpc::ClientReaderInterface< ::cheetah::APPacketsMsgRsp>> APPacketsGet(::grpc::ClientContext* context, const ::cheetah::APPacketsMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::cheetah::APPacketsMsgRsp>>(APPacketsGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cheetah::APPacketsMsgRsp>> AsyncAPPacketsGet(::grpc::ClientContext* context, const ::cheetah::APPacketsMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cheetah::APPacketsMsgRsp>>(AsyncAPPacketsGetRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::cheetah::APPacketsMsgRsp>* APPacketsGetRaw(::grpc::ClientContext* context, const ::cheetah::APPacketsMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cheetah::APPacketsMsgRsp>* AsyncAPPacketsGetRaw(::grpc::ClientContext* context, const ::cheetah::APPacketsMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::cheetah::APPacketsMsgRsp>> APPacketsGet(::grpc::ClientContext* context, const ::cheetah::APPacketsMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::cheetah::APPacketsMsgRsp>>(APPacketsGetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cheetah::APPacketsMsgRsp>> AsyncAPPacketsGet(::grpc::ClientContext* context, const ::cheetah::APPacketsMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cheetah::APPacketsMsgRsp>>(AsyncAPPacketsGetRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::cheetah::APPacketsMsgRsp>* APPacketsGetRaw(::grpc::ClientContext* context, const ::cheetah::APPacketsMsg& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::cheetah::APPacketsMsgRsp>* AsyncAPPacketsGetRaw(::grpc::ClientContext* context, const ::cheetah::APPacketsMsg& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_APPacketsGet_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Registration RPC for packet types to be pushed
    virtual ::grpc::Status APPacketsGet(::grpc::ServerContext* context, const ::cheetah::APPacketsMsg* request, ::grpc::ServerWriter< ::cheetah::APPacketsMsgRsp>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_APPacketsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_APPacketsGet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_APPacketsGet() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status APPacketsGet(::grpc::ServerContext* context, const ::cheetah::APPacketsMsg* request, ::grpc::ServerWriter< ::cheetah::APPacketsMsgRsp>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAPPacketsGet(::grpc::ServerContext* context, ::cheetah::APPacketsMsg* request, ::grpc::ServerAsyncWriter< ::cheetah::APPacketsMsgRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_APPacketsGet<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_APPacketsGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_APPacketsGet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_APPacketsGet() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status APPacketsGet(::grpc::ServerContext* context, const ::cheetah::APPacketsMsg* request, ::grpc::ServerWriter< ::cheetah::APPacketsMsgRsp>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace cheetah


#endif  // GRPC_ap_5fpacket_2eproto__INCLUDED
