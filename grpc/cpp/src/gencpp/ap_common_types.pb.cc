// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_common_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ap_common_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace access_point {

namespace {

const ::google::protobuf::Descriptor* APErrorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APErrorStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* APErrorStatus_APErrno_descriptor_ = NULL;
const ::google::protobuf::Descriptor* APRadio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APRadio_reflection_ = NULL;
struct APRadioOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 handle_;
}* APRadio_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* APSsid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APSsid_reflection_ = NULL;
struct APSsidOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 handle_;
}* APSsid_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* APRegOp_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* APObjectOp_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* APNotifOp_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ap_5fcommon_5ftypes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ap_5fcommon_5ftypes_2eproto() {
  protobuf_AddDesc_ap_5fcommon_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ap_common_types.proto");
  GOOGLE_CHECK(file != NULL);
  APErrorStatus_descriptor_ = file->message_type(0);
  static const int APErrorStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APErrorStatus, status_),
  };
  APErrorStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APErrorStatus_descriptor_,
      APErrorStatus::default_instance_,
      APErrorStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(APErrorStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APErrorStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APErrorStatus, _is_default_instance_));
  APErrorStatus_APErrno_descriptor_ = APErrorStatus_descriptor_->enum_type(0);
  APRadio_descriptor_ = file->message_type(1);
  static const int APRadio_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APRadio_default_oneof_instance_, name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APRadio_default_oneof_instance_, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APRadio, Radio_),
  };
  APRadio_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APRadio_descriptor_,
      APRadio::default_instance_,
      APRadio_offsets_,
      -1,
      -1,
      -1,
      APRadio_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APRadio, _oneof_case_[0]),
      sizeof(APRadio),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APRadio, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APRadio, _is_default_instance_));
  APSsid_descriptor_ = file->message_type(2);
  static const int APSsid_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APSsid_default_oneof_instance_, name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(APSsid_default_oneof_instance_, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSsid, Ssid_),
  };
  APSsid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      APSsid_descriptor_,
      APSsid::default_instance_,
      APSsid_offsets_,
      -1,
      -1,
      -1,
      APSsid_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSsid, _oneof_case_[0]),
      sizeof(APSsid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSsid, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APSsid, _is_default_instance_));
  APRegOp_descriptor_ = file->enum_type(0);
  APObjectOp_descriptor_ = file->enum_type(1);
  APNotifOp_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ap_5fcommon_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APErrorStatus_descriptor_, &APErrorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APRadio_descriptor_, &APRadio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      APSsid_descriptor_, &APSsid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ap_5fcommon_5ftypes_2eproto() {
  delete APErrorStatus::default_instance_;
  delete APErrorStatus_reflection_;
  delete APRadio::default_instance_;
  delete APRadio_default_oneof_instance_;
  delete APRadio_reflection_;
  delete APSsid::default_instance_;
  delete APSsid_default_oneof_instance_;
  delete APSsid_reflection_;
}

void protobuf_AddDesc_ap_5fcommon_5ftypes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ap_5fcommon_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ap_common_types.proto\022\014access_point\"\372\003"
    "\n\rAPErrorStatus\0223\n\006Status\030\001 \001(\0162#.access"
    "_point.APErrorStatus.APErrno\"\263\003\n\007APErrno"
    "\022\016\n\nAP_SUCCESS\020\000\022\024\n\020AP_NOT_CONNECTED\020\001\022\r"
    "\n\tAP_EAGAIN\020\002\022\r\n\tAP_ENOMEM\020\003\022\014\n\010AP_EBUSY"
    "\020\004\022\r\n\tAP_EINVAL\020\005\022\026\n\022AP_UNSUPPORTED_VER\020"
    "\006\022\024\n\020AP_NOT_AVAILABLE\020\007\022\033\n\027AP_STREAM_NOT"
    "_SUPPORTED\020\010\022\016\n\nAP_ENOTSUP\020\t\022\017\n\013AP_SOME_"
    "ERR\020\n\022\016\n\nAP_TIMEOUT\020\013\022\021\n\rAP_NOTIF_TERM\020\014"
    "\022\031\n\024AP_INIT_START_OFFSET\020\200\n\022\030\n\023AP_INIT_S"
    "TATE_CLEAR\020\201\n\022\030\n\023AP_INIT_STATE_READY\020\202\n\022"
    "\034\n\027AP_INIT_UNSUPPORTED_VER\020\203\n\022#\n\036AP_INIT"
    "_SERVER_NOT_INITIALIZED\020\204\n\022&\n!AP_INIT_SE"
    "RVER_MODE_CHANGE_FAILED\020\205\n\"4\n\007APRadio\022\016\n"
    "\004Name\030\001 \001(\tH\000\022\020\n\006Handle\030\002 \001(\rH\000B\007\n\005Radio"
    "\"2\n\006APSsid\022\016\n\004Name\030\001 \001(\tH\000\022\020\n\006Handle\030\002 \001"
    "(\rH\000B\006\n\004Ssid*b\n\007APRegOp\022\025\n\021AP_REGOP_RESE"
    "RVED\020\000\022\025\n\021AP_REGOP_REGISTER\020\001\022\027\n\023AP_REGO"
    "P_UNREGISTER\020\002\022\020\n\014AP_REGOP_EOF\020\003*_\n\nAPOb"
    "jectOp\022\025\n\021AP_OBJOP_RESERVED\020\000\022\020\n\014AP_OBJO"
    "P_ADD\020\001\022\023\n\017AP_OBJOP_UPDATE\020\002\022\023\n\017AP_OBJOP"
    "_DELETE\020\003*S\n\tAPNotifOp\022\027\n\023AP_NOTIFOP_RES"
    "ERVED\020\000\022\025\n\021AP_NOTIFOP_ENABLE\020\001\022\026\n\022AP_NOT"
    "IFOP_DISABLE\020\002b\006proto3", 942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ap_common_types.proto", &protobuf_RegisterTypes);
  APErrorStatus::default_instance_ = new APErrorStatus();
  APRadio::default_instance_ = new APRadio();
  APRadio_default_oneof_instance_ = new APRadioOneofInstance();
  APSsid::default_instance_ = new APSsid();
  APSsid_default_oneof_instance_ = new APSsidOneofInstance();
  APErrorStatus::default_instance_->InitAsDefaultInstance();
  APRadio::default_instance_->InitAsDefaultInstance();
  APSsid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ap_5fcommon_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ap_5fcommon_5ftypes_2eproto {
  StaticDescriptorInitializer_ap_5fcommon_5ftypes_2eproto() {
    protobuf_AddDesc_ap_5fcommon_5ftypes_2eproto();
  }
} static_descriptor_initializer_ap_5fcommon_5ftypes_2eproto_;
const ::google::protobuf::EnumDescriptor* APRegOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APRegOp_descriptor_;
}
bool APRegOp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* APObjectOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APObjectOp_descriptor_;
}
bool APObjectOp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* APNotifOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APNotifOp_descriptor_;
}
bool APNotifOp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* APErrorStatus_APErrno_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APErrorStatus_APErrno_descriptor_;
}
bool APErrorStatus_APErrno_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 1280:
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const APErrorStatus_APErrno APErrorStatus::AP_SUCCESS;
const APErrorStatus_APErrno APErrorStatus::AP_NOT_CONNECTED;
const APErrorStatus_APErrno APErrorStatus::AP_EAGAIN;
const APErrorStatus_APErrno APErrorStatus::AP_ENOMEM;
const APErrorStatus_APErrno APErrorStatus::AP_EBUSY;
const APErrorStatus_APErrno APErrorStatus::AP_EINVAL;
const APErrorStatus_APErrno APErrorStatus::AP_UNSUPPORTED_VER;
const APErrorStatus_APErrno APErrorStatus::AP_NOT_AVAILABLE;
const APErrorStatus_APErrno APErrorStatus::AP_STREAM_NOT_SUPPORTED;
const APErrorStatus_APErrno APErrorStatus::AP_ENOTSUP;
const APErrorStatus_APErrno APErrorStatus::AP_SOME_ERR;
const APErrorStatus_APErrno APErrorStatus::AP_TIMEOUT;
const APErrorStatus_APErrno APErrorStatus::AP_NOTIF_TERM;
const APErrorStatus_APErrno APErrorStatus::AP_INIT_START_OFFSET;
const APErrorStatus_APErrno APErrorStatus::AP_INIT_STATE_CLEAR;
const APErrorStatus_APErrno APErrorStatus::AP_INIT_STATE_READY;
const APErrorStatus_APErrno APErrorStatus::AP_INIT_UNSUPPORTED_VER;
const APErrorStatus_APErrno APErrorStatus::AP_INIT_SERVER_NOT_INITIALIZED;
const APErrorStatus_APErrno APErrorStatus::AP_INIT_SERVER_MODE_CHANGE_FAILED;
const APErrorStatus_APErrno APErrorStatus::APErrno_MIN;
const APErrorStatus_APErrno APErrorStatus::APErrno_MAX;
const int APErrorStatus::APErrno_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APErrorStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APErrorStatus::APErrorStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:access_point.APErrorStatus)
}

void APErrorStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

APErrorStatus::APErrorStatus(const APErrorStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:access_point.APErrorStatus)
}

void APErrorStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

APErrorStatus::~APErrorStatus() {
  // @@protoc_insertion_point(destructor:access_point.APErrorStatus)
  SharedDtor();
}

void APErrorStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void APErrorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APErrorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APErrorStatus_descriptor_;
}

const APErrorStatus& APErrorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ap_5fcommon_5ftypes_2eproto();
  return *default_instance_;
}

APErrorStatus* APErrorStatus::default_instance_ = NULL;

APErrorStatus* APErrorStatus::New(::google::protobuf::Arena* arena) const {
  APErrorStatus* n = new APErrorStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APErrorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:access_point.APErrorStatus)
  status_ = 0;
}

bool APErrorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:access_point.APErrorStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .access_point.APErrorStatus.APErrno Status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::access_point::APErrorStatus_APErrno >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:access_point.APErrorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:access_point.APErrorStatus)
  return false;
#undef DO_
}

void APErrorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:access_point.APErrorStatus)
  // optional .access_point.APErrorStatus.APErrno Status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:access_point.APErrorStatus)
}

::google::protobuf::uint8* APErrorStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:access_point.APErrorStatus)
  // optional .access_point.APErrorStatus.APErrno Status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:access_point.APErrorStatus)
  return target;
}

int APErrorStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:access_point.APErrorStatus)
  int total_size = 0;

  // optional .access_point.APErrorStatus.APErrno Status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APErrorStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:access_point.APErrorStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const APErrorStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const APErrorStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:access_point.APErrorStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:access_point.APErrorStatus)
    MergeFrom(*source);
  }
}

void APErrorStatus::MergeFrom(const APErrorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:access_point.APErrorStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void APErrorStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:access_point.APErrorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APErrorStatus::CopyFrom(const APErrorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:access_point.APErrorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APErrorStatus::IsInitialized() const {

  return true;
}

void APErrorStatus::Swap(APErrorStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APErrorStatus::InternalSwap(APErrorStatus* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APErrorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APErrorStatus_descriptor_;
  metadata.reflection = APErrorStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APErrorStatus

// optional .access_point.APErrorStatus.APErrno Status = 1;
void APErrorStatus::clear_status() {
  status_ = 0;
}
 ::access_point::APErrorStatus_APErrno APErrorStatus::status() const {
  // @@protoc_insertion_point(field_get:access_point.APErrorStatus.Status)
  return static_cast< ::access_point::APErrorStatus_APErrno >(status_);
}
 void APErrorStatus::set_status(::access_point::APErrorStatus_APErrno value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:access_point.APErrorStatus.Status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APRadio::kNameFieldNumber;
const int APRadio::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APRadio::APRadio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:access_point.APRadio)
}

void APRadio::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  APRadio_default_oneof_instance_->name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  APRadio_default_oneof_instance_->handle_ = 0u;
}

APRadio::APRadio(const APRadio& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:access_point.APRadio)
}

void APRadio::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_Radio();
}

APRadio::~APRadio() {
  // @@protoc_insertion_point(destructor:access_point.APRadio)
  SharedDtor();
}

void APRadio::SharedDtor() {
  if (has_Radio()) {
    clear_Radio();
  }
  if (this != default_instance_) {
  }
}

void APRadio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APRadio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APRadio_descriptor_;
}

const APRadio& APRadio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ap_5fcommon_5ftypes_2eproto();
  return *default_instance_;
}

APRadio* APRadio::default_instance_ = NULL;

APRadio* APRadio::New(::google::protobuf::Arena* arena) const {
  APRadio* n = new APRadio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APRadio::clear_Radio() {
// @@protoc_insertion_point(one_of_clear_start:access_point.APRadio)
  switch(Radio_case()) {
    case kName: {
      Radio_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHandle: {
      // No need to clear
      break;
    }
    case RADIO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RADIO_NOT_SET;
}


void APRadio::Clear() {
// @@protoc_insertion_point(message_clear_start:access_point.APRadio)
  clear_Radio();
}

bool APRadio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:access_point.APRadio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "access_point.APRadio.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Handle;
        break;
      }

      // optional uint32 Handle = 2;
      case 2: {
        if (tag == 16) {
         parse_Handle:
          clear_Radio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &Radio_.handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:access_point.APRadio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:access_point.APRadio)
  return false;
#undef DO_
}

void APRadio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:access_point.APRadio)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "access_point.APRadio.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 Handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:access_point.APRadio)
}

::google::protobuf::uint8* APRadio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:access_point.APRadio)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "access_point.APRadio.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 Handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:access_point.APRadio)
  return target;
}

int APRadio::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:access_point.APRadio)
  int total_size = 0;

  switch (Radio_case()) {
    // optional string Name = 1;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // optional uint32 Handle = 2;
    case kHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
      break;
    }
    case RADIO_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APRadio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:access_point.APRadio)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const APRadio* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const APRadio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:access_point.APRadio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:access_point.APRadio)
    MergeFrom(*source);
  }
}

void APRadio::MergeFrom(const APRadio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:access_point.APRadio)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.Radio_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kHandle: {
      set_handle(from.handle());
      break;
    }
    case RADIO_NOT_SET: {
      break;
    }
  }
}

void APRadio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:access_point.APRadio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APRadio::CopyFrom(const APRadio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:access_point.APRadio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APRadio::IsInitialized() const {

  return true;
}

void APRadio::Swap(APRadio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APRadio::InternalSwap(APRadio* other) {
  std::swap(Radio_, other->Radio_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APRadio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APRadio_descriptor_;
  metadata.reflection = APRadio_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APRadio

// optional string Name = 1;
bool APRadio::has_name() const {
  return Radio_case() == kName;
}
void APRadio::set_has_name() {
  _oneof_case_[0] = kName;
}
void APRadio::clear_name() {
  if (has_name()) {
    Radio_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Radio();
  }
}
 const ::std::string& APRadio::name() const {
  // @@protoc_insertion_point(field_get:access_point.APRadio.Name)
  if (has_name()) {
    return Radio_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void APRadio::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:access_point.APRadio.Name)
  if (!has_name()) {
    clear_Radio();
    set_has_name();
    Radio_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Radio_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.APRadio.Name)
}
 void APRadio::set_name(const char* value) {
  if (!has_name()) {
    clear_Radio();
    set_has_name();
    Radio_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Radio_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.APRadio.Name)
}
 void APRadio::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_Radio();
    set_has_name();
    Radio_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Radio_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.APRadio.Name)
}
 ::std::string* APRadio::mutable_name() {
  if (!has_name()) {
    clear_Radio();
    set_has_name();
    Radio_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:access_point.APRadio.Name)
  return Radio_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* APRadio::release_name() {
  // @@protoc_insertion_point(field_release:access_point.APRadio.Name)
  if (has_name()) {
    clear_has_Radio();
    return Radio_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void APRadio::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    Radio_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Radio();
  if (name != NULL) {
    set_has_name();
    Radio_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APRadio.Name)
}

// optional uint32 Handle = 2;
bool APRadio::has_handle() const {
  return Radio_case() == kHandle;
}
void APRadio::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
void APRadio::clear_handle() {
  if (has_handle()) {
    Radio_.handle_ = 0u;
    clear_has_Radio();
  }
}
 ::google::protobuf::uint32 APRadio::handle() const {
  // @@protoc_insertion_point(field_get:access_point.APRadio.Handle)
  if (has_handle()) {
    return Radio_.handle_;
  }
  return 0u;
}
 void APRadio::set_handle(::google::protobuf::uint32 value) {
  if (!has_handle()) {
    clear_Radio();
    set_has_handle();
  }
  Radio_.handle_ = value;
  // @@protoc_insertion_point(field_set:access_point.APRadio.Handle)
}

bool APRadio::has_Radio() const {
  return Radio_case() != RADIO_NOT_SET;
}
void APRadio::clear_has_Radio() {
  _oneof_case_[0] = RADIO_NOT_SET;
}
APRadio::RadioCase APRadio::Radio_case() const {
  return APRadio::RadioCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int APSsid::kNameFieldNumber;
const int APSsid::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

APSsid::APSsid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:access_point.APSsid)
}

void APSsid::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  APSsid_default_oneof_instance_->name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  APSsid_default_oneof_instance_->handle_ = 0u;
}

APSsid::APSsid(const APSsid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:access_point.APSsid)
}

void APSsid::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_Ssid();
}

APSsid::~APSsid() {
  // @@protoc_insertion_point(destructor:access_point.APSsid)
  SharedDtor();
}

void APSsid::SharedDtor() {
  if (has_Ssid()) {
    clear_Ssid();
  }
  if (this != default_instance_) {
  }
}

void APSsid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APSsid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APSsid_descriptor_;
}

const APSsid& APSsid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ap_5fcommon_5ftypes_2eproto();
  return *default_instance_;
}

APSsid* APSsid::default_instance_ = NULL;

APSsid* APSsid::New(::google::protobuf::Arena* arena) const {
  APSsid* n = new APSsid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void APSsid::clear_Ssid() {
// @@protoc_insertion_point(one_of_clear_start:access_point.APSsid)
  switch(Ssid_case()) {
    case kName: {
      Ssid_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHandle: {
      // No need to clear
      break;
    }
    case SSID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SSID_NOT_SET;
}


void APSsid::Clear() {
// @@protoc_insertion_point(message_clear_start:access_point.APSsid)
  clear_Ssid();
}

bool APSsid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:access_point.APSsid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "access_point.APSsid.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Handle;
        break;
      }

      // optional uint32 Handle = 2;
      case 2: {
        if (tag == 16) {
         parse_Handle:
          clear_Ssid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &Ssid_.handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:access_point.APSsid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:access_point.APSsid)
  return false;
#undef DO_
}

void APSsid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:access_point.APSsid)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "access_point.APSsid.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 Handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:access_point.APSsid)
}

::google::protobuf::uint8* APSsid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:access_point.APSsid)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "access_point.APSsid.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 Handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:access_point.APSsid)
  return target;
}

int APSsid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:access_point.APSsid)
  int total_size = 0;

  switch (Ssid_case()) {
    // optional string Name = 1;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // optional uint32 Handle = 2;
    case kHandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
      break;
    }
    case SSID_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APSsid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:access_point.APSsid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const APSsid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const APSsid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:access_point.APSsid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:access_point.APSsid)
    MergeFrom(*source);
  }
}

void APSsid::MergeFrom(const APSsid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:access_point.APSsid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.Ssid_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kHandle: {
      set_handle(from.handle());
      break;
    }
    case SSID_NOT_SET: {
      break;
    }
  }
}

void APSsid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:access_point.APSsid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APSsid::CopyFrom(const APSsid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:access_point.APSsid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APSsid::IsInitialized() const {

  return true;
}

void APSsid::Swap(APSsid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void APSsid::InternalSwap(APSsid* other) {
  std::swap(Ssid_, other->Ssid_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata APSsid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APSsid_descriptor_;
  metadata.reflection = APSsid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// APSsid

// optional string Name = 1;
bool APSsid::has_name() const {
  return Ssid_case() == kName;
}
void APSsid::set_has_name() {
  _oneof_case_[0] = kName;
}
void APSsid::clear_name() {
  if (has_name()) {
    Ssid_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Ssid();
  }
}
 const ::std::string& APSsid::name() const {
  // @@protoc_insertion_point(field_get:access_point.APSsid.Name)
  if (has_name()) {
    return Ssid_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void APSsid::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:access_point.APSsid.Name)
  if (!has_name()) {
    clear_Ssid();
    set_has_name();
    Ssid_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Ssid_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.APSsid.Name)
}
 void APSsid::set_name(const char* value) {
  if (!has_name()) {
    clear_Ssid();
    set_has_name();
    Ssid_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Ssid_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.APSsid.Name)
}
 void APSsid::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_Ssid();
    set_has_name();
    Ssid_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Ssid_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.APSsid.Name)
}
 ::std::string* APSsid::mutable_name() {
  if (!has_name()) {
    clear_Ssid();
    set_has_name();
    Ssid_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:access_point.APSsid.Name)
  return Ssid_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* APSsid::release_name() {
  // @@protoc_insertion_point(field_release:access_point.APSsid.Name)
  if (has_name()) {
    clear_has_Ssid();
    return Ssid_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void APSsid::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    Ssid_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Ssid();
  if (name != NULL) {
    set_has_name();
    Ssid_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APSsid.Name)
}

// optional uint32 Handle = 2;
bool APSsid::has_handle() const {
  return Ssid_case() == kHandle;
}
void APSsid::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
void APSsid::clear_handle() {
  if (has_handle()) {
    Ssid_.handle_ = 0u;
    clear_has_Ssid();
  }
}
 ::google::protobuf::uint32 APSsid::handle() const {
  // @@protoc_insertion_point(field_get:access_point.APSsid.Handle)
  if (has_handle()) {
    return Ssid_.handle_;
  }
  return 0u;
}
 void APSsid::set_handle(::google::protobuf::uint32 value) {
  if (!has_handle()) {
    clear_Ssid();
    set_has_handle();
  }
  Ssid_.handle_ = value;
  // @@protoc_insertion_point(field_set:access_point.APSsid.Handle)
}

bool APSsid::has_Ssid() const {
  return Ssid_case() != SSID_NOT_SET;
}
void APSsid::clear_has_Ssid() {
  _oneof_case_[0] = SSID_NOT_SET;
}
APSsid::SsidCase APSsid::Ssid_case() const {
  return APSsid::SsidCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace access_point

// @@protoc_insertion_point(global_scope)
