// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_stats.proto

#ifndef PROTOBUF_ap_5fstats_2eproto__INCLUDED
#define PROTOBUF_ap_5fstats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ap_common_types.pb.h"
// @@protoc_insertion_point(includes)

namespace access_point {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ap_5fstats_2eproto();
void protobuf_InitDefaults_ap_5fstats_2eproto();
void protobuf_AssignDesc_ap_5fstats_2eproto();
void protobuf_ShutdownFile_ap_5fstats_2eproto();

class APClientEntry;
class APClientStatsMsgRsp;
class APDNSServersMsgRsp;
class APInterfaceEntry;
class APInterfaceStatsMsgRsp;
class APMemoryStatsMsgRsp;
class APRadioStatsMsgRsp;
class APRoutesMsgRsp;
class APStatsGetMsg;
class APSystemStatsMsgRsp;
class APWLANStatsMsgRsp;
class AntennaRSSI;
class DfsState;
class IPv4Route;
class MemInfo;
class MulticastCounter;
class RadioCounters;
class RadioEntry;
class RadioUtilization;
class SlabInfo;
class WLAN;
class WLANEntry;

// ===================================================================

class APStatsGetMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APStatsGetMsg) */ {
 public:
  APStatsGetMsg();
  virtual ~APStatsGetMsg();

  APStatsGetMsg(const APStatsGetMsg& from);

  inline APStatsGetMsg& operator=(const APStatsGetMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APStatsGetMsg& default_instance();

  static const APStatsGetMsg* internal_default_instance();

  void Swap(APStatsGetMsg* other);

  // implements Message ----------------------------------------------

  inline APStatsGetMsg* New() const { return New(NULL); }

  APStatsGetMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APStatsGetMsg& from);
  void MergeFrom(const APStatsGetMsg& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APStatsGetMsg* other);
  void UnsafeMergeFrom(const APStatsGetMsg& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:access_point.APStatsGetMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APStatsGetMsg> APStatsGetMsg_default_instance_;

// -------------------------------------------------------------------

class APSystemStatsMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APSystemStatsMsgRsp) */ {
 public:
  APSystemStatsMsgRsp();
  virtual ~APSystemStatsMsgRsp();

  APSystemStatsMsgRsp(const APSystemStatsMsgRsp& from);

  inline APSystemStatsMsgRsp& operator=(const APSystemStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APSystemStatsMsgRsp& default_instance();

  static const APSystemStatsMsgRsp* internal_default_instance();

  void Swap(APSystemStatsMsgRsp* other);

  // implements Message ----------------------------------------------

  inline APSystemStatsMsgRsp* New() const { return New(NULL); }

  APSystemStatsMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APSystemStatsMsgRsp& from);
  void MergeFrom(const APSystemStatsMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APSystemStatsMsgRsp* other);
  void UnsafeMergeFrom(const APSystemStatsMsgRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .access_point.APErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::access_point::APErrorStatus& errstatus() const;
  ::access_point::APErrorStatus* mutable_errstatus();
  ::access_point::APErrorStatus* release_errstatus();
  void set_allocated_errstatus(::access_point::APErrorStatus* errstatus);

  // optional string ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional uint32 Uptime = 3;
  void clear_uptime();
  static const int kUptimeFieldNumber = 3;
  ::google::protobuf::uint32 uptime() const;
  void set_uptime(::google::protobuf::uint32 value);

  // optional string When = 4;
  void clear_when();
  static const int kWhenFieldNumber = 4;
  const ::std::string& when() const;
  void set_when(const ::std::string& value);
  void set_when(const char* value);
  void set_when(const char* value, size_t size);
  ::std::string* mutable_when();
  ::std::string* release_when();
  void set_allocated_when(::std::string* when);

  // @@protoc_insertion_point(class_scope:access_point.APSystemStatsMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr when_;
  ::access_point::APErrorStatus* errstatus_;
  ::google::protobuf::uint32 uptime_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APSystemStatsMsgRsp> APSystemStatsMsgRsp_default_instance_;

// -------------------------------------------------------------------

class MemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.MemInfo) */ {
 public:
  MemInfo();
  virtual ~MemInfo();

  MemInfo(const MemInfo& from);

  inline MemInfo& operator=(const MemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemInfo& default_instance();

  static const MemInfo* internal_default_instance();

  void Swap(MemInfo* other);

  // implements Message ----------------------------------------------

  inline MemInfo* New() const { return New(NULL); }

  MemInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemInfo& from);
  void MergeFrom(const MemInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfo* other);
  void UnsafeMergeFrom(const MemInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Total_kB = 1;
  void clear_total_kb();
  static const int kTotalKBFieldNumber = 1;
  ::google::protobuf::uint32 total_kb() const;
  void set_total_kb(::google::protobuf::uint32 value);

  // optional uint32 Available_kB = 2;
  void clear_available_kb();
  static const int kAvailableKBFieldNumber = 2;
  ::google::protobuf::uint32 available_kb() const;
  void set_available_kb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:access_point.MemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 total_kb_;
  ::google::protobuf::uint32 available_kb_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MemInfo> MemInfo_default_instance_;

// -------------------------------------------------------------------

class SlabInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.SlabInfo) */ {
 public:
  SlabInfo();
  virtual ~SlabInfo();

  SlabInfo(const SlabInfo& from);

  inline SlabInfo& operator=(const SlabInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlabInfo& default_instance();

  static const SlabInfo* internal_default_instance();

  void Swap(SlabInfo* other);

  // implements Message ----------------------------------------------

  inline SlabInfo* New() const { return New(NULL); }

  SlabInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlabInfo& from);
  void MergeFrom(const SlabInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SlabInfo* other);
  void UnsafeMergeFrom(const SlabInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 ActiveObjs = 2;
  void clear_activeobjs();
  static const int kActiveObjsFieldNumber = 2;
  ::google::protobuf::int32 activeobjs() const;
  void set_activeobjs(::google::protobuf::int32 value);

  // optional int32 NumObjs = 3;
  void clear_numobjs();
  static const int kNumObjsFieldNumber = 3;
  ::google::protobuf::int32 numobjs() const;
  void set_numobjs(::google::protobuf::int32 value);

  // optional int32 ObjSize = 4;
  void clear_objsize();
  static const int kObjSizeFieldNumber = 4;
  ::google::protobuf::int32 objsize() const;
  void set_objsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:access_point.SlabInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 activeobjs_;
  ::google::protobuf::int32 numobjs_;
  ::google::protobuf::int32 objsize_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SlabInfo> SlabInfo_default_instance_;

// -------------------------------------------------------------------

class APMemoryStatsMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APMemoryStatsMsgRsp) */ {
 public:
  APMemoryStatsMsgRsp();
  virtual ~APMemoryStatsMsgRsp();

  APMemoryStatsMsgRsp(const APMemoryStatsMsgRsp& from);

  inline APMemoryStatsMsgRsp& operator=(const APMemoryStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APMemoryStatsMsgRsp& default_instance();

  static const APMemoryStatsMsgRsp* internal_default_instance();

  void Swap(APMemoryStatsMsgRsp* other);

  // implements Message ----------------------------------------------

  inline APMemoryStatsMsgRsp* New() const { return New(NULL); }

  APMemoryStatsMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APMemoryStatsMsgRsp& from);
  void MergeFrom(const APMemoryStatsMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APMemoryStatsMsgRsp* other);
  void UnsafeMergeFrom(const APMemoryStatsMsgRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .access_point.APErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::access_point::APErrorStatus& errstatus() const;
  ::access_point::APErrorStatus* mutable_errstatus();
  ::access_point::APErrorStatus* release_errstatus();
  void set_allocated_errstatus(::access_point::APErrorStatus* errstatus);

  // optional .access_point.MemInfo ProcMemInfo = 2;
  bool has_procmeminfo() const;
  void clear_procmeminfo();
  static const int kProcMemInfoFieldNumber = 2;
  const ::access_point::MemInfo& procmeminfo() const;
  ::access_point::MemInfo* mutable_procmeminfo();
  ::access_point::MemInfo* release_procmeminfo();
  void set_allocated_procmeminfo(::access_point::MemInfo* procmeminfo);

  // optional .access_point.SlabInfo TopProcSlabInfo = 3;
  bool has_topprocslabinfo() const;
  void clear_topprocslabinfo();
  static const int kTopProcSlabInfoFieldNumber = 3;
  const ::access_point::SlabInfo& topprocslabinfo() const;
  ::access_point::SlabInfo* mutable_topprocslabinfo();
  ::access_point::SlabInfo* release_topprocslabinfo();
  void set_allocated_topprocslabinfo(::access_point::SlabInfo* topprocslabinfo);

  // @@protoc_insertion_point(class_scope:access_point.APMemoryStatsMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::access_point::APErrorStatus* errstatus_;
  ::access_point::MemInfo* procmeminfo_;
  ::access_point::SlabInfo* topprocslabinfo_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APMemoryStatsMsgRsp> APMemoryStatsMsgRsp_default_instance_;

// -------------------------------------------------------------------

class APDNSServersMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APDNSServersMsgRsp) */ {
 public:
  APDNSServersMsgRsp();
  virtual ~APDNSServersMsgRsp();

  APDNSServersMsgRsp(const APDNSServersMsgRsp& from);

  inline APDNSServersMsgRsp& operator=(const APDNSServersMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APDNSServersMsgRsp& default_instance();

  static const APDNSServersMsgRsp* internal_default_instance();

  void Swap(APDNSServersMsgRsp* other);

  // implements Message ----------------------------------------------

  inline APDNSServersMsgRsp* New() const { return New(NULL); }

  APDNSServersMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APDNSServersMsgRsp& from);
  void MergeFrom(const APDNSServersMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APDNSServersMsgRsp* other);
  void UnsafeMergeFrom(const APDNSServersMsgRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .access_point.APErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::access_point::APErrorStatus& errstatus() const;
  ::access_point::APErrorStatus* mutable_errstatus();
  ::access_point::APErrorStatus* release_errstatus();
  void set_allocated_errstatus(::access_point::APErrorStatus* errstatus);

  // repeated string IP = 2;
  int ip_size() const;
  void clear_ip();
  static const int kIPFieldNumber = 2;
  const ::std::string& ip(int index) const;
  ::std::string* mutable_ip(int index);
  void set_ip(int index, const ::std::string& value);
  void set_ip(int index, const char* value);
  void set_ip(int index, const char* value, size_t size);
  ::std::string* add_ip();
  void add_ip(const ::std::string& value);
  void add_ip(const char* value);
  void add_ip(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ip() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ip();

  // @@protoc_insertion_point(class_scope:access_point.APDNSServersMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ip_;
  ::access_point::APErrorStatus* errstatus_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APDNSServersMsgRsp> APDNSServersMsgRsp_default_instance_;

// -------------------------------------------------------------------

class IPv4Route : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.IPv4Route) */ {
 public:
  IPv4Route();
  virtual ~IPv4Route();

  IPv4Route(const IPv4Route& from);

  inline IPv4Route& operator=(const IPv4Route& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPv4Route& default_instance();

  static const IPv4Route* internal_default_instance();

  void Swap(IPv4Route* other);

  // implements Message ----------------------------------------------

  inline IPv4Route* New() const { return New(NULL); }

  IPv4Route* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPv4Route& from);
  void MergeFrom(const IPv4Route& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IPv4Route* other);
  void UnsafeMergeFrom(const IPv4Route& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Destination = 1;
  void clear_destination();
  static const int kDestinationFieldNumber = 1;
  const ::std::string& destination() const;
  void set_destination(const ::std::string& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  ::std::string* mutable_destination();
  ::std::string* release_destination();
  void set_allocated_destination(::std::string* destination);

  // optional string Gateway = 2;
  void clear_gateway();
  static const int kGatewayFieldNumber = 2;
  const ::std::string& gateway() const;
  void set_gateway(const ::std::string& value);
  void set_gateway(const char* value);
  void set_gateway(const char* value, size_t size);
  ::std::string* mutable_gateway();
  ::std::string* release_gateway();
  void set_allocated_gateway(::std::string* gateway);

  // optional string Genmask = 3;
  void clear_genmask();
  static const int kGenmaskFieldNumber = 3;
  const ::std::string& genmask() const;
  void set_genmask(const ::std::string& value);
  void set_genmask(const char* value);
  void set_genmask(const char* value, size_t size);
  ::std::string* mutable_genmask();
  ::std::string* release_genmask();
  void set_allocated_genmask(::std::string* genmask);

  // optional string Flags = 4;
  void clear_flags();
  static const int kFlagsFieldNumber = 4;
  const ::std::string& flags() const;
  void set_flags(const ::std::string& value);
  void set_flags(const char* value);
  void set_flags(const char* value, size_t size);
  ::std::string* mutable_flags();
  ::std::string* release_flags();
  void set_allocated_flags(::std::string* flags);

  // optional uint32 Metric = 5;
  void clear_metric();
  static const int kMetricFieldNumber = 5;
  ::google::protobuf::uint32 metric() const;
  void set_metric(::google::protobuf::uint32 value);

  // optional uint32 Ref = 6;
  void clear_ref();
  static const int kRefFieldNumber = 6;
  ::google::protobuf::uint32 ref() const;
  void set_ref(::google::protobuf::uint32 value);

  // optional uint32 Use = 7;
  void clear_use();
  static const int kUseFieldNumber = 7;
  ::google::protobuf::uint32 use() const;
  void set_use(::google::protobuf::uint32 value);

  // optional string Iface = 8;
  void clear_iface();
  static const int kIfaceFieldNumber = 8;
  const ::std::string& iface() const;
  void set_iface(const ::std::string& value);
  void set_iface(const char* value);
  void set_iface(const char* value, size_t size);
  ::std::string* mutable_iface();
  ::std::string* release_iface();
  void set_allocated_iface(::std::string* iface);

  // @@protoc_insertion_point(class_scope:access_point.IPv4Route)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr destination_;
  ::google::protobuf::internal::ArenaStringPtr gateway_;
  ::google::protobuf::internal::ArenaStringPtr genmask_;
  ::google::protobuf::internal::ArenaStringPtr flags_;
  ::google::protobuf::internal::ArenaStringPtr iface_;
  ::google::protobuf::uint32 metric_;
  ::google::protobuf::uint32 ref_;
  ::google::protobuf::uint32 use_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<IPv4Route> IPv4Route_default_instance_;

// -------------------------------------------------------------------

class APRoutesMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APRoutesMsgRsp) */ {
 public:
  APRoutesMsgRsp();
  virtual ~APRoutesMsgRsp();

  APRoutesMsgRsp(const APRoutesMsgRsp& from);

  inline APRoutesMsgRsp& operator=(const APRoutesMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APRoutesMsgRsp& default_instance();

  static const APRoutesMsgRsp* internal_default_instance();

  void Swap(APRoutesMsgRsp* other);

  // implements Message ----------------------------------------------

  inline APRoutesMsgRsp* New() const { return New(NULL); }

  APRoutesMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APRoutesMsgRsp& from);
  void MergeFrom(const APRoutesMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APRoutesMsgRsp* other);
  void UnsafeMergeFrom(const APRoutesMsgRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .access_point.APErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::access_point::APErrorStatus& errstatus() const;
  ::access_point::APErrorStatus* mutable_errstatus();
  ::access_point::APErrorStatus* release_errstatus();
  void set_allocated_errstatus(::access_point::APErrorStatus* errstatus);

  // repeated .access_point.IPv4Route IPv4Routes = 2;
  int ipv4routes_size() const;
  void clear_ipv4routes();
  static const int kIPv4RoutesFieldNumber = 2;
  const ::access_point::IPv4Route& ipv4routes(int index) const;
  ::access_point::IPv4Route* mutable_ipv4routes(int index);
  ::access_point::IPv4Route* add_ipv4routes();
  ::google::protobuf::RepeatedPtrField< ::access_point::IPv4Route >*
      mutable_ipv4routes();
  const ::google::protobuf::RepeatedPtrField< ::access_point::IPv4Route >&
      ipv4routes() const;

  // @@protoc_insertion_point(class_scope:access_point.APRoutesMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::access_point::IPv4Route > ipv4routes_;
  ::access_point::APErrorStatus* errstatus_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APRoutesMsgRsp> APRoutesMsgRsp_default_instance_;

// -------------------------------------------------------------------

class MulticastCounter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.MulticastCounter) */ {
 public:
  MulticastCounter();
  virtual ~MulticastCounter();

  MulticastCounter(const MulticastCounter& from);

  inline MulticastCounter& operator=(const MulticastCounter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MulticastCounter& default_instance();

  static const MulticastCounter* internal_default_instance();

  void Swap(MulticastCounter* other);

  // implements Message ----------------------------------------------

  inline MulticastCounter* New() const { return New(NULL); }

  MulticastCounter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MulticastCounter& from);
  void MergeFrom(const MulticastCounter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MulticastCounter* other);
  void UnsafeMergeFrom(const MulticastCounter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TxMcastPkts = 1;
  void clear_txmcastpkts();
  static const int kTxMcastPktsFieldNumber = 1;
  ::google::protobuf::uint32 txmcastpkts() const;
  void set_txmcastpkts(::google::protobuf::uint32 value);

  // optional uint64 TxMcastBytes = 2;
  void clear_txmcastbytes();
  static const int kTxMcastBytesFieldNumber = 2;
  ::google::protobuf::uint64 txmcastbytes() const;
  void set_txmcastbytes(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:access_point.MulticastCounter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 txmcastbytes_;
  ::google::protobuf::uint32 txmcastpkts_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MulticastCounter> MulticastCounter_default_instance_;

// -------------------------------------------------------------------

class WLAN : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.WLAN) */ {
 public:
  WLAN();
  virtual ~WLAN();

  WLAN(const WLAN& from);

  inline WLAN& operator=(const WLAN& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WLAN& default_instance();

  static const WLAN* internal_default_instance();

  void Swap(WLAN* other);

  // implements Message ----------------------------------------------

  inline WLAN* New() const { return New(NULL); }

  WLAN* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WLAN& from);
  void MergeFrom(const WLAN& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WLAN* other);
  void UnsafeMergeFrom(const WLAN& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string SSID = 2;
  void clear_ssid();
  static const int kSSIDFieldNumber = 2;
  const ::std::string& ssid() const;
  void set_ssid(const ::std::string& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  ::std::string* mutable_ssid();
  ::std::string* release_ssid();
  void set_allocated_ssid(::std::string* ssid);

  // @@protoc_insertion_point(class_scope:access_point.WLAN)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr ssid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<WLAN> WLAN_default_instance_;

// -------------------------------------------------------------------

class WLANEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.WLANEntry) */ {
 public:
  WLANEntry();
  virtual ~WLANEntry();

  WLANEntry(const WLANEntry& from);

  inline WLANEntry& operator=(const WLANEntry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WLANEntry& default_instance();

  static const WLANEntry* internal_default_instance();

  void Swap(WLANEntry* other);

  // implements Message ----------------------------------------------

  inline WLANEntry* New() const { return New(NULL); }

  WLANEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WLANEntry& from);
  void MergeFrom(const WLANEntry& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WLANEntry* other);
  void UnsafeMergeFrom(const WLANEntry& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .access_point.WLAN Wlan = 1;
  bool has_wlan() const;
  void clear_wlan();
  static const int kWlanFieldNumber = 1;
  const ::access_point::WLAN& wlan() const;
  ::access_point::WLAN* mutable_wlan();
  ::access_point::WLAN* release_wlan();
  void set_allocated_wlan(::access_point::WLAN* wlan);

  // optional uint32 RadioIndex = 2;
  void clear_radioindex();
  static const int kRadioIndexFieldNumber = 2;
  ::google::protobuf::uint32 radioindex() const;
  void set_radioindex(::google::protobuf::uint32 value);

  // optional string BSSID = 3;
  void clear_bssid();
  static const int kBSSIDFieldNumber = 3;
  const ::std::string& bssid() const;
  void set_bssid(const ::std::string& value);
  void set_bssid(const char* value);
  void set_bssid(const char* value, size_t size);
  ::std::string* mutable_bssid();
  ::std::string* release_bssid();
  void set_allocated_bssid(::std::string* bssid);

  // optional string Dev = 4;
  void clear_dev();
  static const int kDevFieldNumber = 4;
  const ::std::string& dev() const;
  void set_dev(const ::std::string& value);
  void set_dev(const char* value);
  void set_dev(const char* value, size_t size);
  ::std::string* mutable_dev();
  ::std::string* release_dev();
  void set_allocated_dev(::std::string* dev);

  // optional int32 NumClients = 5;
  void clear_numclients();
  static const int kNumClientsFieldNumber = 5;
  ::google::protobuf::int32 numclients() const;
  void set_numclients(::google::protobuf::int32 value);

  // optional .access_point.MulticastCounter Counter = 6;
  bool has_counter() const;
  void clear_counter();
  static const int kCounterFieldNumber = 6;
  const ::access_point::MulticastCounter& counter() const;
  ::access_point::MulticastCounter* mutable_counter();
  ::access_point::MulticastCounter* release_counter();
  void set_allocated_counter(::access_point::MulticastCounter* counter);

  // @@protoc_insertion_point(class_scope:access_point.WLANEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bssid_;
  ::google::protobuf::internal::ArenaStringPtr dev_;
  ::access_point::WLAN* wlan_;
  ::access_point::MulticastCounter* counter_;
  ::google::protobuf::uint32 radioindex_;
  ::google::protobuf::int32 numclients_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<WLANEntry> WLANEntry_default_instance_;

// -------------------------------------------------------------------

class APWLANStatsMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APWLANStatsMsgRsp) */ {
 public:
  APWLANStatsMsgRsp();
  virtual ~APWLANStatsMsgRsp();

  APWLANStatsMsgRsp(const APWLANStatsMsgRsp& from);

  inline APWLANStatsMsgRsp& operator=(const APWLANStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APWLANStatsMsgRsp& default_instance();

  static const APWLANStatsMsgRsp* internal_default_instance();

  void Swap(APWLANStatsMsgRsp* other);

  // implements Message ----------------------------------------------

  inline APWLANStatsMsgRsp* New() const { return New(NULL); }

  APWLANStatsMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APWLANStatsMsgRsp& from);
  void MergeFrom(const APWLANStatsMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APWLANStatsMsgRsp* other);
  void UnsafeMergeFrom(const APWLANStatsMsgRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .access_point.APErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::access_point::APErrorStatus& errstatus() const;
  ::access_point::APErrorStatus* mutable_errstatus();
  ::access_point::APErrorStatus* release_errstatus();
  void set_allocated_errstatus(::access_point::APErrorStatus* errstatus);

  // repeated .access_point.WLANEntry WLANEntries = 2;
  int wlanentries_size() const;
  void clear_wlanentries();
  static const int kWLANEntriesFieldNumber = 2;
  const ::access_point::WLANEntry& wlanentries(int index) const;
  ::access_point::WLANEntry* mutable_wlanentries(int index);
  ::access_point::WLANEntry* add_wlanentries();
  ::google::protobuf::RepeatedPtrField< ::access_point::WLANEntry >*
      mutable_wlanentries();
  const ::google::protobuf::RepeatedPtrField< ::access_point::WLANEntry >&
      wlanentries() const;

  // @@protoc_insertion_point(class_scope:access_point.APWLANStatsMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::access_point::WLANEntry > wlanentries_;
  ::access_point::APErrorStatus* errstatus_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APWLANStatsMsgRsp> APWLANStatsMsgRsp_default_instance_;

// -------------------------------------------------------------------

class RadioUtilization : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.RadioUtilization) */ {
 public:
  RadioUtilization();
  virtual ~RadioUtilization();

  RadioUtilization(const RadioUtilization& from);

  inline RadioUtilization& operator=(const RadioUtilization& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadioUtilization& default_instance();

  static const RadioUtilization* internal_default_instance();

  void Swap(RadioUtilization* other);

  // implements Message ----------------------------------------------

  inline RadioUtilization* New() const { return New(NULL); }

  RadioUtilization* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadioUtilization& from);
  void MergeFrom(const RadioUtilization& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadioUtilization* other);
  void UnsafeMergeFrom(const RadioUtilization& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float All = 1;
  void clear_all();
  static const int kAllFieldNumber = 1;
  float all() const;
  void set_all(float value);

  // optional float Tx = 2;
  void clear_tx();
  static const int kTxFieldNumber = 2;
  float tx() const;
  void set_tx(float value);

  // optional float RxInBSS = 3;
  void clear_rxinbss();
  static const int kRxInBSSFieldNumber = 3;
  float rxinbss() const;
  void set_rxinbss(float value);

  // optional float RxOtherBSS = 4;
  void clear_rxotherbss();
  static const int kRxOtherBSSFieldNumber = 4;
  float rxotherbss() const;
  void set_rxotherbss(float value);

  // optional float NonWifi = 5;
  void clear_nonwifi();
  static const int kNonWifiFieldNumber = 5;
  float nonwifi() const;
  void set_nonwifi(float value);

  // @@protoc_insertion_point(class_scope:access_point.RadioUtilization)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float all_;
  float tx_;
  float rxinbss_;
  float rxotherbss_;
  float nonwifi_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RadioUtilization> RadioUtilization_default_instance_;

// -------------------------------------------------------------------

class AntennaRSSI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.AntennaRSSI) */ {
 public:
  AntennaRSSI();
  virtual ~AntennaRSSI();

  AntennaRSSI(const AntennaRSSI& from);

  inline AntennaRSSI& operator=(const AntennaRSSI& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AntennaRSSI& default_instance();

  static const AntennaRSSI* internal_default_instance();

  void Swap(AntennaRSSI* other);

  // implements Message ----------------------------------------------

  inline AntennaRSSI* New() const { return New(NULL); }

  AntennaRSSI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AntennaRSSI& from);
  void MergeFrom(const AntennaRSSI& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AntennaRSSI* other);
  void UnsafeMergeFrom(const AntennaRSSI& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::int32 val(int index) const;
  void set_val(int index, ::google::protobuf::int32 value);
  void add_val(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      val() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:access_point.AntennaRSSI)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > val_;
  mutable int _val_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AntennaRSSI> AntennaRSSI_default_instance_;

// -------------------------------------------------------------------

class RadioCounters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.RadioCounters) */ {
 public:
  RadioCounters();
  virtual ~RadioCounters();

  RadioCounters(const RadioCounters& from);

  inline RadioCounters& operator=(const RadioCounters& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadioCounters& default_instance();

  static const RadioCounters* internal_default_instance();

  void Swap(RadioCounters* other);

  // implements Message ----------------------------------------------

  inline RadioCounters* New() const { return New(NULL); }

  RadioCounters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadioCounters& from);
  void MergeFrom(const RadioCounters& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadioCounters* other);
  void UnsafeMergeFrom(const RadioCounters& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TxBytes = 1;
  void clear_txbytes();
  static const int kTxBytesFieldNumber = 1;
  ::google::protobuf::uint64 txbytes() const;
  void set_txbytes(::google::protobuf::uint64 value);

  // optional uint32 TxPkts = 2;
  void clear_txpkts();
  static const int kTxPktsFieldNumber = 2;
  ::google::protobuf::uint32 txpkts() const;
  void set_txpkts(::google::protobuf::uint32 value);

  // optional uint32 TxMgmt = 3;
  void clear_txmgmt();
  static const int kTxMgmtFieldNumber = 3;
  ::google::protobuf::uint32 txmgmt() const;
  void set_txmgmt(::google::protobuf::uint32 value);

  // optional uint32 TxErrors = 4;
  void clear_txerrors();
  static const int kTxErrorsFieldNumber = 4;
  ::google::protobuf::uint32 txerrors() const;
  void set_txerrors(::google::protobuf::uint32 value);

  // optional uint64 RxBytes = 5;
  void clear_rxbytes();
  static const int kRxBytesFieldNumber = 5;
  ::google::protobuf::uint64 rxbytes() const;
  void set_rxbytes(::google::protobuf::uint64 value);

  // optional uint32 RxPkts = 6;
  void clear_rxpkts();
  static const int kRxPktsFieldNumber = 6;
  ::google::protobuf::uint32 rxpkts() const;
  void set_rxpkts(::google::protobuf::uint32 value);

  // optional uint32 RxMgmt = 7;
  void clear_rxmgmt();
  static const int kRxMgmtFieldNumber = 7;
  ::google::protobuf::uint32 rxmgmt() const;
  void set_rxmgmt(::google::protobuf::uint32 value);

  // optional uint32 RxErrors = 8;
  void clear_rxerrors();
  static const int kRxErrorsFieldNumber = 8;
  ::google::protobuf::uint32 rxerrors() const;
  void set_rxerrors(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:access_point.RadioCounters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 txbytes_;
  ::google::protobuf::uint32 txpkts_;
  ::google::protobuf::uint32 txmgmt_;
  ::google::protobuf::uint64 rxbytes_;
  ::google::protobuf::uint32 txerrors_;
  ::google::protobuf::uint32 rxpkts_;
  ::google::protobuf::uint32 rxmgmt_;
  ::google::protobuf::uint32 rxerrors_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RadioCounters> RadioCounters_default_instance_;

// -------------------------------------------------------------------

class DfsState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.DfsState) */ {
 public:
  DfsState();
  virtual ~DfsState();

  DfsState(const DfsState& from);

  inline DfsState& operator=(const DfsState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsState& default_instance();

  static const DfsState* internal_default_instance();

  void Swap(DfsState* other);

  // implements Message ----------------------------------------------

  inline DfsState* New() const { return New(NULL); }

  DfsState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DfsState& from);
  void MergeFrom(const DfsState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DfsState* other);
  void UnsafeMergeFrom(const DfsState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CacState = 1;
  void clear_cacstate();
  static const int kCacStateFieldNumber = 1;
  ::google::protobuf::uint32 cacstate() const;
  void set_cacstate(::google::protobuf::uint32 value);

  // optional bool RadarDetected = 2;
  void clear_radardetected();
  static const int kRadarDetectedFieldNumber = 2;
  bool radardetected() const;
  void set_radardetected(bool value);

  // @@protoc_insertion_point(class_scope:access_point.DfsState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cacstate_;
  bool radardetected_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DfsState> DfsState_default_instance_;

// -------------------------------------------------------------------

class RadioEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.RadioEntry) */ {
 public:
  RadioEntry();
  virtual ~RadioEntry();

  RadioEntry(const RadioEntry& from);

  inline RadioEntry& operator=(const RadioEntry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadioEntry& default_instance();

  static const RadioEntry* internal_default_instance();

  void Swap(RadioEntry* other);

  // implements Message ----------------------------------------------

  inline RadioEntry* New() const { return New(NULL); }

  RadioEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadioEntry& from);
  void MergeFrom(const RadioEntry& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadioEntry* other);
  void UnsafeMergeFrom(const RadioEntry& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Dev = 1;
  void clear_dev();
  static const int kDevFieldNumber = 1;
  const ::std::string& dev() const;
  void set_dev(const ::std::string& value);
  void set_dev(const char* value);
  void set_dev(const char* value, size_t size);
  ::std::string* mutable_dev();
  ::std::string* release_dev();
  void set_allocated_dev(::std::string* dev);

  // optional string Band = 2;
  void clear_band();
  static const int kBandFieldNumber = 2;
  const ::std::string& band() const;
  void set_band(const ::std::string& value);
  void set_band(const char* value);
  void set_band(const char* value, size_t size);
  ::std::string* mutable_band();
  ::std::string* release_band();
  void set_allocated_band(::std::string* band);

  // optional uint32 Channel = 3;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // optional uint32 SecondaryChannel = 4;
  void clear_secondarychannel();
  static const int kSecondaryChannelFieldNumber = 4;
  ::google::protobuf::uint32 secondarychannel() const;
  void set_secondarychannel(::google::protobuf::uint32 value);

  // optional uint32 Bandwidth = 5;
  void clear_bandwidth();
  static const int kBandwidthFieldNumber = 5;
  ::google::protobuf::uint32 bandwidth() const;
  void set_bandwidth(::google::protobuf::uint32 value);

  // optional uint32 NoiseFloor = 6;
  void clear_noisefloor();
  static const int kNoiseFloorFieldNumber = 6;
  ::google::protobuf::uint32 noisefloor() const;
  void set_noisefloor(::google::protobuf::uint32 value);

  // optional uint32 MaxTxPower = 7;
  void clear_maxtxpower();
  static const int kMaxTxPowerFieldNumber = 7;
  ::google::protobuf::uint32 maxtxpower() const;
  void set_maxtxpower(::google::protobuf::uint32 value);

  // optional .access_point.RadioUtilization Utilization = 8;
  bool has_utilization() const;
  void clear_utilization();
  static const int kUtilizationFieldNumber = 8;
  const ::access_point::RadioUtilization& utilization() const;
  ::access_point::RadioUtilization* mutable_utilization();
  ::access_point::RadioUtilization* release_utilization();
  void set_allocated_utilization(::access_point::RadioUtilization* utilization);

  // optional .access_point.AntennaRSSI RSSI = 9;
  bool has_rssi() const;
  void clear_rssi();
  static const int kRSSIFieldNumber = 9;
  const ::access_point::AntennaRSSI& rssi() const;
  ::access_point::AntennaRSSI* mutable_rssi();
  ::access_point::AntennaRSSI* release_rssi();
  void set_allocated_rssi(::access_point::AntennaRSSI* rssi);

  // optional .access_point.RadioCounters Counter = 10;
  bool has_counter() const;
  void clear_counter();
  static const int kCounterFieldNumber = 10;
  const ::access_point::RadioCounters& counter() const;
  ::access_point::RadioCounters* mutable_counter();
  ::access_point::RadioCounters* release_counter();
  void set_allocated_counter(::access_point::RadioCounters* counter);

  // optional .access_point.DfsState DFS = 11;
  bool has_dfs() const;
  void clear_dfs();
  static const int kDFSFieldNumber = 11;
  const ::access_point::DfsState& dfs() const;
  ::access_point::DfsState* mutable_dfs();
  ::access_point::DfsState* release_dfs();
  void set_allocated_dfs(::access_point::DfsState* dfs);

  // @@protoc_insertion_point(class_scope:access_point.RadioEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dev_;
  ::google::protobuf::internal::ArenaStringPtr band_;
  ::access_point::RadioUtilization* utilization_;
  ::access_point::AntennaRSSI* rssi_;
  ::access_point::RadioCounters* counter_;
  ::access_point::DfsState* dfs_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 secondarychannel_;
  ::google::protobuf::uint32 bandwidth_;
  ::google::protobuf::uint32 noisefloor_;
  ::google::protobuf::uint32 maxtxpower_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RadioEntry> RadioEntry_default_instance_;

// -------------------------------------------------------------------

class APRadioStatsMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APRadioStatsMsgRsp) */ {
 public:
  APRadioStatsMsgRsp();
  virtual ~APRadioStatsMsgRsp();

  APRadioStatsMsgRsp(const APRadioStatsMsgRsp& from);

  inline APRadioStatsMsgRsp& operator=(const APRadioStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APRadioStatsMsgRsp& default_instance();

  static const APRadioStatsMsgRsp* internal_default_instance();

  void Swap(APRadioStatsMsgRsp* other);

  // implements Message ----------------------------------------------

  inline APRadioStatsMsgRsp* New() const { return New(NULL); }

  APRadioStatsMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APRadioStatsMsgRsp& from);
  void MergeFrom(const APRadioStatsMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APRadioStatsMsgRsp* other);
  void UnsafeMergeFrom(const APRadioStatsMsgRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .access_point.APErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::access_point::APErrorStatus& errstatus() const;
  ::access_point::APErrorStatus* mutable_errstatus();
  ::access_point::APErrorStatus* release_errstatus();
  void set_allocated_errstatus(::access_point::APErrorStatus* errstatus);

  // repeated .access_point.RadioEntry Radios = 2;
  int radios_size() const;
  void clear_radios();
  static const int kRadiosFieldNumber = 2;
  const ::access_point::RadioEntry& radios(int index) const;
  ::access_point::RadioEntry* mutable_radios(int index);
  ::access_point::RadioEntry* add_radios();
  ::google::protobuf::RepeatedPtrField< ::access_point::RadioEntry >*
      mutable_radios();
  const ::google::protobuf::RepeatedPtrField< ::access_point::RadioEntry >&
      radios() const;

  // @@protoc_insertion_point(class_scope:access_point.APRadioStatsMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::access_point::RadioEntry > radios_;
  ::access_point::APErrorStatus* errstatus_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APRadioStatsMsgRsp> APRadioStatsMsgRsp_default_instance_;

// -------------------------------------------------------------------

class APClientEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APClientEntry) */ {
 public:
  APClientEntry();
  virtual ~APClientEntry();

  APClientEntry(const APClientEntry& from);

  inline APClientEntry& operator=(const APClientEntry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APClientEntry& default_instance();

  static const APClientEntry* internal_default_instance();

  void Swap(APClientEntry* other);

  // implements Message ----------------------------------------------

  inline APClientEntry* New() const { return New(NULL); }

  APClientEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APClientEntry& from);
  void MergeFrom(const APClientEntry& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APClientEntry* other);
  void UnsafeMergeFrom(const APClientEntry& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MAC = 2;
  void clear_mac();
  static const int kMACFieldNumber = 2;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // optional uint32 RadioIndex = 3;
  void clear_radioindex();
  static const int kRadioIndexFieldNumber = 3;
  ::google::protobuf::uint32 radioindex() const;
  void set_radioindex(::google::protobuf::uint32 value);

  // optional string Band = 4;
  void clear_band();
  static const int kBandFieldNumber = 4;
  const ::std::string& band() const;
  void set_band(const ::std::string& value);
  void set_band(const char* value);
  void set_band(const char* value, size_t size);
  ::std::string* mutable_band();
  ::std::string* release_band();
  void set_allocated_band(::std::string* band);

  // optional string BSSID = 5;
  void clear_bssid();
  static const int kBSSIDFieldNumber = 5;
  const ::std::string& bssid() const;
  void set_bssid(const ::std::string& value);
  void set_bssid(const char* value);
  void set_bssid(const char* value, size_t size);
  ::std::string* mutable_bssid();
  ::std::string* release_bssid();
  void set_allocated_bssid(::std::string* bssid);

  // optional .access_point.WLAN Wlan = 6;
  bool has_wlan() const;
  void clear_wlan();
  static const int kWlanFieldNumber = 6;
  const ::access_point::WLAN& wlan() const;
  ::access_point::WLAN* mutable_wlan();
  ::access_point::WLAN* release_wlan();
  void set_allocated_wlan(::access_point::WLAN* wlan);

  // optional uint32 ConnectedTimeSec = 7;
  void clear_connectedtimesec();
  static const int kConnectedTimeSecFieldNumber = 7;
  ::google::protobuf::uint32 connectedtimesec() const;
  void set_connectedtimesec(::google::protobuf::uint32 value);

  // optional uint32 InactiveTimeMilliSec = 8;
  void clear_inactivetimemillisec();
  static const int kInactiveTimeMilliSecFieldNumber = 8;
  ::google::protobuf::uint32 inactivetimemillisec() const;
  void set_inactivetimemillisec(::google::protobuf::uint32 value);

  // optional int32 RSSI = 9;
  void clear_rssi();
  static const int kRSSIFieldNumber = 9;
  ::google::protobuf::int32 rssi() const;
  void set_rssi(::google::protobuf::int32 value);

  // repeated int32 AntennaRSSI = 10;
  int antennarssi_size() const;
  void clear_antennarssi();
  static const int kAntennaRSSIFieldNumber = 10;
  ::google::protobuf::int32 antennarssi(int index) const;
  void set_antennarssi(int index, ::google::protobuf::int32 value);
  void add_antennarssi(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      antennarssi() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_antennarssi();

  // optional int32 AvgRSSI = 11;
  void clear_avgrssi();
  static const int kAvgRSSIFieldNumber = 11;
  ::google::protobuf::int32 avgrssi() const;
  void set_avgrssi(::google::protobuf::int32 value);

  // optional int32 TxBitRate = 12;
  void clear_txbitrate();
  static const int kTxBitRateFieldNumber = 12;
  ::google::protobuf::int32 txbitrate() const;
  void set_txbitrate(::google::protobuf::int32 value);

  // optional uint64 TxUnicastBytes = 13;
  void clear_txunicastbytes();
  static const int kTxUnicastBytesFieldNumber = 13;
  ::google::protobuf::uint64 txunicastbytes() const;
  void set_txunicastbytes(::google::protobuf::uint64 value);

  // optional uint32 TxUnicastPkts = 14;
  void clear_txunicastpkts();
  static const int kTxUnicastPktsFieldNumber = 14;
  ::google::protobuf::uint32 txunicastpkts() const;
  void set_txunicastpkts(::google::protobuf::uint32 value);

  // optional uint64 RxBytes = 15;
  void clear_rxbytes();
  static const int kRxBytesFieldNumber = 15;
  ::google::protobuf::uint64 rxbytes() const;
  void set_rxbytes(::google::protobuf::uint64 value);

  // optional uint32 RxPkts = 16;
  void clear_rxpkts();
  static const int kRxPktsFieldNumber = 16;
  ::google::protobuf::uint32 rxpkts() const;
  void set_rxpkts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:access_point.APClientEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > antennarssi_;
  mutable int _antennarssi_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr band_;
  ::google::protobuf::internal::ArenaStringPtr bssid_;
  ::access_point::WLAN* wlan_;
  ::google::protobuf::uint32 radioindex_;
  ::google::protobuf::uint32 connectedtimesec_;
  ::google::protobuf::uint32 inactivetimemillisec_;
  ::google::protobuf::int32 rssi_;
  ::google::protobuf::int32 avgrssi_;
  ::google::protobuf::int32 txbitrate_;
  ::google::protobuf::uint64 txunicastbytes_;
  ::google::protobuf::uint64 rxbytes_;
  ::google::protobuf::uint32 txunicastpkts_;
  ::google::protobuf::uint32 rxpkts_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APClientEntry> APClientEntry_default_instance_;

// -------------------------------------------------------------------

class APClientStatsMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APClientStatsMsgRsp) */ {
 public:
  APClientStatsMsgRsp();
  virtual ~APClientStatsMsgRsp();

  APClientStatsMsgRsp(const APClientStatsMsgRsp& from);

  inline APClientStatsMsgRsp& operator=(const APClientStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APClientStatsMsgRsp& default_instance();

  static const APClientStatsMsgRsp* internal_default_instance();

  void Swap(APClientStatsMsgRsp* other);

  // implements Message ----------------------------------------------

  inline APClientStatsMsgRsp* New() const { return New(NULL); }

  APClientStatsMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APClientStatsMsgRsp& from);
  void MergeFrom(const APClientStatsMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APClientStatsMsgRsp* other);
  void UnsafeMergeFrom(const APClientStatsMsgRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .access_point.APErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::access_point::APErrorStatus& errstatus() const;
  ::access_point::APErrorStatus* mutable_errstatus();
  ::access_point::APErrorStatus* release_errstatus();
  void set_allocated_errstatus(::access_point::APErrorStatus* errstatus);

  // repeated .access_point.APClientEntry Clients = 2;
  int clients_size() const;
  void clear_clients();
  static const int kClientsFieldNumber = 2;
  const ::access_point::APClientEntry& clients(int index) const;
  ::access_point::APClientEntry* mutable_clients(int index);
  ::access_point::APClientEntry* add_clients();
  ::google::protobuf::RepeatedPtrField< ::access_point::APClientEntry >*
      mutable_clients();
  const ::google::protobuf::RepeatedPtrField< ::access_point::APClientEntry >&
      clients() const;

  // @@protoc_insertion_point(class_scope:access_point.APClientStatsMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::access_point::APClientEntry > clients_;
  ::access_point::APErrorStatus* errstatus_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APClientStatsMsgRsp> APClientStatsMsgRsp_default_instance_;

// -------------------------------------------------------------------

class APInterfaceEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APInterfaceEntry) */ {
 public:
  APInterfaceEntry();
  virtual ~APInterfaceEntry();

  APInterfaceEntry(const APInterfaceEntry& from);

  inline APInterfaceEntry& operator=(const APInterfaceEntry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APInterfaceEntry& default_instance();

  static const APInterfaceEntry* internal_default_instance();

  void Swap(APInterfaceEntry* other);

  // implements Message ----------------------------------------------

  inline APInterfaceEntry* New() const { return New(NULL); }

  APInterfaceEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APInterfaceEntry& from);
  void MergeFrom(const APInterfaceEntry& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APInterfaceEntry* other);
  void UnsafeMergeFrom(const APInterfaceEntry& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool Link = 2;
  void clear_link();
  static const int kLinkFieldNumber = 2;
  bool link() const;
  void set_link(bool value);

  // optional bool FullDuplex = 3;
  void clear_fullduplex();
  static const int kFullDuplexFieldNumber = 3;
  bool fullduplex() const;
  void set_fullduplex(bool value);

  // optional uint32 Speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // optional uint64 RxBytes = 5;
  void clear_rxbytes();
  static const int kRxBytesFieldNumber = 5;
  ::google::protobuf::uint64 rxbytes() const;
  void set_rxbytes(::google::protobuf::uint64 value);

  // optional uint32 RxPkts = 6;
  void clear_rxpkts();
  static const int kRxPktsFieldNumber = 6;
  ::google::protobuf::uint32 rxpkts() const;
  void set_rxpkts(::google::protobuf::uint32 value);

  // optional uint32 RxDiscards = 7;
  void clear_rxdiscards();
  static const int kRxDiscardsFieldNumber = 7;
  ::google::protobuf::uint32 rxdiscards() const;
  void set_rxdiscards(::google::protobuf::uint32 value);

  // optional uint64 TxBytes = 8;
  void clear_txbytes();
  static const int kTxBytesFieldNumber = 8;
  ::google::protobuf::uint64 txbytes() const;
  void set_txbytes(::google::protobuf::uint64 value);

  // optional uint32 TxPkts = 9;
  void clear_txpkts();
  static const int kTxPktsFieldNumber = 9;
  ::google::protobuf::uint32 txpkts() const;
  void set_txpkts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:access_point.APInterfaceEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool link_;
  bool fullduplex_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::uint64 rxbytes_;
  ::google::protobuf::uint32 rxpkts_;
  ::google::protobuf::uint32 rxdiscards_;
  ::google::protobuf::uint64 txbytes_;
  ::google::protobuf::uint32 txpkts_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APInterfaceEntry> APInterfaceEntry_default_instance_;

// -------------------------------------------------------------------

class APInterfaceStatsMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:access_point.APInterfaceStatsMsgRsp) */ {
 public:
  APInterfaceStatsMsgRsp();
  virtual ~APInterfaceStatsMsgRsp();

  APInterfaceStatsMsgRsp(const APInterfaceStatsMsgRsp& from);

  inline APInterfaceStatsMsgRsp& operator=(const APInterfaceStatsMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const APInterfaceStatsMsgRsp& default_instance();

  static const APInterfaceStatsMsgRsp* internal_default_instance();

  void Swap(APInterfaceStatsMsgRsp* other);

  // implements Message ----------------------------------------------

  inline APInterfaceStatsMsgRsp* New() const { return New(NULL); }

  APInterfaceStatsMsgRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const APInterfaceStatsMsgRsp& from);
  void MergeFrom(const APInterfaceStatsMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(APInterfaceStatsMsgRsp* other);
  void UnsafeMergeFrom(const APInterfaceStatsMsgRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .access_point.APErrorStatus ErrStatus = 1;
  bool has_errstatus() const;
  void clear_errstatus();
  static const int kErrStatusFieldNumber = 1;
  const ::access_point::APErrorStatus& errstatus() const;
  ::access_point::APErrorStatus* mutable_errstatus();
  ::access_point::APErrorStatus* release_errstatus();
  void set_allocated_errstatus(::access_point::APErrorStatus* errstatus);

  // repeated .access_point.APInterfaceEntry Interfaces = 2;
  int interfaces_size() const;
  void clear_interfaces();
  static const int kInterfacesFieldNumber = 2;
  const ::access_point::APInterfaceEntry& interfaces(int index) const;
  ::access_point::APInterfaceEntry* mutable_interfaces(int index);
  ::access_point::APInterfaceEntry* add_interfaces();
  ::google::protobuf::RepeatedPtrField< ::access_point::APInterfaceEntry >*
      mutable_interfaces();
  const ::google::protobuf::RepeatedPtrField< ::access_point::APInterfaceEntry >&
      interfaces() const;

  // @@protoc_insertion_point(class_scope:access_point.APInterfaceStatsMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::access_point::APInterfaceEntry > interfaces_;
  ::access_point::APErrorStatus* errstatus_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_ap_5fstats_2eproto_impl();
  friend void  protobuf_AddDesc_ap_5fstats_2eproto_impl();
  friend void protobuf_AssignDesc_ap_5fstats_2eproto();
  friend void protobuf_ShutdownFile_ap_5fstats_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<APInterfaceStatsMsgRsp> APInterfaceStatsMsgRsp_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// APStatsGetMsg

inline const APStatsGetMsg* APStatsGetMsg::internal_default_instance() {
  return &APStatsGetMsg_default_instance_.get();
}
// -------------------------------------------------------------------

// APSystemStatsMsgRsp

// optional .access_point.APErrorStatus ErrStatus = 1;
inline bool APSystemStatsMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void APSystemStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::access_point::APErrorStatus& APSystemStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:access_point.APSystemStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::access_point::APErrorStatus::internal_default_instance();
}
inline ::access_point::APErrorStatus* APSystemStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::access_point::APErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APSystemStatsMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::access_point::APErrorStatus* APSystemStatsMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:access_point.APSystemStatsMsgRsp.ErrStatus)
  
  ::access_point::APErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void APSystemStatsMsgRsp::set_allocated_errstatus(::access_point::APErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APSystemStatsMsgRsp.ErrStatus)
}

// optional string ID = 2;
inline void APSystemStatsMsgRsp::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& APSystemStatsMsgRsp::id() const {
  // @@protoc_insertion_point(field_get:access_point.APSystemStatsMsgRsp.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APSystemStatsMsgRsp::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.APSystemStatsMsgRsp.ID)
}
inline void APSystemStatsMsgRsp::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.APSystemStatsMsgRsp.ID)
}
inline void APSystemStatsMsgRsp::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.APSystemStatsMsgRsp.ID)
}
inline ::std::string* APSystemStatsMsgRsp::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:access_point.APSystemStatsMsgRsp.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* APSystemStatsMsgRsp::release_id() {
  // @@protoc_insertion_point(field_release:access_point.APSystemStatsMsgRsp.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APSystemStatsMsgRsp::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:access_point.APSystemStatsMsgRsp.ID)
}

// optional uint32 Uptime = 3;
inline void APSystemStatsMsgRsp::clear_uptime() {
  uptime_ = 0u;
}
inline ::google::protobuf::uint32 APSystemStatsMsgRsp::uptime() const {
  // @@protoc_insertion_point(field_get:access_point.APSystemStatsMsgRsp.Uptime)
  return uptime_;
}
inline void APSystemStatsMsgRsp::set_uptime(::google::protobuf::uint32 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:access_point.APSystemStatsMsgRsp.Uptime)
}

// optional string When = 4;
inline void APSystemStatsMsgRsp::clear_when() {
  when_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& APSystemStatsMsgRsp::when() const {
  // @@protoc_insertion_point(field_get:access_point.APSystemStatsMsgRsp.When)
  return when_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APSystemStatsMsgRsp::set_when(const ::std::string& value) {
  
  when_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.APSystemStatsMsgRsp.When)
}
inline void APSystemStatsMsgRsp::set_when(const char* value) {
  
  when_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.APSystemStatsMsgRsp.When)
}
inline void APSystemStatsMsgRsp::set_when(const char* value, size_t size) {
  
  when_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.APSystemStatsMsgRsp.When)
}
inline ::std::string* APSystemStatsMsgRsp::mutable_when() {
  
  // @@protoc_insertion_point(field_mutable:access_point.APSystemStatsMsgRsp.When)
  return when_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* APSystemStatsMsgRsp::release_when() {
  // @@protoc_insertion_point(field_release:access_point.APSystemStatsMsgRsp.When)
  
  return when_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APSystemStatsMsgRsp::set_allocated_when(::std::string* when) {
  if (when != NULL) {
    
  } else {
    
  }
  when_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), when);
  // @@protoc_insertion_point(field_set_allocated:access_point.APSystemStatsMsgRsp.When)
}

inline const APSystemStatsMsgRsp* APSystemStatsMsgRsp::internal_default_instance() {
  return &APSystemStatsMsgRsp_default_instance_.get();
}
// -------------------------------------------------------------------

// MemInfo

// optional uint32 Total_kB = 1;
inline void MemInfo::clear_total_kb() {
  total_kb_ = 0u;
}
inline ::google::protobuf::uint32 MemInfo::total_kb() const {
  // @@protoc_insertion_point(field_get:access_point.MemInfo.Total_kB)
  return total_kb_;
}
inline void MemInfo::set_total_kb(::google::protobuf::uint32 value) {
  
  total_kb_ = value;
  // @@protoc_insertion_point(field_set:access_point.MemInfo.Total_kB)
}

// optional uint32 Available_kB = 2;
inline void MemInfo::clear_available_kb() {
  available_kb_ = 0u;
}
inline ::google::protobuf::uint32 MemInfo::available_kb() const {
  // @@protoc_insertion_point(field_get:access_point.MemInfo.Available_kB)
  return available_kb_;
}
inline void MemInfo::set_available_kb(::google::protobuf::uint32 value) {
  
  available_kb_ = value;
  // @@protoc_insertion_point(field_set:access_point.MemInfo.Available_kB)
}

inline const MemInfo* MemInfo::internal_default_instance() {
  return &MemInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// SlabInfo

// optional string Name = 1;
inline void SlabInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SlabInfo::name() const {
  // @@protoc_insertion_point(field_get:access_point.SlabInfo.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SlabInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.SlabInfo.Name)
}
inline void SlabInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.SlabInfo.Name)
}
inline void SlabInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.SlabInfo.Name)
}
inline ::std::string* SlabInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:access_point.SlabInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SlabInfo::release_name() {
  // @@protoc_insertion_point(field_release:access_point.SlabInfo.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SlabInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:access_point.SlabInfo.Name)
}

// optional int32 ActiveObjs = 2;
inline void SlabInfo::clear_activeobjs() {
  activeobjs_ = 0;
}
inline ::google::protobuf::int32 SlabInfo::activeobjs() const {
  // @@protoc_insertion_point(field_get:access_point.SlabInfo.ActiveObjs)
  return activeobjs_;
}
inline void SlabInfo::set_activeobjs(::google::protobuf::int32 value) {
  
  activeobjs_ = value;
  // @@protoc_insertion_point(field_set:access_point.SlabInfo.ActiveObjs)
}

// optional int32 NumObjs = 3;
inline void SlabInfo::clear_numobjs() {
  numobjs_ = 0;
}
inline ::google::protobuf::int32 SlabInfo::numobjs() const {
  // @@protoc_insertion_point(field_get:access_point.SlabInfo.NumObjs)
  return numobjs_;
}
inline void SlabInfo::set_numobjs(::google::protobuf::int32 value) {
  
  numobjs_ = value;
  // @@protoc_insertion_point(field_set:access_point.SlabInfo.NumObjs)
}

// optional int32 ObjSize = 4;
inline void SlabInfo::clear_objsize() {
  objsize_ = 0;
}
inline ::google::protobuf::int32 SlabInfo::objsize() const {
  // @@protoc_insertion_point(field_get:access_point.SlabInfo.ObjSize)
  return objsize_;
}
inline void SlabInfo::set_objsize(::google::protobuf::int32 value) {
  
  objsize_ = value;
  // @@protoc_insertion_point(field_set:access_point.SlabInfo.ObjSize)
}

inline const SlabInfo* SlabInfo::internal_default_instance() {
  return &SlabInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// APMemoryStatsMsgRsp

// optional .access_point.APErrorStatus ErrStatus = 1;
inline bool APMemoryStatsMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void APMemoryStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::access_point::APErrorStatus& APMemoryStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:access_point.APMemoryStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::access_point::APErrorStatus::internal_default_instance();
}
inline ::access_point::APErrorStatus* APMemoryStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::access_point::APErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APMemoryStatsMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::access_point::APErrorStatus* APMemoryStatsMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:access_point.APMemoryStatsMsgRsp.ErrStatus)
  
  ::access_point::APErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void APMemoryStatsMsgRsp::set_allocated_errstatus(::access_point::APErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APMemoryStatsMsgRsp.ErrStatus)
}

// optional .access_point.MemInfo ProcMemInfo = 2;
inline bool APMemoryStatsMsgRsp::has_procmeminfo() const {
  return this != internal_default_instance() && procmeminfo_ != NULL;
}
inline void APMemoryStatsMsgRsp::clear_procmeminfo() {
  if (GetArenaNoVirtual() == NULL && procmeminfo_ != NULL) delete procmeminfo_;
  procmeminfo_ = NULL;
}
inline const ::access_point::MemInfo& APMemoryStatsMsgRsp::procmeminfo() const {
  // @@protoc_insertion_point(field_get:access_point.APMemoryStatsMsgRsp.ProcMemInfo)
  return procmeminfo_ != NULL ? *procmeminfo_
                         : *::access_point::MemInfo::internal_default_instance();
}
inline ::access_point::MemInfo* APMemoryStatsMsgRsp::mutable_procmeminfo() {
  
  if (procmeminfo_ == NULL) {
    procmeminfo_ = new ::access_point::MemInfo;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APMemoryStatsMsgRsp.ProcMemInfo)
  return procmeminfo_;
}
inline ::access_point::MemInfo* APMemoryStatsMsgRsp::release_procmeminfo() {
  // @@protoc_insertion_point(field_release:access_point.APMemoryStatsMsgRsp.ProcMemInfo)
  
  ::access_point::MemInfo* temp = procmeminfo_;
  procmeminfo_ = NULL;
  return temp;
}
inline void APMemoryStatsMsgRsp::set_allocated_procmeminfo(::access_point::MemInfo* procmeminfo) {
  delete procmeminfo_;
  procmeminfo_ = procmeminfo;
  if (procmeminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APMemoryStatsMsgRsp.ProcMemInfo)
}

// optional .access_point.SlabInfo TopProcSlabInfo = 3;
inline bool APMemoryStatsMsgRsp::has_topprocslabinfo() const {
  return this != internal_default_instance() && topprocslabinfo_ != NULL;
}
inline void APMemoryStatsMsgRsp::clear_topprocslabinfo() {
  if (GetArenaNoVirtual() == NULL && topprocslabinfo_ != NULL) delete topprocslabinfo_;
  topprocslabinfo_ = NULL;
}
inline const ::access_point::SlabInfo& APMemoryStatsMsgRsp::topprocslabinfo() const {
  // @@protoc_insertion_point(field_get:access_point.APMemoryStatsMsgRsp.TopProcSlabInfo)
  return topprocslabinfo_ != NULL ? *topprocslabinfo_
                         : *::access_point::SlabInfo::internal_default_instance();
}
inline ::access_point::SlabInfo* APMemoryStatsMsgRsp::mutable_topprocslabinfo() {
  
  if (topprocslabinfo_ == NULL) {
    topprocslabinfo_ = new ::access_point::SlabInfo;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APMemoryStatsMsgRsp.TopProcSlabInfo)
  return topprocslabinfo_;
}
inline ::access_point::SlabInfo* APMemoryStatsMsgRsp::release_topprocslabinfo() {
  // @@protoc_insertion_point(field_release:access_point.APMemoryStatsMsgRsp.TopProcSlabInfo)
  
  ::access_point::SlabInfo* temp = topprocslabinfo_;
  topprocslabinfo_ = NULL;
  return temp;
}
inline void APMemoryStatsMsgRsp::set_allocated_topprocslabinfo(::access_point::SlabInfo* topprocslabinfo) {
  delete topprocslabinfo_;
  topprocslabinfo_ = topprocslabinfo;
  if (topprocslabinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APMemoryStatsMsgRsp.TopProcSlabInfo)
}

inline const APMemoryStatsMsgRsp* APMemoryStatsMsgRsp::internal_default_instance() {
  return &APMemoryStatsMsgRsp_default_instance_.get();
}
// -------------------------------------------------------------------

// APDNSServersMsgRsp

// optional .access_point.APErrorStatus ErrStatus = 1;
inline bool APDNSServersMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void APDNSServersMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::access_point::APErrorStatus& APDNSServersMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:access_point.APDNSServersMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::access_point::APErrorStatus::internal_default_instance();
}
inline ::access_point::APErrorStatus* APDNSServersMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::access_point::APErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APDNSServersMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::access_point::APErrorStatus* APDNSServersMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:access_point.APDNSServersMsgRsp.ErrStatus)
  
  ::access_point::APErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void APDNSServersMsgRsp::set_allocated_errstatus(::access_point::APErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APDNSServersMsgRsp.ErrStatus)
}

// repeated string IP = 2;
inline int APDNSServersMsgRsp::ip_size() const {
  return ip_.size();
}
inline void APDNSServersMsgRsp::clear_ip() {
  ip_.Clear();
}
inline const ::std::string& APDNSServersMsgRsp::ip(int index) const {
  // @@protoc_insertion_point(field_get:access_point.APDNSServersMsgRsp.IP)
  return ip_.Get(index);
}
inline ::std::string* APDNSServersMsgRsp::mutable_ip(int index) {
  // @@protoc_insertion_point(field_mutable:access_point.APDNSServersMsgRsp.IP)
  return ip_.Mutable(index);
}
inline void APDNSServersMsgRsp::set_ip(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:access_point.APDNSServersMsgRsp.IP)
  ip_.Mutable(index)->assign(value);
}
inline void APDNSServersMsgRsp::set_ip(int index, const char* value) {
  ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:access_point.APDNSServersMsgRsp.IP)
}
inline void APDNSServersMsgRsp::set_ip(int index, const char* value, size_t size) {
  ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:access_point.APDNSServersMsgRsp.IP)
}
inline ::std::string* APDNSServersMsgRsp::add_ip() {
  // @@protoc_insertion_point(field_add_mutable:access_point.APDNSServersMsgRsp.IP)
  return ip_.Add();
}
inline void APDNSServersMsgRsp::add_ip(const ::std::string& value) {
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:access_point.APDNSServersMsgRsp.IP)
}
inline void APDNSServersMsgRsp::add_ip(const char* value) {
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:access_point.APDNSServersMsgRsp.IP)
}
inline void APDNSServersMsgRsp::add_ip(const char* value, size_t size) {
  ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:access_point.APDNSServersMsgRsp.IP)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
APDNSServersMsgRsp::ip() const {
  // @@protoc_insertion_point(field_list:access_point.APDNSServersMsgRsp.IP)
  return ip_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
APDNSServersMsgRsp::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:access_point.APDNSServersMsgRsp.IP)
  return &ip_;
}

inline const APDNSServersMsgRsp* APDNSServersMsgRsp::internal_default_instance() {
  return &APDNSServersMsgRsp_default_instance_.get();
}
// -------------------------------------------------------------------

// IPv4Route

// optional string Destination = 1;
inline void IPv4Route::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPv4Route::destination() const {
  // @@protoc_insertion_point(field_get:access_point.IPv4Route.Destination)
  return destination_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_destination(const ::std::string& value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.IPv4Route.Destination)
}
inline void IPv4Route::set_destination(const char* value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.IPv4Route.Destination)
}
inline void IPv4Route::set_destination(const char* value, size_t size) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.IPv4Route.Destination)
}
inline ::std::string* IPv4Route::mutable_destination() {
  
  // @@protoc_insertion_point(field_mutable:access_point.IPv4Route.Destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPv4Route::release_destination() {
  // @@protoc_insertion_point(field_release:access_point.IPv4Route.Destination)
  
  return destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    
  } else {
    
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:access_point.IPv4Route.Destination)
}

// optional string Gateway = 2;
inline void IPv4Route::clear_gateway() {
  gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPv4Route::gateway() const {
  // @@protoc_insertion_point(field_get:access_point.IPv4Route.Gateway)
  return gateway_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_gateway(const ::std::string& value) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.IPv4Route.Gateway)
}
inline void IPv4Route::set_gateway(const char* value) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.IPv4Route.Gateway)
}
inline void IPv4Route::set_gateway(const char* value, size_t size) {
  
  gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.IPv4Route.Gateway)
}
inline ::std::string* IPv4Route::mutable_gateway() {
  
  // @@protoc_insertion_point(field_mutable:access_point.IPv4Route.Gateway)
  return gateway_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPv4Route::release_gateway() {
  // @@protoc_insertion_point(field_release:access_point.IPv4Route.Gateway)
  
  return gateway_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_allocated_gateway(::std::string* gateway) {
  if (gateway != NULL) {
    
  } else {
    
  }
  gateway_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway);
  // @@protoc_insertion_point(field_set_allocated:access_point.IPv4Route.Gateway)
}

// optional string Genmask = 3;
inline void IPv4Route::clear_genmask() {
  genmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPv4Route::genmask() const {
  // @@protoc_insertion_point(field_get:access_point.IPv4Route.Genmask)
  return genmask_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_genmask(const ::std::string& value) {
  
  genmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.IPv4Route.Genmask)
}
inline void IPv4Route::set_genmask(const char* value) {
  
  genmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.IPv4Route.Genmask)
}
inline void IPv4Route::set_genmask(const char* value, size_t size) {
  
  genmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.IPv4Route.Genmask)
}
inline ::std::string* IPv4Route::mutable_genmask() {
  
  // @@protoc_insertion_point(field_mutable:access_point.IPv4Route.Genmask)
  return genmask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPv4Route::release_genmask() {
  // @@protoc_insertion_point(field_release:access_point.IPv4Route.Genmask)
  
  return genmask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_allocated_genmask(::std::string* genmask) {
  if (genmask != NULL) {
    
  } else {
    
  }
  genmask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genmask);
  // @@protoc_insertion_point(field_set_allocated:access_point.IPv4Route.Genmask)
}

// optional string Flags = 4;
inline void IPv4Route::clear_flags() {
  flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPv4Route::flags() const {
  // @@protoc_insertion_point(field_get:access_point.IPv4Route.Flags)
  return flags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_flags(const ::std::string& value) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.IPv4Route.Flags)
}
inline void IPv4Route::set_flags(const char* value) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.IPv4Route.Flags)
}
inline void IPv4Route::set_flags(const char* value, size_t size) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.IPv4Route.Flags)
}
inline ::std::string* IPv4Route::mutable_flags() {
  
  // @@protoc_insertion_point(field_mutable:access_point.IPv4Route.Flags)
  return flags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPv4Route::release_flags() {
  // @@protoc_insertion_point(field_release:access_point.IPv4Route.Flags)
  
  return flags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_allocated_flags(::std::string* flags) {
  if (flags != NULL) {
    
  } else {
    
  }
  flags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flags);
  // @@protoc_insertion_point(field_set_allocated:access_point.IPv4Route.Flags)
}

// optional uint32 Metric = 5;
inline void IPv4Route::clear_metric() {
  metric_ = 0u;
}
inline ::google::protobuf::uint32 IPv4Route::metric() const {
  // @@protoc_insertion_point(field_get:access_point.IPv4Route.Metric)
  return metric_;
}
inline void IPv4Route::set_metric(::google::protobuf::uint32 value) {
  
  metric_ = value;
  // @@protoc_insertion_point(field_set:access_point.IPv4Route.Metric)
}

// optional uint32 Ref = 6;
inline void IPv4Route::clear_ref() {
  ref_ = 0u;
}
inline ::google::protobuf::uint32 IPv4Route::ref() const {
  // @@protoc_insertion_point(field_get:access_point.IPv4Route.Ref)
  return ref_;
}
inline void IPv4Route::set_ref(::google::protobuf::uint32 value) {
  
  ref_ = value;
  // @@protoc_insertion_point(field_set:access_point.IPv4Route.Ref)
}

// optional uint32 Use = 7;
inline void IPv4Route::clear_use() {
  use_ = 0u;
}
inline ::google::protobuf::uint32 IPv4Route::use() const {
  // @@protoc_insertion_point(field_get:access_point.IPv4Route.Use)
  return use_;
}
inline void IPv4Route::set_use(::google::protobuf::uint32 value) {
  
  use_ = value;
  // @@protoc_insertion_point(field_set:access_point.IPv4Route.Use)
}

// optional string Iface = 8;
inline void IPv4Route::clear_iface() {
  iface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPv4Route::iface() const {
  // @@protoc_insertion_point(field_get:access_point.IPv4Route.Iface)
  return iface_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_iface(const ::std::string& value) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.IPv4Route.Iface)
}
inline void IPv4Route::set_iface(const char* value) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.IPv4Route.Iface)
}
inline void IPv4Route::set_iface(const char* value, size_t size) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.IPv4Route.Iface)
}
inline ::std::string* IPv4Route::mutable_iface() {
  
  // @@protoc_insertion_point(field_mutable:access_point.IPv4Route.Iface)
  return iface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPv4Route::release_iface() {
  // @@protoc_insertion_point(field_release:access_point.IPv4Route.Iface)
  
  return iface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4Route::set_allocated_iface(::std::string* iface) {
  if (iface != NULL) {
    
  } else {
    
  }
  iface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iface);
  // @@protoc_insertion_point(field_set_allocated:access_point.IPv4Route.Iface)
}

inline const IPv4Route* IPv4Route::internal_default_instance() {
  return &IPv4Route_default_instance_.get();
}
// -------------------------------------------------------------------

// APRoutesMsgRsp

// optional .access_point.APErrorStatus ErrStatus = 1;
inline bool APRoutesMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void APRoutesMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::access_point::APErrorStatus& APRoutesMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:access_point.APRoutesMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::access_point::APErrorStatus::internal_default_instance();
}
inline ::access_point::APErrorStatus* APRoutesMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::access_point::APErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APRoutesMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::access_point::APErrorStatus* APRoutesMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:access_point.APRoutesMsgRsp.ErrStatus)
  
  ::access_point::APErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void APRoutesMsgRsp::set_allocated_errstatus(::access_point::APErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APRoutesMsgRsp.ErrStatus)
}

// repeated .access_point.IPv4Route IPv4Routes = 2;
inline int APRoutesMsgRsp::ipv4routes_size() const {
  return ipv4routes_.size();
}
inline void APRoutesMsgRsp::clear_ipv4routes() {
  ipv4routes_.Clear();
}
inline const ::access_point::IPv4Route& APRoutesMsgRsp::ipv4routes(int index) const {
  // @@protoc_insertion_point(field_get:access_point.APRoutesMsgRsp.IPv4Routes)
  return ipv4routes_.Get(index);
}
inline ::access_point::IPv4Route* APRoutesMsgRsp::mutable_ipv4routes(int index) {
  // @@protoc_insertion_point(field_mutable:access_point.APRoutesMsgRsp.IPv4Routes)
  return ipv4routes_.Mutable(index);
}
inline ::access_point::IPv4Route* APRoutesMsgRsp::add_ipv4routes() {
  // @@protoc_insertion_point(field_add:access_point.APRoutesMsgRsp.IPv4Routes)
  return ipv4routes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::access_point::IPv4Route >*
APRoutesMsgRsp::mutable_ipv4routes() {
  // @@protoc_insertion_point(field_mutable_list:access_point.APRoutesMsgRsp.IPv4Routes)
  return &ipv4routes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::access_point::IPv4Route >&
APRoutesMsgRsp::ipv4routes() const {
  // @@protoc_insertion_point(field_list:access_point.APRoutesMsgRsp.IPv4Routes)
  return ipv4routes_;
}

inline const APRoutesMsgRsp* APRoutesMsgRsp::internal_default_instance() {
  return &APRoutesMsgRsp_default_instance_.get();
}
// -------------------------------------------------------------------

// MulticastCounter

// optional uint32 TxMcastPkts = 1;
inline void MulticastCounter::clear_txmcastpkts() {
  txmcastpkts_ = 0u;
}
inline ::google::protobuf::uint32 MulticastCounter::txmcastpkts() const {
  // @@protoc_insertion_point(field_get:access_point.MulticastCounter.TxMcastPkts)
  return txmcastpkts_;
}
inline void MulticastCounter::set_txmcastpkts(::google::protobuf::uint32 value) {
  
  txmcastpkts_ = value;
  // @@protoc_insertion_point(field_set:access_point.MulticastCounter.TxMcastPkts)
}

// optional uint64 TxMcastBytes = 2;
inline void MulticastCounter::clear_txmcastbytes() {
  txmcastbytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MulticastCounter::txmcastbytes() const {
  // @@protoc_insertion_point(field_get:access_point.MulticastCounter.TxMcastBytes)
  return txmcastbytes_;
}
inline void MulticastCounter::set_txmcastbytes(::google::protobuf::uint64 value) {
  
  txmcastbytes_ = value;
  // @@protoc_insertion_point(field_set:access_point.MulticastCounter.TxMcastBytes)
}

inline const MulticastCounter* MulticastCounter::internal_default_instance() {
  return &MulticastCounter_default_instance_.get();
}
// -------------------------------------------------------------------

// WLAN

// optional string ID = 1;
inline void WLAN::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WLAN::id() const {
  // @@protoc_insertion_point(field_get:access_point.WLAN.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WLAN::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.WLAN.ID)
}
inline void WLAN::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.WLAN.ID)
}
inline void WLAN::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.WLAN.ID)
}
inline ::std::string* WLAN::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:access_point.WLAN.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WLAN::release_id() {
  // @@protoc_insertion_point(field_release:access_point.WLAN.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WLAN::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:access_point.WLAN.ID)
}

// optional string SSID = 2;
inline void WLAN::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WLAN::ssid() const {
  // @@protoc_insertion_point(field_get:access_point.WLAN.SSID)
  return ssid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WLAN::set_ssid(const ::std::string& value) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.WLAN.SSID)
}
inline void WLAN::set_ssid(const char* value) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.WLAN.SSID)
}
inline void WLAN::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.WLAN.SSID)
}
inline ::std::string* WLAN::mutable_ssid() {
  
  // @@protoc_insertion_point(field_mutable:access_point.WLAN.SSID)
  return ssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WLAN::release_ssid() {
  // @@protoc_insertion_point(field_release:access_point.WLAN.SSID)
  
  return ssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WLAN::set_allocated_ssid(::std::string* ssid) {
  if (ssid != NULL) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:access_point.WLAN.SSID)
}

inline const WLAN* WLAN::internal_default_instance() {
  return &WLAN_default_instance_.get();
}
// -------------------------------------------------------------------

// WLANEntry

// optional .access_point.WLAN Wlan = 1;
inline bool WLANEntry::has_wlan() const {
  return this != internal_default_instance() && wlan_ != NULL;
}
inline void WLANEntry::clear_wlan() {
  if (GetArenaNoVirtual() == NULL && wlan_ != NULL) delete wlan_;
  wlan_ = NULL;
}
inline const ::access_point::WLAN& WLANEntry::wlan() const {
  // @@protoc_insertion_point(field_get:access_point.WLANEntry.Wlan)
  return wlan_ != NULL ? *wlan_
                         : *::access_point::WLAN::internal_default_instance();
}
inline ::access_point::WLAN* WLANEntry::mutable_wlan() {
  
  if (wlan_ == NULL) {
    wlan_ = new ::access_point::WLAN;
  }
  // @@protoc_insertion_point(field_mutable:access_point.WLANEntry.Wlan)
  return wlan_;
}
inline ::access_point::WLAN* WLANEntry::release_wlan() {
  // @@protoc_insertion_point(field_release:access_point.WLANEntry.Wlan)
  
  ::access_point::WLAN* temp = wlan_;
  wlan_ = NULL;
  return temp;
}
inline void WLANEntry::set_allocated_wlan(::access_point::WLAN* wlan) {
  delete wlan_;
  wlan_ = wlan;
  if (wlan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.WLANEntry.Wlan)
}

// optional uint32 RadioIndex = 2;
inline void WLANEntry::clear_radioindex() {
  radioindex_ = 0u;
}
inline ::google::protobuf::uint32 WLANEntry::radioindex() const {
  // @@protoc_insertion_point(field_get:access_point.WLANEntry.RadioIndex)
  return radioindex_;
}
inline void WLANEntry::set_radioindex(::google::protobuf::uint32 value) {
  
  radioindex_ = value;
  // @@protoc_insertion_point(field_set:access_point.WLANEntry.RadioIndex)
}

// optional string BSSID = 3;
inline void WLANEntry::clear_bssid() {
  bssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WLANEntry::bssid() const {
  // @@protoc_insertion_point(field_get:access_point.WLANEntry.BSSID)
  return bssid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WLANEntry::set_bssid(const ::std::string& value) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.WLANEntry.BSSID)
}
inline void WLANEntry::set_bssid(const char* value) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.WLANEntry.BSSID)
}
inline void WLANEntry::set_bssid(const char* value, size_t size) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.WLANEntry.BSSID)
}
inline ::std::string* WLANEntry::mutable_bssid() {
  
  // @@protoc_insertion_point(field_mutable:access_point.WLANEntry.BSSID)
  return bssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WLANEntry::release_bssid() {
  // @@protoc_insertion_point(field_release:access_point.WLANEntry.BSSID)
  
  return bssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WLANEntry::set_allocated_bssid(::std::string* bssid) {
  if (bssid != NULL) {
    
  } else {
    
  }
  bssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bssid);
  // @@protoc_insertion_point(field_set_allocated:access_point.WLANEntry.BSSID)
}

// optional string Dev = 4;
inline void WLANEntry::clear_dev() {
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WLANEntry::dev() const {
  // @@protoc_insertion_point(field_get:access_point.WLANEntry.Dev)
  return dev_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WLANEntry::set_dev(const ::std::string& value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.WLANEntry.Dev)
}
inline void WLANEntry::set_dev(const char* value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.WLANEntry.Dev)
}
inline void WLANEntry::set_dev(const char* value, size_t size) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.WLANEntry.Dev)
}
inline ::std::string* WLANEntry::mutable_dev() {
  
  // @@protoc_insertion_point(field_mutable:access_point.WLANEntry.Dev)
  return dev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WLANEntry::release_dev() {
  // @@protoc_insertion_point(field_release:access_point.WLANEntry.Dev)
  
  return dev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WLANEntry::set_allocated_dev(::std::string* dev) {
  if (dev != NULL) {
    
  } else {
    
  }
  dev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev);
  // @@protoc_insertion_point(field_set_allocated:access_point.WLANEntry.Dev)
}

// optional int32 NumClients = 5;
inline void WLANEntry::clear_numclients() {
  numclients_ = 0;
}
inline ::google::protobuf::int32 WLANEntry::numclients() const {
  // @@protoc_insertion_point(field_get:access_point.WLANEntry.NumClients)
  return numclients_;
}
inline void WLANEntry::set_numclients(::google::protobuf::int32 value) {
  
  numclients_ = value;
  // @@protoc_insertion_point(field_set:access_point.WLANEntry.NumClients)
}

// optional .access_point.MulticastCounter Counter = 6;
inline bool WLANEntry::has_counter() const {
  return this != internal_default_instance() && counter_ != NULL;
}
inline void WLANEntry::clear_counter() {
  if (GetArenaNoVirtual() == NULL && counter_ != NULL) delete counter_;
  counter_ = NULL;
}
inline const ::access_point::MulticastCounter& WLANEntry::counter() const {
  // @@protoc_insertion_point(field_get:access_point.WLANEntry.Counter)
  return counter_ != NULL ? *counter_
                         : *::access_point::MulticastCounter::internal_default_instance();
}
inline ::access_point::MulticastCounter* WLANEntry::mutable_counter() {
  
  if (counter_ == NULL) {
    counter_ = new ::access_point::MulticastCounter;
  }
  // @@protoc_insertion_point(field_mutable:access_point.WLANEntry.Counter)
  return counter_;
}
inline ::access_point::MulticastCounter* WLANEntry::release_counter() {
  // @@protoc_insertion_point(field_release:access_point.WLANEntry.Counter)
  
  ::access_point::MulticastCounter* temp = counter_;
  counter_ = NULL;
  return temp;
}
inline void WLANEntry::set_allocated_counter(::access_point::MulticastCounter* counter) {
  delete counter_;
  counter_ = counter;
  if (counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.WLANEntry.Counter)
}

inline const WLANEntry* WLANEntry::internal_default_instance() {
  return &WLANEntry_default_instance_.get();
}
// -------------------------------------------------------------------

// APWLANStatsMsgRsp

// optional .access_point.APErrorStatus ErrStatus = 1;
inline bool APWLANStatsMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void APWLANStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::access_point::APErrorStatus& APWLANStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:access_point.APWLANStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::access_point::APErrorStatus::internal_default_instance();
}
inline ::access_point::APErrorStatus* APWLANStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::access_point::APErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APWLANStatsMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::access_point::APErrorStatus* APWLANStatsMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:access_point.APWLANStatsMsgRsp.ErrStatus)
  
  ::access_point::APErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void APWLANStatsMsgRsp::set_allocated_errstatus(::access_point::APErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APWLANStatsMsgRsp.ErrStatus)
}

// repeated .access_point.WLANEntry WLANEntries = 2;
inline int APWLANStatsMsgRsp::wlanentries_size() const {
  return wlanentries_.size();
}
inline void APWLANStatsMsgRsp::clear_wlanentries() {
  wlanentries_.Clear();
}
inline const ::access_point::WLANEntry& APWLANStatsMsgRsp::wlanentries(int index) const {
  // @@protoc_insertion_point(field_get:access_point.APWLANStatsMsgRsp.WLANEntries)
  return wlanentries_.Get(index);
}
inline ::access_point::WLANEntry* APWLANStatsMsgRsp::mutable_wlanentries(int index) {
  // @@protoc_insertion_point(field_mutable:access_point.APWLANStatsMsgRsp.WLANEntries)
  return wlanentries_.Mutable(index);
}
inline ::access_point::WLANEntry* APWLANStatsMsgRsp::add_wlanentries() {
  // @@protoc_insertion_point(field_add:access_point.APWLANStatsMsgRsp.WLANEntries)
  return wlanentries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::access_point::WLANEntry >*
APWLANStatsMsgRsp::mutable_wlanentries() {
  // @@protoc_insertion_point(field_mutable_list:access_point.APWLANStatsMsgRsp.WLANEntries)
  return &wlanentries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::access_point::WLANEntry >&
APWLANStatsMsgRsp::wlanentries() const {
  // @@protoc_insertion_point(field_list:access_point.APWLANStatsMsgRsp.WLANEntries)
  return wlanentries_;
}

inline const APWLANStatsMsgRsp* APWLANStatsMsgRsp::internal_default_instance() {
  return &APWLANStatsMsgRsp_default_instance_.get();
}
// -------------------------------------------------------------------

// RadioUtilization

// optional float All = 1;
inline void RadioUtilization::clear_all() {
  all_ = 0;
}
inline float RadioUtilization::all() const {
  // @@protoc_insertion_point(field_get:access_point.RadioUtilization.All)
  return all_;
}
inline void RadioUtilization::set_all(float value) {
  
  all_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioUtilization.All)
}

// optional float Tx = 2;
inline void RadioUtilization::clear_tx() {
  tx_ = 0;
}
inline float RadioUtilization::tx() const {
  // @@protoc_insertion_point(field_get:access_point.RadioUtilization.Tx)
  return tx_;
}
inline void RadioUtilization::set_tx(float value) {
  
  tx_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioUtilization.Tx)
}

// optional float RxInBSS = 3;
inline void RadioUtilization::clear_rxinbss() {
  rxinbss_ = 0;
}
inline float RadioUtilization::rxinbss() const {
  // @@protoc_insertion_point(field_get:access_point.RadioUtilization.RxInBSS)
  return rxinbss_;
}
inline void RadioUtilization::set_rxinbss(float value) {
  
  rxinbss_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioUtilization.RxInBSS)
}

// optional float RxOtherBSS = 4;
inline void RadioUtilization::clear_rxotherbss() {
  rxotherbss_ = 0;
}
inline float RadioUtilization::rxotherbss() const {
  // @@protoc_insertion_point(field_get:access_point.RadioUtilization.RxOtherBSS)
  return rxotherbss_;
}
inline void RadioUtilization::set_rxotherbss(float value) {
  
  rxotherbss_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioUtilization.RxOtherBSS)
}

// optional float NonWifi = 5;
inline void RadioUtilization::clear_nonwifi() {
  nonwifi_ = 0;
}
inline float RadioUtilization::nonwifi() const {
  // @@protoc_insertion_point(field_get:access_point.RadioUtilization.NonWifi)
  return nonwifi_;
}
inline void RadioUtilization::set_nonwifi(float value) {
  
  nonwifi_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioUtilization.NonWifi)
}

inline const RadioUtilization* RadioUtilization::internal_default_instance() {
  return &RadioUtilization_default_instance_.get();
}
// -------------------------------------------------------------------

// AntennaRSSI

// repeated int32 val = 1;
inline int AntennaRSSI::val_size() const {
  return val_.size();
}
inline void AntennaRSSI::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::int32 AntennaRSSI::val(int index) const {
  // @@protoc_insertion_point(field_get:access_point.AntennaRSSI.val)
  return val_.Get(index);
}
inline void AntennaRSSI::set_val(int index, ::google::protobuf::int32 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:access_point.AntennaRSSI.val)
}
inline void AntennaRSSI::add_val(::google::protobuf::int32 value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:access_point.AntennaRSSI.val)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AntennaRSSI::val() const {
  // @@protoc_insertion_point(field_list:access_point.AntennaRSSI.val)
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AntennaRSSI::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:access_point.AntennaRSSI.val)
  return &val_;
}

inline const AntennaRSSI* AntennaRSSI::internal_default_instance() {
  return &AntennaRSSI_default_instance_.get();
}
// -------------------------------------------------------------------

// RadioCounters

// optional uint64 TxBytes = 1;
inline void RadioCounters::clear_txbytes() {
  txbytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RadioCounters::txbytes() const {
  // @@protoc_insertion_point(field_get:access_point.RadioCounters.TxBytes)
  return txbytes_;
}
inline void RadioCounters::set_txbytes(::google::protobuf::uint64 value) {
  
  txbytes_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioCounters.TxBytes)
}

// optional uint32 TxPkts = 2;
inline void RadioCounters::clear_txpkts() {
  txpkts_ = 0u;
}
inline ::google::protobuf::uint32 RadioCounters::txpkts() const {
  // @@protoc_insertion_point(field_get:access_point.RadioCounters.TxPkts)
  return txpkts_;
}
inline void RadioCounters::set_txpkts(::google::protobuf::uint32 value) {
  
  txpkts_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioCounters.TxPkts)
}

// optional uint32 TxMgmt = 3;
inline void RadioCounters::clear_txmgmt() {
  txmgmt_ = 0u;
}
inline ::google::protobuf::uint32 RadioCounters::txmgmt() const {
  // @@protoc_insertion_point(field_get:access_point.RadioCounters.TxMgmt)
  return txmgmt_;
}
inline void RadioCounters::set_txmgmt(::google::protobuf::uint32 value) {
  
  txmgmt_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioCounters.TxMgmt)
}

// optional uint32 TxErrors = 4;
inline void RadioCounters::clear_txerrors() {
  txerrors_ = 0u;
}
inline ::google::protobuf::uint32 RadioCounters::txerrors() const {
  // @@protoc_insertion_point(field_get:access_point.RadioCounters.TxErrors)
  return txerrors_;
}
inline void RadioCounters::set_txerrors(::google::protobuf::uint32 value) {
  
  txerrors_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioCounters.TxErrors)
}

// optional uint64 RxBytes = 5;
inline void RadioCounters::clear_rxbytes() {
  rxbytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RadioCounters::rxbytes() const {
  // @@protoc_insertion_point(field_get:access_point.RadioCounters.RxBytes)
  return rxbytes_;
}
inline void RadioCounters::set_rxbytes(::google::protobuf::uint64 value) {
  
  rxbytes_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioCounters.RxBytes)
}

// optional uint32 RxPkts = 6;
inline void RadioCounters::clear_rxpkts() {
  rxpkts_ = 0u;
}
inline ::google::protobuf::uint32 RadioCounters::rxpkts() const {
  // @@protoc_insertion_point(field_get:access_point.RadioCounters.RxPkts)
  return rxpkts_;
}
inline void RadioCounters::set_rxpkts(::google::protobuf::uint32 value) {
  
  rxpkts_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioCounters.RxPkts)
}

// optional uint32 RxMgmt = 7;
inline void RadioCounters::clear_rxmgmt() {
  rxmgmt_ = 0u;
}
inline ::google::protobuf::uint32 RadioCounters::rxmgmt() const {
  // @@protoc_insertion_point(field_get:access_point.RadioCounters.RxMgmt)
  return rxmgmt_;
}
inline void RadioCounters::set_rxmgmt(::google::protobuf::uint32 value) {
  
  rxmgmt_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioCounters.RxMgmt)
}

// optional uint32 RxErrors = 8;
inline void RadioCounters::clear_rxerrors() {
  rxerrors_ = 0u;
}
inline ::google::protobuf::uint32 RadioCounters::rxerrors() const {
  // @@protoc_insertion_point(field_get:access_point.RadioCounters.RxErrors)
  return rxerrors_;
}
inline void RadioCounters::set_rxerrors(::google::protobuf::uint32 value) {
  
  rxerrors_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioCounters.RxErrors)
}

inline const RadioCounters* RadioCounters::internal_default_instance() {
  return &RadioCounters_default_instance_.get();
}
// -------------------------------------------------------------------

// DfsState

// optional uint32 CacState = 1;
inline void DfsState::clear_cacstate() {
  cacstate_ = 0u;
}
inline ::google::protobuf::uint32 DfsState::cacstate() const {
  // @@protoc_insertion_point(field_get:access_point.DfsState.CacState)
  return cacstate_;
}
inline void DfsState::set_cacstate(::google::protobuf::uint32 value) {
  
  cacstate_ = value;
  // @@protoc_insertion_point(field_set:access_point.DfsState.CacState)
}

// optional bool RadarDetected = 2;
inline void DfsState::clear_radardetected() {
  radardetected_ = false;
}
inline bool DfsState::radardetected() const {
  // @@protoc_insertion_point(field_get:access_point.DfsState.RadarDetected)
  return radardetected_;
}
inline void DfsState::set_radardetected(bool value) {
  
  radardetected_ = value;
  // @@protoc_insertion_point(field_set:access_point.DfsState.RadarDetected)
}

inline const DfsState* DfsState::internal_default_instance() {
  return &DfsState_default_instance_.get();
}
// -------------------------------------------------------------------

// RadioEntry

// optional string Dev = 1;
inline void RadioEntry::clear_dev() {
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadioEntry::dev() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.Dev)
  return dev_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioEntry::set_dev(const ::std::string& value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.RadioEntry.Dev)
}
inline void RadioEntry::set_dev(const char* value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.RadioEntry.Dev)
}
inline void RadioEntry::set_dev(const char* value, size_t size) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.RadioEntry.Dev)
}
inline ::std::string* RadioEntry::mutable_dev() {
  
  // @@protoc_insertion_point(field_mutable:access_point.RadioEntry.Dev)
  return dev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadioEntry::release_dev() {
  // @@protoc_insertion_point(field_release:access_point.RadioEntry.Dev)
  
  return dev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioEntry::set_allocated_dev(::std::string* dev) {
  if (dev != NULL) {
    
  } else {
    
  }
  dev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev);
  // @@protoc_insertion_point(field_set_allocated:access_point.RadioEntry.Dev)
}

// optional string Band = 2;
inline void RadioEntry::clear_band() {
  band_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadioEntry::band() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.Band)
  return band_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioEntry::set_band(const ::std::string& value) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.RadioEntry.Band)
}
inline void RadioEntry::set_band(const char* value) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.RadioEntry.Band)
}
inline void RadioEntry::set_band(const char* value, size_t size) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.RadioEntry.Band)
}
inline ::std::string* RadioEntry::mutable_band() {
  
  // @@protoc_insertion_point(field_mutable:access_point.RadioEntry.Band)
  return band_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadioEntry::release_band() {
  // @@protoc_insertion_point(field_release:access_point.RadioEntry.Band)
  
  return band_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioEntry::set_allocated_band(::std::string* band) {
  if (band != NULL) {
    
  } else {
    
  }
  band_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), band);
  // @@protoc_insertion_point(field_set_allocated:access_point.RadioEntry.Band)
}

// optional uint32 Channel = 3;
inline void RadioEntry::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 RadioEntry::channel() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.Channel)
  return channel_;
}
inline void RadioEntry::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioEntry.Channel)
}

// optional uint32 SecondaryChannel = 4;
inline void RadioEntry::clear_secondarychannel() {
  secondarychannel_ = 0u;
}
inline ::google::protobuf::uint32 RadioEntry::secondarychannel() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.SecondaryChannel)
  return secondarychannel_;
}
inline void RadioEntry::set_secondarychannel(::google::protobuf::uint32 value) {
  
  secondarychannel_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioEntry.SecondaryChannel)
}

// optional uint32 Bandwidth = 5;
inline void RadioEntry::clear_bandwidth() {
  bandwidth_ = 0u;
}
inline ::google::protobuf::uint32 RadioEntry::bandwidth() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.Bandwidth)
  return bandwidth_;
}
inline void RadioEntry::set_bandwidth(::google::protobuf::uint32 value) {
  
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioEntry.Bandwidth)
}

// optional uint32 NoiseFloor = 6;
inline void RadioEntry::clear_noisefloor() {
  noisefloor_ = 0u;
}
inline ::google::protobuf::uint32 RadioEntry::noisefloor() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.NoiseFloor)
  return noisefloor_;
}
inline void RadioEntry::set_noisefloor(::google::protobuf::uint32 value) {
  
  noisefloor_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioEntry.NoiseFloor)
}

// optional uint32 MaxTxPower = 7;
inline void RadioEntry::clear_maxtxpower() {
  maxtxpower_ = 0u;
}
inline ::google::protobuf::uint32 RadioEntry::maxtxpower() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.MaxTxPower)
  return maxtxpower_;
}
inline void RadioEntry::set_maxtxpower(::google::protobuf::uint32 value) {
  
  maxtxpower_ = value;
  // @@protoc_insertion_point(field_set:access_point.RadioEntry.MaxTxPower)
}

// optional .access_point.RadioUtilization Utilization = 8;
inline bool RadioEntry::has_utilization() const {
  return this != internal_default_instance() && utilization_ != NULL;
}
inline void RadioEntry::clear_utilization() {
  if (GetArenaNoVirtual() == NULL && utilization_ != NULL) delete utilization_;
  utilization_ = NULL;
}
inline const ::access_point::RadioUtilization& RadioEntry::utilization() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.Utilization)
  return utilization_ != NULL ? *utilization_
                         : *::access_point::RadioUtilization::internal_default_instance();
}
inline ::access_point::RadioUtilization* RadioEntry::mutable_utilization() {
  
  if (utilization_ == NULL) {
    utilization_ = new ::access_point::RadioUtilization;
  }
  // @@protoc_insertion_point(field_mutable:access_point.RadioEntry.Utilization)
  return utilization_;
}
inline ::access_point::RadioUtilization* RadioEntry::release_utilization() {
  // @@protoc_insertion_point(field_release:access_point.RadioEntry.Utilization)
  
  ::access_point::RadioUtilization* temp = utilization_;
  utilization_ = NULL;
  return temp;
}
inline void RadioEntry::set_allocated_utilization(::access_point::RadioUtilization* utilization) {
  delete utilization_;
  utilization_ = utilization;
  if (utilization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.RadioEntry.Utilization)
}

// optional .access_point.AntennaRSSI RSSI = 9;
inline bool RadioEntry::has_rssi() const {
  return this != internal_default_instance() && rssi_ != NULL;
}
inline void RadioEntry::clear_rssi() {
  if (GetArenaNoVirtual() == NULL && rssi_ != NULL) delete rssi_;
  rssi_ = NULL;
}
inline const ::access_point::AntennaRSSI& RadioEntry::rssi() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.RSSI)
  return rssi_ != NULL ? *rssi_
                         : *::access_point::AntennaRSSI::internal_default_instance();
}
inline ::access_point::AntennaRSSI* RadioEntry::mutable_rssi() {
  
  if (rssi_ == NULL) {
    rssi_ = new ::access_point::AntennaRSSI;
  }
  // @@protoc_insertion_point(field_mutable:access_point.RadioEntry.RSSI)
  return rssi_;
}
inline ::access_point::AntennaRSSI* RadioEntry::release_rssi() {
  // @@protoc_insertion_point(field_release:access_point.RadioEntry.RSSI)
  
  ::access_point::AntennaRSSI* temp = rssi_;
  rssi_ = NULL;
  return temp;
}
inline void RadioEntry::set_allocated_rssi(::access_point::AntennaRSSI* rssi) {
  delete rssi_;
  rssi_ = rssi;
  if (rssi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.RadioEntry.RSSI)
}

// optional .access_point.RadioCounters Counter = 10;
inline bool RadioEntry::has_counter() const {
  return this != internal_default_instance() && counter_ != NULL;
}
inline void RadioEntry::clear_counter() {
  if (GetArenaNoVirtual() == NULL && counter_ != NULL) delete counter_;
  counter_ = NULL;
}
inline const ::access_point::RadioCounters& RadioEntry::counter() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.Counter)
  return counter_ != NULL ? *counter_
                         : *::access_point::RadioCounters::internal_default_instance();
}
inline ::access_point::RadioCounters* RadioEntry::mutable_counter() {
  
  if (counter_ == NULL) {
    counter_ = new ::access_point::RadioCounters;
  }
  // @@protoc_insertion_point(field_mutable:access_point.RadioEntry.Counter)
  return counter_;
}
inline ::access_point::RadioCounters* RadioEntry::release_counter() {
  // @@protoc_insertion_point(field_release:access_point.RadioEntry.Counter)
  
  ::access_point::RadioCounters* temp = counter_;
  counter_ = NULL;
  return temp;
}
inline void RadioEntry::set_allocated_counter(::access_point::RadioCounters* counter) {
  delete counter_;
  counter_ = counter;
  if (counter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.RadioEntry.Counter)
}

// optional .access_point.DfsState DFS = 11;
inline bool RadioEntry::has_dfs() const {
  return this != internal_default_instance() && dfs_ != NULL;
}
inline void RadioEntry::clear_dfs() {
  if (GetArenaNoVirtual() == NULL && dfs_ != NULL) delete dfs_;
  dfs_ = NULL;
}
inline const ::access_point::DfsState& RadioEntry::dfs() const {
  // @@protoc_insertion_point(field_get:access_point.RadioEntry.DFS)
  return dfs_ != NULL ? *dfs_
                         : *::access_point::DfsState::internal_default_instance();
}
inline ::access_point::DfsState* RadioEntry::mutable_dfs() {
  
  if (dfs_ == NULL) {
    dfs_ = new ::access_point::DfsState;
  }
  // @@protoc_insertion_point(field_mutable:access_point.RadioEntry.DFS)
  return dfs_;
}
inline ::access_point::DfsState* RadioEntry::release_dfs() {
  // @@protoc_insertion_point(field_release:access_point.RadioEntry.DFS)
  
  ::access_point::DfsState* temp = dfs_;
  dfs_ = NULL;
  return temp;
}
inline void RadioEntry::set_allocated_dfs(::access_point::DfsState* dfs) {
  delete dfs_;
  dfs_ = dfs;
  if (dfs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.RadioEntry.DFS)
}

inline const RadioEntry* RadioEntry::internal_default_instance() {
  return &RadioEntry_default_instance_.get();
}
// -------------------------------------------------------------------

// APRadioStatsMsgRsp

// optional .access_point.APErrorStatus ErrStatus = 1;
inline bool APRadioStatsMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void APRadioStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::access_point::APErrorStatus& APRadioStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:access_point.APRadioStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::access_point::APErrorStatus::internal_default_instance();
}
inline ::access_point::APErrorStatus* APRadioStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::access_point::APErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APRadioStatsMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::access_point::APErrorStatus* APRadioStatsMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:access_point.APRadioStatsMsgRsp.ErrStatus)
  
  ::access_point::APErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void APRadioStatsMsgRsp::set_allocated_errstatus(::access_point::APErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APRadioStatsMsgRsp.ErrStatus)
}

// repeated .access_point.RadioEntry Radios = 2;
inline int APRadioStatsMsgRsp::radios_size() const {
  return radios_.size();
}
inline void APRadioStatsMsgRsp::clear_radios() {
  radios_.Clear();
}
inline const ::access_point::RadioEntry& APRadioStatsMsgRsp::radios(int index) const {
  // @@protoc_insertion_point(field_get:access_point.APRadioStatsMsgRsp.Radios)
  return radios_.Get(index);
}
inline ::access_point::RadioEntry* APRadioStatsMsgRsp::mutable_radios(int index) {
  // @@protoc_insertion_point(field_mutable:access_point.APRadioStatsMsgRsp.Radios)
  return radios_.Mutable(index);
}
inline ::access_point::RadioEntry* APRadioStatsMsgRsp::add_radios() {
  // @@protoc_insertion_point(field_add:access_point.APRadioStatsMsgRsp.Radios)
  return radios_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::access_point::RadioEntry >*
APRadioStatsMsgRsp::mutable_radios() {
  // @@protoc_insertion_point(field_mutable_list:access_point.APRadioStatsMsgRsp.Radios)
  return &radios_;
}
inline const ::google::protobuf::RepeatedPtrField< ::access_point::RadioEntry >&
APRadioStatsMsgRsp::radios() const {
  // @@protoc_insertion_point(field_list:access_point.APRadioStatsMsgRsp.Radios)
  return radios_;
}

inline const APRadioStatsMsgRsp* APRadioStatsMsgRsp::internal_default_instance() {
  return &APRadioStatsMsgRsp_default_instance_.get();
}
// -------------------------------------------------------------------

// APClientEntry

// optional string MAC = 2;
inline void APClientEntry::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& APClientEntry::mac() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.MAC)
  return mac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APClientEntry::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.MAC)
}
inline void APClientEntry::set_mac(const char* value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.APClientEntry.MAC)
}
inline void APClientEntry::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.APClientEntry.MAC)
}
inline ::std::string* APClientEntry::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:access_point.APClientEntry.MAC)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* APClientEntry::release_mac() {
  // @@protoc_insertion_point(field_release:access_point.APClientEntry.MAC)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APClientEntry::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:access_point.APClientEntry.MAC)
}

// optional uint32 RadioIndex = 3;
inline void APClientEntry::clear_radioindex() {
  radioindex_ = 0u;
}
inline ::google::protobuf::uint32 APClientEntry::radioindex() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.RadioIndex)
  return radioindex_;
}
inline void APClientEntry::set_radioindex(::google::protobuf::uint32 value) {
  
  radioindex_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.RadioIndex)
}

// optional string Band = 4;
inline void APClientEntry::clear_band() {
  band_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& APClientEntry::band() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.Band)
  return band_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APClientEntry::set_band(const ::std::string& value) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.Band)
}
inline void APClientEntry::set_band(const char* value) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.APClientEntry.Band)
}
inline void APClientEntry::set_band(const char* value, size_t size) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.APClientEntry.Band)
}
inline ::std::string* APClientEntry::mutable_band() {
  
  // @@protoc_insertion_point(field_mutable:access_point.APClientEntry.Band)
  return band_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* APClientEntry::release_band() {
  // @@protoc_insertion_point(field_release:access_point.APClientEntry.Band)
  
  return band_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APClientEntry::set_allocated_band(::std::string* band) {
  if (band != NULL) {
    
  } else {
    
  }
  band_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), band);
  // @@protoc_insertion_point(field_set_allocated:access_point.APClientEntry.Band)
}

// optional string BSSID = 5;
inline void APClientEntry::clear_bssid() {
  bssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& APClientEntry::bssid() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.BSSID)
  return bssid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APClientEntry::set_bssid(const ::std::string& value) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.BSSID)
}
inline void APClientEntry::set_bssid(const char* value) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.APClientEntry.BSSID)
}
inline void APClientEntry::set_bssid(const char* value, size_t size) {
  
  bssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.APClientEntry.BSSID)
}
inline ::std::string* APClientEntry::mutable_bssid() {
  
  // @@protoc_insertion_point(field_mutable:access_point.APClientEntry.BSSID)
  return bssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* APClientEntry::release_bssid() {
  // @@protoc_insertion_point(field_release:access_point.APClientEntry.BSSID)
  
  return bssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APClientEntry::set_allocated_bssid(::std::string* bssid) {
  if (bssid != NULL) {
    
  } else {
    
  }
  bssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bssid);
  // @@protoc_insertion_point(field_set_allocated:access_point.APClientEntry.BSSID)
}

// optional .access_point.WLAN Wlan = 6;
inline bool APClientEntry::has_wlan() const {
  return this != internal_default_instance() && wlan_ != NULL;
}
inline void APClientEntry::clear_wlan() {
  if (GetArenaNoVirtual() == NULL && wlan_ != NULL) delete wlan_;
  wlan_ = NULL;
}
inline const ::access_point::WLAN& APClientEntry::wlan() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.Wlan)
  return wlan_ != NULL ? *wlan_
                         : *::access_point::WLAN::internal_default_instance();
}
inline ::access_point::WLAN* APClientEntry::mutable_wlan() {
  
  if (wlan_ == NULL) {
    wlan_ = new ::access_point::WLAN;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APClientEntry.Wlan)
  return wlan_;
}
inline ::access_point::WLAN* APClientEntry::release_wlan() {
  // @@protoc_insertion_point(field_release:access_point.APClientEntry.Wlan)
  
  ::access_point::WLAN* temp = wlan_;
  wlan_ = NULL;
  return temp;
}
inline void APClientEntry::set_allocated_wlan(::access_point::WLAN* wlan) {
  delete wlan_;
  wlan_ = wlan;
  if (wlan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APClientEntry.Wlan)
}

// optional uint32 ConnectedTimeSec = 7;
inline void APClientEntry::clear_connectedtimesec() {
  connectedtimesec_ = 0u;
}
inline ::google::protobuf::uint32 APClientEntry::connectedtimesec() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.ConnectedTimeSec)
  return connectedtimesec_;
}
inline void APClientEntry::set_connectedtimesec(::google::protobuf::uint32 value) {
  
  connectedtimesec_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.ConnectedTimeSec)
}

// optional uint32 InactiveTimeMilliSec = 8;
inline void APClientEntry::clear_inactivetimemillisec() {
  inactivetimemillisec_ = 0u;
}
inline ::google::protobuf::uint32 APClientEntry::inactivetimemillisec() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.InactiveTimeMilliSec)
  return inactivetimemillisec_;
}
inline void APClientEntry::set_inactivetimemillisec(::google::protobuf::uint32 value) {
  
  inactivetimemillisec_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.InactiveTimeMilliSec)
}

// optional int32 RSSI = 9;
inline void APClientEntry::clear_rssi() {
  rssi_ = 0;
}
inline ::google::protobuf::int32 APClientEntry::rssi() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.RSSI)
  return rssi_;
}
inline void APClientEntry::set_rssi(::google::protobuf::int32 value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.RSSI)
}

// repeated int32 AntennaRSSI = 10;
inline int APClientEntry::antennarssi_size() const {
  return antennarssi_.size();
}
inline void APClientEntry::clear_antennarssi() {
  antennarssi_.Clear();
}
inline ::google::protobuf::int32 APClientEntry::antennarssi(int index) const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.AntennaRSSI)
  return antennarssi_.Get(index);
}
inline void APClientEntry::set_antennarssi(int index, ::google::protobuf::int32 value) {
  antennarssi_.Set(index, value);
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.AntennaRSSI)
}
inline void APClientEntry::add_antennarssi(::google::protobuf::int32 value) {
  antennarssi_.Add(value);
  // @@protoc_insertion_point(field_add:access_point.APClientEntry.AntennaRSSI)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
APClientEntry::antennarssi() const {
  // @@protoc_insertion_point(field_list:access_point.APClientEntry.AntennaRSSI)
  return antennarssi_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
APClientEntry::mutable_antennarssi() {
  // @@protoc_insertion_point(field_mutable_list:access_point.APClientEntry.AntennaRSSI)
  return &antennarssi_;
}

// optional int32 AvgRSSI = 11;
inline void APClientEntry::clear_avgrssi() {
  avgrssi_ = 0;
}
inline ::google::protobuf::int32 APClientEntry::avgrssi() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.AvgRSSI)
  return avgrssi_;
}
inline void APClientEntry::set_avgrssi(::google::protobuf::int32 value) {
  
  avgrssi_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.AvgRSSI)
}

// optional int32 TxBitRate = 12;
inline void APClientEntry::clear_txbitrate() {
  txbitrate_ = 0;
}
inline ::google::protobuf::int32 APClientEntry::txbitrate() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.TxBitRate)
  return txbitrate_;
}
inline void APClientEntry::set_txbitrate(::google::protobuf::int32 value) {
  
  txbitrate_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.TxBitRate)
}

// optional uint64 TxUnicastBytes = 13;
inline void APClientEntry::clear_txunicastbytes() {
  txunicastbytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 APClientEntry::txunicastbytes() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.TxUnicastBytes)
  return txunicastbytes_;
}
inline void APClientEntry::set_txunicastbytes(::google::protobuf::uint64 value) {
  
  txunicastbytes_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.TxUnicastBytes)
}

// optional uint32 TxUnicastPkts = 14;
inline void APClientEntry::clear_txunicastpkts() {
  txunicastpkts_ = 0u;
}
inline ::google::protobuf::uint32 APClientEntry::txunicastpkts() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.TxUnicastPkts)
  return txunicastpkts_;
}
inline void APClientEntry::set_txunicastpkts(::google::protobuf::uint32 value) {
  
  txunicastpkts_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.TxUnicastPkts)
}

// optional uint64 RxBytes = 15;
inline void APClientEntry::clear_rxbytes() {
  rxbytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 APClientEntry::rxbytes() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.RxBytes)
  return rxbytes_;
}
inline void APClientEntry::set_rxbytes(::google::protobuf::uint64 value) {
  
  rxbytes_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.RxBytes)
}

// optional uint32 RxPkts = 16;
inline void APClientEntry::clear_rxpkts() {
  rxpkts_ = 0u;
}
inline ::google::protobuf::uint32 APClientEntry::rxpkts() const {
  // @@protoc_insertion_point(field_get:access_point.APClientEntry.RxPkts)
  return rxpkts_;
}
inline void APClientEntry::set_rxpkts(::google::protobuf::uint32 value) {
  
  rxpkts_ = value;
  // @@protoc_insertion_point(field_set:access_point.APClientEntry.RxPkts)
}

inline const APClientEntry* APClientEntry::internal_default_instance() {
  return &APClientEntry_default_instance_.get();
}
// -------------------------------------------------------------------

// APClientStatsMsgRsp

// optional .access_point.APErrorStatus ErrStatus = 1;
inline bool APClientStatsMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void APClientStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::access_point::APErrorStatus& APClientStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:access_point.APClientStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::access_point::APErrorStatus::internal_default_instance();
}
inline ::access_point::APErrorStatus* APClientStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::access_point::APErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APClientStatsMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::access_point::APErrorStatus* APClientStatsMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:access_point.APClientStatsMsgRsp.ErrStatus)
  
  ::access_point::APErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void APClientStatsMsgRsp::set_allocated_errstatus(::access_point::APErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APClientStatsMsgRsp.ErrStatus)
}

// repeated .access_point.APClientEntry Clients = 2;
inline int APClientStatsMsgRsp::clients_size() const {
  return clients_.size();
}
inline void APClientStatsMsgRsp::clear_clients() {
  clients_.Clear();
}
inline const ::access_point::APClientEntry& APClientStatsMsgRsp::clients(int index) const {
  // @@protoc_insertion_point(field_get:access_point.APClientStatsMsgRsp.Clients)
  return clients_.Get(index);
}
inline ::access_point::APClientEntry* APClientStatsMsgRsp::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:access_point.APClientStatsMsgRsp.Clients)
  return clients_.Mutable(index);
}
inline ::access_point::APClientEntry* APClientStatsMsgRsp::add_clients() {
  // @@protoc_insertion_point(field_add:access_point.APClientStatsMsgRsp.Clients)
  return clients_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::access_point::APClientEntry >*
APClientStatsMsgRsp::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:access_point.APClientStatsMsgRsp.Clients)
  return &clients_;
}
inline const ::google::protobuf::RepeatedPtrField< ::access_point::APClientEntry >&
APClientStatsMsgRsp::clients() const {
  // @@protoc_insertion_point(field_list:access_point.APClientStatsMsgRsp.Clients)
  return clients_;
}

inline const APClientStatsMsgRsp* APClientStatsMsgRsp::internal_default_instance() {
  return &APClientStatsMsgRsp_default_instance_.get();
}
// -------------------------------------------------------------------

// APInterfaceEntry

// optional string Name = 1;
inline void APInterfaceEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& APInterfaceEntry::name() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceEntry.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APInterfaceEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:access_point.APInterfaceEntry.Name)
}
inline void APInterfaceEntry::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:access_point.APInterfaceEntry.Name)
}
inline void APInterfaceEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:access_point.APInterfaceEntry.Name)
}
inline ::std::string* APInterfaceEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:access_point.APInterfaceEntry.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* APInterfaceEntry::release_name() {
  // @@protoc_insertion_point(field_release:access_point.APInterfaceEntry.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void APInterfaceEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:access_point.APInterfaceEntry.Name)
}

// optional bool Link = 2;
inline void APInterfaceEntry::clear_link() {
  link_ = false;
}
inline bool APInterfaceEntry::link() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceEntry.Link)
  return link_;
}
inline void APInterfaceEntry::set_link(bool value) {
  
  link_ = value;
  // @@protoc_insertion_point(field_set:access_point.APInterfaceEntry.Link)
}

// optional bool FullDuplex = 3;
inline void APInterfaceEntry::clear_fullduplex() {
  fullduplex_ = false;
}
inline bool APInterfaceEntry::fullduplex() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceEntry.FullDuplex)
  return fullduplex_;
}
inline void APInterfaceEntry::set_fullduplex(bool value) {
  
  fullduplex_ = value;
  // @@protoc_insertion_point(field_set:access_point.APInterfaceEntry.FullDuplex)
}

// optional uint32 Speed = 4;
inline void APInterfaceEntry::clear_speed() {
  speed_ = 0u;
}
inline ::google::protobuf::uint32 APInterfaceEntry::speed() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceEntry.Speed)
  return speed_;
}
inline void APInterfaceEntry::set_speed(::google::protobuf::uint32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:access_point.APInterfaceEntry.Speed)
}

// optional uint64 RxBytes = 5;
inline void APInterfaceEntry::clear_rxbytes() {
  rxbytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 APInterfaceEntry::rxbytes() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceEntry.RxBytes)
  return rxbytes_;
}
inline void APInterfaceEntry::set_rxbytes(::google::protobuf::uint64 value) {
  
  rxbytes_ = value;
  // @@protoc_insertion_point(field_set:access_point.APInterfaceEntry.RxBytes)
}

// optional uint32 RxPkts = 6;
inline void APInterfaceEntry::clear_rxpkts() {
  rxpkts_ = 0u;
}
inline ::google::protobuf::uint32 APInterfaceEntry::rxpkts() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceEntry.RxPkts)
  return rxpkts_;
}
inline void APInterfaceEntry::set_rxpkts(::google::protobuf::uint32 value) {
  
  rxpkts_ = value;
  // @@protoc_insertion_point(field_set:access_point.APInterfaceEntry.RxPkts)
}

// optional uint32 RxDiscards = 7;
inline void APInterfaceEntry::clear_rxdiscards() {
  rxdiscards_ = 0u;
}
inline ::google::protobuf::uint32 APInterfaceEntry::rxdiscards() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceEntry.RxDiscards)
  return rxdiscards_;
}
inline void APInterfaceEntry::set_rxdiscards(::google::protobuf::uint32 value) {
  
  rxdiscards_ = value;
  // @@protoc_insertion_point(field_set:access_point.APInterfaceEntry.RxDiscards)
}

// optional uint64 TxBytes = 8;
inline void APInterfaceEntry::clear_txbytes() {
  txbytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 APInterfaceEntry::txbytes() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceEntry.TxBytes)
  return txbytes_;
}
inline void APInterfaceEntry::set_txbytes(::google::protobuf::uint64 value) {
  
  txbytes_ = value;
  // @@protoc_insertion_point(field_set:access_point.APInterfaceEntry.TxBytes)
}

// optional uint32 TxPkts = 9;
inline void APInterfaceEntry::clear_txpkts() {
  txpkts_ = 0u;
}
inline ::google::protobuf::uint32 APInterfaceEntry::txpkts() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceEntry.TxPkts)
  return txpkts_;
}
inline void APInterfaceEntry::set_txpkts(::google::protobuf::uint32 value) {
  
  txpkts_ = value;
  // @@protoc_insertion_point(field_set:access_point.APInterfaceEntry.TxPkts)
}

inline const APInterfaceEntry* APInterfaceEntry::internal_default_instance() {
  return &APInterfaceEntry_default_instance_.get();
}
// -------------------------------------------------------------------

// APInterfaceStatsMsgRsp

// optional .access_point.APErrorStatus ErrStatus = 1;
inline bool APInterfaceStatsMsgRsp::has_errstatus() const {
  return this != internal_default_instance() && errstatus_ != NULL;
}
inline void APInterfaceStatsMsgRsp::clear_errstatus() {
  if (GetArenaNoVirtual() == NULL && errstatus_ != NULL) delete errstatus_;
  errstatus_ = NULL;
}
inline const ::access_point::APErrorStatus& APInterfaceStatsMsgRsp::errstatus() const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceStatsMsgRsp.ErrStatus)
  return errstatus_ != NULL ? *errstatus_
                         : *::access_point::APErrorStatus::internal_default_instance();
}
inline ::access_point::APErrorStatus* APInterfaceStatsMsgRsp::mutable_errstatus() {
  
  if (errstatus_ == NULL) {
    errstatus_ = new ::access_point::APErrorStatus;
  }
  // @@protoc_insertion_point(field_mutable:access_point.APInterfaceStatsMsgRsp.ErrStatus)
  return errstatus_;
}
inline ::access_point::APErrorStatus* APInterfaceStatsMsgRsp::release_errstatus() {
  // @@protoc_insertion_point(field_release:access_point.APInterfaceStatsMsgRsp.ErrStatus)
  
  ::access_point::APErrorStatus* temp = errstatus_;
  errstatus_ = NULL;
  return temp;
}
inline void APInterfaceStatsMsgRsp::set_allocated_errstatus(::access_point::APErrorStatus* errstatus) {
  delete errstatus_;
  errstatus_ = errstatus;
  if (errstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:access_point.APInterfaceStatsMsgRsp.ErrStatus)
}

// repeated .access_point.APInterfaceEntry Interfaces = 2;
inline int APInterfaceStatsMsgRsp::interfaces_size() const {
  return interfaces_.size();
}
inline void APInterfaceStatsMsgRsp::clear_interfaces() {
  interfaces_.Clear();
}
inline const ::access_point::APInterfaceEntry& APInterfaceStatsMsgRsp::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:access_point.APInterfaceStatsMsgRsp.Interfaces)
  return interfaces_.Get(index);
}
inline ::access_point::APInterfaceEntry* APInterfaceStatsMsgRsp::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:access_point.APInterfaceStatsMsgRsp.Interfaces)
  return interfaces_.Mutable(index);
}
inline ::access_point::APInterfaceEntry* APInterfaceStatsMsgRsp::add_interfaces() {
  // @@protoc_insertion_point(field_add:access_point.APInterfaceStatsMsgRsp.Interfaces)
  return interfaces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::access_point::APInterfaceEntry >*
APInterfaceStatsMsgRsp::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:access_point.APInterfaceStatsMsgRsp.Interfaces)
  return &interfaces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::access_point::APInterfaceEntry >&
APInterfaceStatsMsgRsp::interfaces() const {
  // @@protoc_insertion_point(field_list:access_point.APInterfaceStatsMsgRsp.Interfaces)
  return interfaces_;
}

inline const APInterfaceStatsMsgRsp* APInterfaceStatsMsgRsp::internal_default_instance() {
  return &APInterfaceStatsMsgRsp_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace access_point

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ap_5fstats_2eproto__INCLUDED
