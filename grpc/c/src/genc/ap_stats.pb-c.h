/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ap_stats.proto */

#ifndef PROTOBUF_C_ap_5fstats_2eproto__INCLUDED
#define PROTOBUF_C_ap_5fstats_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ap_common_types.pb-c.h"

typedef struct _Cheetah__APStatsRequest Cheetah__APStatsRequest;
typedef struct _Cheetah__APStatsMsg Cheetah__APStatsMsg;
typedef struct _Cheetah__APSystemStatsMsgRsp Cheetah__APSystemStatsMsgRsp;
typedef struct _Cheetah__MemInfo Cheetah__MemInfo;
typedef struct _Cheetah__SlabInfo Cheetah__SlabInfo;
typedef struct _Cheetah__APMemoryStatsMsgRsp Cheetah__APMemoryStatsMsgRsp;
typedef struct _Cheetah__APDNSStatsMsgRsp Cheetah__APDNSStatsMsgRsp;
typedef struct _Cheetah__IPv4Route Cheetah__IPv4Route;
typedef struct _Cheetah__APRoutingStatsMsgRsp Cheetah__APRoutingStatsMsgRsp;
typedef struct _Cheetah__MulticastCounter Cheetah__MulticastCounter;
typedef struct _Cheetah__WLAN Cheetah__WLAN;
typedef struct _Cheetah__WLANEntry Cheetah__WLANEntry;
typedef struct _Cheetah__APWLANStatsMsgRsp Cheetah__APWLANStatsMsgRsp;
typedef struct _Cheetah__RadioUtilization Cheetah__RadioUtilization;
typedef struct _Cheetah__RadioCounters Cheetah__RadioCounters;
typedef struct _Cheetah__DfsState Cheetah__DfsState;
typedef struct _Cheetah__RadioEntry Cheetah__RadioEntry;
typedef struct _Cheetah__APRadioStatsMsgRsp Cheetah__APRadioStatsMsgRsp;
typedef struct _Cheetah__APClientLegacyRateEntry Cheetah__APClientLegacyRateEntry;
typedef struct _Cheetah__APClientHTVHTRateEntry Cheetah__APClientHTVHTRateEntry;
typedef struct _Cheetah__APClientEntry Cheetah__APClientEntry;
typedef struct _Cheetah__APClientStatsMsgRsp Cheetah__APClientStatsMsgRsp;
typedef struct _Cheetah__APInterfaceEntry Cheetah__APInterfaceEntry;
typedef struct _Cheetah__APInterfaceStatsMsgRsp Cheetah__APInterfaceStatsMsgRsp;
typedef struct _Cheetah__APStatsMsgRsp Cheetah__APStatsMsgRsp;


/* --- enums --- */

typedef enum _Cheetah__APStatsType {
  /*
   *@addtogroup APStatistics
   *@{
   * The type defining the category of statistics to be retrieved
   * /;
   */
  CHEETAH__APSTATS_TYPE__AP_RESERVED = 0,
  /*
   * System level information
   */
  CHEETAH__APSTATS_TYPE__AP_SYSTEM_STATS = 1,
  /*
   * Memory counters
   */
  CHEETAH__APSTATS_TYPE__AP_MEMORY_STATS = 2,
  /*
   * Interface statistics: interface counters, etc
   */
  CHEETAH__APSTATS_TYPE__AP_INTERFACE_STATS = 3,
  /*
   * Routing table
   */
  CHEETAH__APSTATS_TYPE__AP_ROUTING_STATS = 4,
  /*
   * DNS entries
   */
  CHEETAH__APSTATS_TYPE__AP_DNS_STATS = 5,
  /*
   * Radio information
   */
  CHEETAH__APSTATS_TYPE__AP_RADIO_STATS = 6,
  /*
   * WLAN information
   */
  CHEETAH__APSTATS_TYPE__AP_WLAN_STATS = 7,
  /*
   * Wireless Client information
   */
  CHEETAH__APSTATS_TYPE__AP_CLIENT_STATS = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHEETAH__APSTATS_TYPE)
} Cheetah__APStatsType;
/*
 * Minimum TimeInterval allowed (in seconds)
 */
typedef enum _Cheetah__StatsTimeInterval {
  /*
   * Set to 0 if this is a pull operation
   */
  CHEETAH__STATS_TIME_INTERVAL__AP_STATS_UNARY_OPERATION = 0,
  CHEETAH__STATS_TIME_INTERVAL__AP_STATS_ZERO_TIME_INTERVAL = 0,
  /*
   * Minimum requested interval for push notifications
   */
  CHEETAH__STATS_TIME_INTERVAL__AP_STATS_MIN_TIME_INTERVAL = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHEETAH__STATS_TIME_INTERVAL)
} Cheetah__StatsTimeInterval;

/* --- messages --- */

/*
 * Request message for statistics
 */
struct  _Cheetah__APStatsRequest
{
  ProtobufCMessage base;
  /*
   * The type to be retrieved
   */
  Cheetah__APStatsType statstype;
  /*
   * The time interval (cadence) that the server should use to push statistics.
   * If set to 0 the server will respond only once
   * For positive values, the connection will remain open and the server will be
   * pushing statistics of this category every TimeInterval seconds
   */
  uint32_t timeinterval;
};
#define CHEETAH__APSTATS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apstats_request__descriptor) \
    , CHEETAH__APSTATS_TYPE__AP_RESERVED, 0 }


/*
 * Request message for statistics
 */
struct  _Cheetah__APStatsMsg
{
  ProtobufCMessage base;
  /*
   * List of type/interval requests
   */
  size_t n_statsrequest;
  Cheetah__APStatsRequest **statsrequest;
};
#define CHEETAH__APSTATS_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apstats_msg__descriptor) \
    , 0,NULL }


/*
 * System Statistics
 */
struct  _Cheetah__APSystemStatsMsgRsp
{
  ProtobufCMessage base;
  /*
   * AP MAC Address: "5c-5b-35-0e-02-1c"
   */
  char *id;
  /*
   * Uptime since Linux boot, in seconds
   */
  uint32_t uptime;
  /*
   * When these statistics were gathered
   * Absolute time: "2016-07-15T16:18:39.335026717Z"
   */
  char *when;
  /*
   * AP Serial Number
   */
  char *serialnumber;
  /*
   * AP Product ID: AP2800, etc
   */
  char *productid;
};
#define CHEETAH__APSYSTEM_STATS_MSG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apsystem_stats_msg_rsp__descriptor) \
    , (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Data from /proc/meminfo
 */
struct  _Cheetah__MemInfo
{
  ProtobufCMessage base;
  /*
   * Total RAM available to Linux in KB
   */
  uint32_t total_kb;
  /*
   * Free + Buffers + Cached in KB (approximate)
   */
  uint32_t available_kb;
};
#define CHEETAH__MEM_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__mem_info__descriptor) \
    , 0, 0 }


/*
 * Data from /proc/slabinfo
 */
struct  _Cheetah__SlabInfo
{
  ProtobufCMessage base;
  /*
   * Slab's name
   */
  char *name;
  /*
   * Slab's active_objs
   */
  int32_t activeobjs;
  /*
   * Slab's num_objs
   */
  int32_t numobjs;
  /*
   * Slab's objsize
   */
  int32_t objsize;
};
#define CHEETAH__SLAB_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__slab_info__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0 }


/*
 * Memory Statistics
 */
struct  _Cheetah__APMemoryStatsMsgRsp
{
  ProtobufCMessage base;
  /*
   * Data from /proc/meminfo
   */
  Cheetah__MemInfo *procmeminfo;
  /*
   * Top entry from /proc/slabinfo
   */
  Cheetah__SlabInfo *topprocslabinfo;
};
#define CHEETAH__APMEMORY_STATS_MSG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apmemory_stats_msg_rsp__descriptor) \
    , NULL, NULL }


/*
 * Entries from /etc/resolv.conf
 */
struct  _Cheetah__APDNSStatsMsgRsp
{
  ProtobufCMessage base;
  /*
   * Server's IP address
   */
  size_t n_ip;
  char **ip;
};
#define CHEETAH__APDNSSTATS_MSG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apdnsstats_msg_rsp__descriptor) \
    , 0,NULL }


/*
 * IPv4 route entry
 */
struct  _Cheetah__IPv4Route
{
  ProtobufCMessage base;
  /*
   * In the case of the default gateway the Destination is 0.0.0.0/0
   */
  char *destination;
  /*
   * In the case of local subnets the Gateway is empty
   */
  char *gateway;
  /*
   * The netmask for the destinate network
   */
  char *genmask;
  /*
   * Flags
   */
  char *flags;
  /*
   * The distance to the target
   */
  uint32_t metric;
  /*
   * Number of references to this route
   */
  uint32_t ref;
  /*
   * Count of lookups for the route
   */
  uint32_t use;
  /*
   * Interface to which packets for this route will be sent
   */
  char *iface;
};
#define CHEETAH__IPV4_ROUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__ipv4_route__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, (char *)protobuf_c_empty_string }


/*
 * Network routes
 */
struct  _Cheetah__APRoutingStatsMsgRsp
{
  ProtobufCMessage base;
  size_t n_ipv4routes;
  Cheetah__IPv4Route **ipv4routes;
};
#define CHEETAH__APROUTING_STATS_MSG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__aprouting_stats_msg_rsp__descriptor) \
    , 0,NULL }


/*
 * Multicast Counter entry
 */
struct  _Cheetah__MulticastCounter
{
  ProtobufCMessage base;
  /*
   * Both multicast & broadcast
   */
  uint32_t txmcastpkts;
  /*
   * Both multicast & broadcast
   */
  uint64_t txmcastbytes;
};
#define CHEETAH__MULTICAST_COUNTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__multicast_counter__descriptor) \
    , 0, 0 }


/*
 * WLAN header
 */
struct  _Cheetah__WLAN
{
  ProtobufCMessage base;
  /*
   * id of wlan the client is associated with
   * (unambiguous; for computers)
   */
  char *id;
  /*
   * SSID of wlan the client is associated with
   * (ambiguous; for humans)
   */
  char *ssid;
};
#define CHEETAH__WLAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__wlan__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * WLAN Entry
 */
struct  _Cheetah__WLANEntry
{
  ProtobufCMessage base;
  /*
   * wlan info
   */
  Cheetah__WLAN *wlan;
  /*
   * index into the RadioStats array of the radio this WLAN is using
   */
  uint32_t radioindex;
  /*
   * BSSID of this WLAN on that radio
   */
  char *bssid;
  /*
   * name of net_device ("apr0v0")
   */
  char *dev;
  /*
   * number of associated clients on this WLAN on this radio
   */
  int32_t numclients;
  /*
   * Counters
   */
  Cheetah__MulticastCounter *counter;
};
#define CHEETAH__WLANENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__wlanentry__descriptor) \
    , NULL, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, NULL }


/*
 * WLAN statistics
 */
struct  _Cheetah__APWLANStatsMsgRsp
{
  ProtobufCMessage base;
  /*
   * WLAN Entries
   */
  size_t n_wlanentries;
  Cheetah__WLANEntry **wlanentries;
};
#define CHEETAH__APWLANSTATS_MSG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apwlanstats_msg_rsp__descriptor) \
    , 0,NULL }


/*
 * Radio utilization
 */
struct  _Cheetah__RadioUtilization
{
  ProtobufCMessage base;
  /*
   * channel utilization for any reason (wifi or non-wifi)
   * expressed as a percentage between 0 - 1.0
   */
  float all;
  /*
   * channel utilization for transmit by this radio
   * (implicitly InBSS). 0 - 1.0
   */
  float tx;
  /*
   * channel utilization for receive by this radio of packets
   * destined for this radio. 0 - 1.0
   */
  float rxinbss;
  /*
   * channel utilization or receive by this radio of packets
   * destined for other radios. 0 - 1.0
   */
  float rxotherbss;
  /*
   * channel utilization for non-wifi data. 0 - 1.0
   */
  float nonwifi;
};
#define CHEETAH__RADIO_UTILIZATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__radio_utilization__descriptor) \
    , 0, 0, 0, 0, 0 }


/*
 * Radio counters
 */
struct  _Cheetah__RadioCounters
{
  ProtobufCMessage base;
  /*
   * total bytes, including TxMcastBytes
   */
  uint64_t txbytes;
  /*
   * total packets, including TxMcastPkts
   */
  uint32_t txpkts;
  /*
   * management frames
   */
  uint32_t txmgmt;
  /*
   * total tx errors
   */
  uint32_t txerrors;
  /*
   * total bytes, including RxMcastBytes
   */
  uint64_t rxbytes;
  /*
   * total packets, including RxMcastPkts
   */
  uint32_t rxpkts;
  /*
   * management frames
   */
  uint32_t rxmgmt;
  /*
   * total tx errors
   */
  uint32_t rxerrors;
};
#define CHEETAH__RADIO_COUNTERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__radio_counters__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * DFS State
 */
struct  _Cheetah__DfsState
{
  ProtobufCMessage base;
  /*
   * Radio CAC state
   */
  uint32_t cacstate;
  /*
   * true if the radar was detected, false otherwise
   */
  protobuf_c_boolean radardetected;
};
#define CHEETAH__DFS_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__dfs_state__descriptor) \
    , 0, 0 }


/*
 * Radio entry
 */
struct  _Cheetah__RadioEntry
{
  ProtobufCMessage base;
  /*
   * device name ("apr0")
   */
  char *dev;
  /*
   * the radio band - "2.4" or "5"
   */
  char *band;
  /*
   * Wifi channel number
   */
  uint32_t channel;
  /*
   * 0 usually, secondary Wifi channel number in 2.4Ghz
   * or 80+80 second channel block
   */
  uint32_t secondarychannel;
  /*
   * 20Mhz, 40Mhz, ...
   */
  uint32_t bandwidth;
  /*
   * measured by the radio in dBmW
   */
  int32_t noisefloor;
  /*
   * maximum Transmit power dBmW
   */
  uint32_t maxtxpower;
  /*
   * Radio utilization
   */
  Cheetah__RadioUtilization *utilization;
  /*
   * Per Antenna RSSI
   */
  size_t n_antennarssi;
  int32_t *antennarssi;
  /*
   * Radio counters
   */
  Cheetah__RadioCounters *counter;
  /*
   * Per Antenna RSSI
   */
  Cheetah__DfsState *dfs;
};
#define CHEETAH__RADIO_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__radio_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, NULL, 0,NULL, NULL, NULL }


/*
 * AP Radio Statistics
 */
struct  _Cheetah__APRadioStatsMsgRsp
{
  ProtobufCMessage base;
  /*
   * Radio entries
   */
  size_t n_radios;
  Cheetah__RadioEntry **radios;
};
#define CHEETAH__APRADIO_STATS_MSG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apradio_stats_msg_rsp__descriptor) \
    , 0,NULL }


struct  _Cheetah__APClientLegacyRateEntry
{
  ProtobufCMessage base;
  /*
   * displaying format of this entry (Mbps: Rx, Tx, Tx-Retries)
   * legacy rate
   */
  char *mbps;
  /*
   * number of rx packets
   */
  uint32_t rxpkts;
  /*
   * number of tx packets
   */
  uint32_t txpkts;
  /*
   * number of tx retries
   */
  uint32_t txretries;
};
#define CHEETAH__APCLIENT_LEGACY_RATE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apclient_legacy_rate_entry__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0 }


struct  _Cheetah__APClientHTVHTRateEntry
{
  ProtobufCMessage base;
  /*
   * string rate/ss/width
   */
  char *mcsstr;
  /*
   * number of rx packets
   */
  uint32_t rxpkts;
  /*
   * number of rx AMPDUs
   */
  uint32_t rxampdus;
  /*
   * number of tx packets
   */
  uint32_t txpkts;
  /*
   * number of tx AMPDUs
   */
  uint32_t txampdus;
  /*
   * number of tx retries
   */
  uint32_t txretries;
};
#define CHEETAH__APCLIENT_HTVHTRATE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apclient_htvhtrate_entry__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0 }


/*
 * Client entry
 */
struct  _Cheetah__APClientEntry
{
  ProtobufCMessage base;
  /*
   * The client's MAC address
   */
  char *mac;
  /*
   * The client's IP address
   */
  char *ip;
  /*
   * index into the RadioStats array of the radio the client is
   * associated with
   */
  uint32_t radioindex;
  /*
   * wifi band (2.4, 5) the client is associated on
   */
  char *band;
  /*
   * WLAN information
   */
  Cheetah__WLAN *wlan;
  /*
   * note this is in seconds, while the inactive time is in millisec
   */
  uint32_t connectedtimesec;
  /*
   * time since the last transmission from the client
   */
  uint32_t inactivetimemillisec;
  /*
   * of last data transmission from the client
   * (averaged from PerAntennaRSSI)
   */
  int32_t rssi;
  /*
   * Noise Floor
   */
  int32_t nf;
  /*
   * raw RSSIs
   */
  size_t n_antennarssi;
  int32_t *antennarssi;
  /*
   * tx packets
   */
  uint32_t txpackets;
  /*
   * tx management packets
   */
  uint32_t txmgmtpkts;
  /*
   * tx data packets
   */
  uint32_t txdatapkts;
  /*
   * tx data ampuds
   */
  uint32_t txdataampdus;
  /*
   * tx data bytes
   */
  uint64_t txdatabytes;
  /*
   * tx unicast data packets
   */
  uint32_t txunicastdatapkts;
  /*
   * tx failed packets
   */
  uint32_t txfailedpkts;
  /*
   * rate used by last successfull (acked) tx
   */
  uint32_t txbitrate;
  /*
   * rx packets
   */
  uint32_t rxpackets;
  /*
   * rx management packets
   */
  uint32_t rxmgmtpkts;
  /*
   * rx control packets
   */
  uint32_t rxctrlpkts;
  /*
   * rx data packets
   */
  uint32_t rxdatapkts;
  /*
   * rx data ampuds
   */
  uint32_t rxdataampdus;
  /*
   * rx data bytes
   */
  uint64_t rxdatabytes;
  /*
   * rx host ppdu len in bits divided by air_time
   */
  uint32_t rxbitrate;
  /*
   * rx delta data bits since last receive divided by delta time
   */
  uint32_t rxavgbps;
  /*
   * rx data rssi accumulated since last receive divided by delta time
   */
  int32_t rxavgrssi;
  /*
   * rx last received rate
   */
  uint32_t rxlastrate;
  /*
   * legacy rate stats
   */
  size_t n_legacyrates;
  Cheetah__APClientLegacyRateEntry **legacyrates;
  /*
   * ht/vht rate stats
   */
  size_t n_htvhtrates;
  Cheetah__APClientHTVHTRateEntry **htvhtrates;
};
#define CHEETAH__APCLIENT_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apclient_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, NULL, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL }


/*
 * AP Client statistics
 */
struct  _Cheetah__APClientStatsMsgRsp
{
  ProtobufCMessage base;
  /*
   * Client entries
   */
  size_t n_clients;
  Cheetah__APClientEntry **clients;
};
#define CHEETAH__APCLIENT_STATS_MSG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apclient_stats_msg_rsp__descriptor) \
    , 0,NULL }


/*
 * Interface entry
 */
struct  _Cheetah__APInterfaceEntry
{
  ProtobufCMessage base;
  /*
   * name of interface (eth0)
   */
  char *name;
  /*
   * whether the PHY has link
   */
  protobuf_c_boolean link;
  /*
   * full duplex
   */
  protobuf_c_boolean fullduplex;
  /*
   * link speed in units of Mbps (10, 100, 1000, 2500)
   */
  uint32_t speed;
  /*
   * RX bytes
   */
  uint64_t rxbytes;
  /*
   * RX pkts
   */
  uint32_t rxpkts;
  /*
   * RX pkts discarded by forwarding rules, rate limits, ACLs, etc...
   */
  uint32_t rxdiscards;
  /*
   * TX bytes
   */
  uint64_t txbytes;
  /*
   * TX packets
   */
  uint32_t txpkts;
};
#define CHEETAH__APINTERFACE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apinterface_entry__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * AP Interface statistics
 */
struct  _Cheetah__APInterfaceStatsMsgRsp
{
  ProtobufCMessage base;
  /*
   * Interface entries
   */
  size_t n_interfaces;
  Cheetah__APInterfaceEntry **interfaces;
};
#define CHEETAH__APINTERFACE_STATS_MSG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apinterface_stats_msg_rsp__descriptor) \
    , 0,NULL }


typedef enum {
  CHEETAH__APSTATS_MSG_RSP__MSG_RSP__NOT_SET = 0,
  CHEETAH__APSTATS_MSG_RSP__MSG_RSP_SYSTEM_STATS = 2,
  CHEETAH__APSTATS_MSG_RSP__MSG_RSP_MEMORY_STATS = 3,
  CHEETAH__APSTATS_MSG_RSP__MSG_RSP_INTERFACE_STATS = 4,
  CHEETAH__APSTATS_MSG_RSP__MSG_RSP_ROUTING_STATS = 5,
  CHEETAH__APSTATS_MSG_RSP__MSG_RSP_DNSSTATS = 6,
  CHEETAH__APSTATS_MSG_RSP__MSG_RSP_RADIO_STATS = 7,
  CHEETAH__APSTATS_MSG_RSP__MSG_RSP_WLANSTATS = 8,
  CHEETAH__APSTATS_MSG_RSP__MSG_RSP_CLIENT_STATS = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHEETAH__APSTATS_MSG_RSP__MSG_RSP)
} Cheetah__APStatsMsgRsp__MsgRspCase;

/*
 * AP statistics response
 */
struct  _Cheetah__APStatsMsgRsp
{
  ProtobufCMessage base;
  /*
   * Corresponding error code
   */
  Cheetah__APErrorStatus *errstatus;
  Cheetah__APStatsMsgRsp__MsgRspCase msg_rsp_case;
  union {
    Cheetah__APSystemStatsMsgRsp *systemstats;
    Cheetah__APMemoryStatsMsgRsp *memorystats;
    Cheetah__APInterfaceStatsMsgRsp *interfacestats;
    Cheetah__APRoutingStatsMsgRsp *routingstats;
    Cheetah__APDNSStatsMsgRsp *dnsstats;
    Cheetah__APRadioStatsMsgRsp *radiostats;
    Cheetah__APWLANStatsMsgRsp *wlanstats;
    Cheetah__APClientStatsMsgRsp *clientstats;
  };
};
#define CHEETAH__APSTATS_MSG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apstats_msg_rsp__descriptor) \
    , NULL, CHEETAH__APSTATS_MSG_RSP__MSG_RSP__NOT_SET, {0} }


/* Cheetah__APStatsRequest methods */
void   cheetah__apstats_request__init
                     (Cheetah__APStatsRequest         *message);
size_t cheetah__apstats_request__get_packed_size
                     (const Cheetah__APStatsRequest   *message);
size_t cheetah__apstats_request__pack
                     (const Cheetah__APStatsRequest   *message,
                      uint8_t             *out);
size_t cheetah__apstats_request__pack_to_buffer
                     (const Cheetah__APStatsRequest   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APStatsRequest *
       cheetah__apstats_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apstats_request__free_unpacked
                     (Cheetah__APStatsRequest *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APStatsMsg methods */
void   cheetah__apstats_msg__init
                     (Cheetah__APStatsMsg         *message);
size_t cheetah__apstats_msg__get_packed_size
                     (const Cheetah__APStatsMsg   *message);
size_t cheetah__apstats_msg__pack
                     (const Cheetah__APStatsMsg   *message,
                      uint8_t             *out);
size_t cheetah__apstats_msg__pack_to_buffer
                     (const Cheetah__APStatsMsg   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APStatsMsg *
       cheetah__apstats_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apstats_msg__free_unpacked
                     (Cheetah__APStatsMsg *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APSystemStatsMsgRsp methods */
void   cheetah__apsystem_stats_msg_rsp__init
                     (Cheetah__APSystemStatsMsgRsp         *message);
size_t cheetah__apsystem_stats_msg_rsp__get_packed_size
                     (const Cheetah__APSystemStatsMsgRsp   *message);
size_t cheetah__apsystem_stats_msg_rsp__pack
                     (const Cheetah__APSystemStatsMsgRsp   *message,
                      uint8_t             *out);
size_t cheetah__apsystem_stats_msg_rsp__pack_to_buffer
                     (const Cheetah__APSystemStatsMsgRsp   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APSystemStatsMsgRsp *
       cheetah__apsystem_stats_msg_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apsystem_stats_msg_rsp__free_unpacked
                     (Cheetah__APSystemStatsMsgRsp *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__MemInfo methods */
void   cheetah__mem_info__init
                     (Cheetah__MemInfo         *message);
size_t cheetah__mem_info__get_packed_size
                     (const Cheetah__MemInfo   *message);
size_t cheetah__mem_info__pack
                     (const Cheetah__MemInfo   *message,
                      uint8_t             *out);
size_t cheetah__mem_info__pack_to_buffer
                     (const Cheetah__MemInfo   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__MemInfo *
       cheetah__mem_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__mem_info__free_unpacked
                     (Cheetah__MemInfo *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__SlabInfo methods */
void   cheetah__slab_info__init
                     (Cheetah__SlabInfo         *message);
size_t cheetah__slab_info__get_packed_size
                     (const Cheetah__SlabInfo   *message);
size_t cheetah__slab_info__pack
                     (const Cheetah__SlabInfo   *message,
                      uint8_t             *out);
size_t cheetah__slab_info__pack_to_buffer
                     (const Cheetah__SlabInfo   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__SlabInfo *
       cheetah__slab_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__slab_info__free_unpacked
                     (Cheetah__SlabInfo *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APMemoryStatsMsgRsp methods */
void   cheetah__apmemory_stats_msg_rsp__init
                     (Cheetah__APMemoryStatsMsgRsp         *message);
size_t cheetah__apmemory_stats_msg_rsp__get_packed_size
                     (const Cheetah__APMemoryStatsMsgRsp   *message);
size_t cheetah__apmemory_stats_msg_rsp__pack
                     (const Cheetah__APMemoryStatsMsgRsp   *message,
                      uint8_t             *out);
size_t cheetah__apmemory_stats_msg_rsp__pack_to_buffer
                     (const Cheetah__APMemoryStatsMsgRsp   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APMemoryStatsMsgRsp *
       cheetah__apmemory_stats_msg_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apmemory_stats_msg_rsp__free_unpacked
                     (Cheetah__APMemoryStatsMsgRsp *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APDNSStatsMsgRsp methods */
void   cheetah__apdnsstats_msg_rsp__init
                     (Cheetah__APDNSStatsMsgRsp         *message);
size_t cheetah__apdnsstats_msg_rsp__get_packed_size
                     (const Cheetah__APDNSStatsMsgRsp   *message);
size_t cheetah__apdnsstats_msg_rsp__pack
                     (const Cheetah__APDNSStatsMsgRsp   *message,
                      uint8_t             *out);
size_t cheetah__apdnsstats_msg_rsp__pack_to_buffer
                     (const Cheetah__APDNSStatsMsgRsp   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APDNSStatsMsgRsp *
       cheetah__apdnsstats_msg_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apdnsstats_msg_rsp__free_unpacked
                     (Cheetah__APDNSStatsMsgRsp *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__IPv4Route methods */
void   cheetah__ipv4_route__init
                     (Cheetah__IPv4Route         *message);
size_t cheetah__ipv4_route__get_packed_size
                     (const Cheetah__IPv4Route   *message);
size_t cheetah__ipv4_route__pack
                     (const Cheetah__IPv4Route   *message,
                      uint8_t             *out);
size_t cheetah__ipv4_route__pack_to_buffer
                     (const Cheetah__IPv4Route   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__IPv4Route *
       cheetah__ipv4_route__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__ipv4_route__free_unpacked
                     (Cheetah__IPv4Route *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APRoutingStatsMsgRsp methods */
void   cheetah__aprouting_stats_msg_rsp__init
                     (Cheetah__APRoutingStatsMsgRsp         *message);
size_t cheetah__aprouting_stats_msg_rsp__get_packed_size
                     (const Cheetah__APRoutingStatsMsgRsp   *message);
size_t cheetah__aprouting_stats_msg_rsp__pack
                     (const Cheetah__APRoutingStatsMsgRsp   *message,
                      uint8_t             *out);
size_t cheetah__aprouting_stats_msg_rsp__pack_to_buffer
                     (const Cheetah__APRoutingStatsMsgRsp   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APRoutingStatsMsgRsp *
       cheetah__aprouting_stats_msg_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__aprouting_stats_msg_rsp__free_unpacked
                     (Cheetah__APRoutingStatsMsgRsp *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__MulticastCounter methods */
void   cheetah__multicast_counter__init
                     (Cheetah__MulticastCounter         *message);
size_t cheetah__multicast_counter__get_packed_size
                     (const Cheetah__MulticastCounter   *message);
size_t cheetah__multicast_counter__pack
                     (const Cheetah__MulticastCounter   *message,
                      uint8_t             *out);
size_t cheetah__multicast_counter__pack_to_buffer
                     (const Cheetah__MulticastCounter   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__MulticastCounter *
       cheetah__multicast_counter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__multicast_counter__free_unpacked
                     (Cheetah__MulticastCounter *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__WLAN methods */
void   cheetah__wlan__init
                     (Cheetah__WLAN         *message);
size_t cheetah__wlan__get_packed_size
                     (const Cheetah__WLAN   *message);
size_t cheetah__wlan__pack
                     (const Cheetah__WLAN   *message,
                      uint8_t             *out);
size_t cheetah__wlan__pack_to_buffer
                     (const Cheetah__WLAN   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__WLAN *
       cheetah__wlan__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__wlan__free_unpacked
                     (Cheetah__WLAN *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__WLANEntry methods */
void   cheetah__wlanentry__init
                     (Cheetah__WLANEntry         *message);
size_t cheetah__wlanentry__get_packed_size
                     (const Cheetah__WLANEntry   *message);
size_t cheetah__wlanentry__pack
                     (const Cheetah__WLANEntry   *message,
                      uint8_t             *out);
size_t cheetah__wlanentry__pack_to_buffer
                     (const Cheetah__WLANEntry   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__WLANEntry *
       cheetah__wlanentry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__wlanentry__free_unpacked
                     (Cheetah__WLANEntry *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APWLANStatsMsgRsp methods */
void   cheetah__apwlanstats_msg_rsp__init
                     (Cheetah__APWLANStatsMsgRsp         *message);
size_t cheetah__apwlanstats_msg_rsp__get_packed_size
                     (const Cheetah__APWLANStatsMsgRsp   *message);
size_t cheetah__apwlanstats_msg_rsp__pack
                     (const Cheetah__APWLANStatsMsgRsp   *message,
                      uint8_t             *out);
size_t cheetah__apwlanstats_msg_rsp__pack_to_buffer
                     (const Cheetah__APWLANStatsMsgRsp   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APWLANStatsMsgRsp *
       cheetah__apwlanstats_msg_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apwlanstats_msg_rsp__free_unpacked
                     (Cheetah__APWLANStatsMsgRsp *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__RadioUtilization methods */
void   cheetah__radio_utilization__init
                     (Cheetah__RadioUtilization         *message);
size_t cheetah__radio_utilization__get_packed_size
                     (const Cheetah__RadioUtilization   *message);
size_t cheetah__radio_utilization__pack
                     (const Cheetah__RadioUtilization   *message,
                      uint8_t             *out);
size_t cheetah__radio_utilization__pack_to_buffer
                     (const Cheetah__RadioUtilization   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__RadioUtilization *
       cheetah__radio_utilization__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__radio_utilization__free_unpacked
                     (Cheetah__RadioUtilization *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__RadioCounters methods */
void   cheetah__radio_counters__init
                     (Cheetah__RadioCounters         *message);
size_t cheetah__radio_counters__get_packed_size
                     (const Cheetah__RadioCounters   *message);
size_t cheetah__radio_counters__pack
                     (const Cheetah__RadioCounters   *message,
                      uint8_t             *out);
size_t cheetah__radio_counters__pack_to_buffer
                     (const Cheetah__RadioCounters   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__RadioCounters *
       cheetah__radio_counters__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__radio_counters__free_unpacked
                     (Cheetah__RadioCounters *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__DfsState methods */
void   cheetah__dfs_state__init
                     (Cheetah__DfsState         *message);
size_t cheetah__dfs_state__get_packed_size
                     (const Cheetah__DfsState   *message);
size_t cheetah__dfs_state__pack
                     (const Cheetah__DfsState   *message,
                      uint8_t             *out);
size_t cheetah__dfs_state__pack_to_buffer
                     (const Cheetah__DfsState   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__DfsState *
       cheetah__dfs_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__dfs_state__free_unpacked
                     (Cheetah__DfsState *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__RadioEntry methods */
void   cheetah__radio_entry__init
                     (Cheetah__RadioEntry         *message);
size_t cheetah__radio_entry__get_packed_size
                     (const Cheetah__RadioEntry   *message);
size_t cheetah__radio_entry__pack
                     (const Cheetah__RadioEntry   *message,
                      uint8_t             *out);
size_t cheetah__radio_entry__pack_to_buffer
                     (const Cheetah__RadioEntry   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__RadioEntry *
       cheetah__radio_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__radio_entry__free_unpacked
                     (Cheetah__RadioEntry *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APRadioStatsMsgRsp methods */
void   cheetah__apradio_stats_msg_rsp__init
                     (Cheetah__APRadioStatsMsgRsp         *message);
size_t cheetah__apradio_stats_msg_rsp__get_packed_size
                     (const Cheetah__APRadioStatsMsgRsp   *message);
size_t cheetah__apradio_stats_msg_rsp__pack
                     (const Cheetah__APRadioStatsMsgRsp   *message,
                      uint8_t             *out);
size_t cheetah__apradio_stats_msg_rsp__pack_to_buffer
                     (const Cheetah__APRadioStatsMsgRsp   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APRadioStatsMsgRsp *
       cheetah__apradio_stats_msg_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apradio_stats_msg_rsp__free_unpacked
                     (Cheetah__APRadioStatsMsgRsp *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APClientLegacyRateEntry methods */
void   cheetah__apclient_legacy_rate_entry__init
                     (Cheetah__APClientLegacyRateEntry         *message);
size_t cheetah__apclient_legacy_rate_entry__get_packed_size
                     (const Cheetah__APClientLegacyRateEntry   *message);
size_t cheetah__apclient_legacy_rate_entry__pack
                     (const Cheetah__APClientLegacyRateEntry   *message,
                      uint8_t             *out);
size_t cheetah__apclient_legacy_rate_entry__pack_to_buffer
                     (const Cheetah__APClientLegacyRateEntry   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APClientLegacyRateEntry *
       cheetah__apclient_legacy_rate_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apclient_legacy_rate_entry__free_unpacked
                     (Cheetah__APClientLegacyRateEntry *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APClientHTVHTRateEntry methods */
void   cheetah__apclient_htvhtrate_entry__init
                     (Cheetah__APClientHTVHTRateEntry         *message);
size_t cheetah__apclient_htvhtrate_entry__get_packed_size
                     (const Cheetah__APClientHTVHTRateEntry   *message);
size_t cheetah__apclient_htvhtrate_entry__pack
                     (const Cheetah__APClientHTVHTRateEntry   *message,
                      uint8_t             *out);
size_t cheetah__apclient_htvhtrate_entry__pack_to_buffer
                     (const Cheetah__APClientHTVHTRateEntry   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APClientHTVHTRateEntry *
       cheetah__apclient_htvhtrate_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apclient_htvhtrate_entry__free_unpacked
                     (Cheetah__APClientHTVHTRateEntry *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APClientEntry methods */
void   cheetah__apclient_entry__init
                     (Cheetah__APClientEntry         *message);
size_t cheetah__apclient_entry__get_packed_size
                     (const Cheetah__APClientEntry   *message);
size_t cheetah__apclient_entry__pack
                     (const Cheetah__APClientEntry   *message,
                      uint8_t             *out);
size_t cheetah__apclient_entry__pack_to_buffer
                     (const Cheetah__APClientEntry   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APClientEntry *
       cheetah__apclient_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apclient_entry__free_unpacked
                     (Cheetah__APClientEntry *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APClientStatsMsgRsp methods */
void   cheetah__apclient_stats_msg_rsp__init
                     (Cheetah__APClientStatsMsgRsp         *message);
size_t cheetah__apclient_stats_msg_rsp__get_packed_size
                     (const Cheetah__APClientStatsMsgRsp   *message);
size_t cheetah__apclient_stats_msg_rsp__pack
                     (const Cheetah__APClientStatsMsgRsp   *message,
                      uint8_t             *out);
size_t cheetah__apclient_stats_msg_rsp__pack_to_buffer
                     (const Cheetah__APClientStatsMsgRsp   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APClientStatsMsgRsp *
       cheetah__apclient_stats_msg_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apclient_stats_msg_rsp__free_unpacked
                     (Cheetah__APClientStatsMsgRsp *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APInterfaceEntry methods */
void   cheetah__apinterface_entry__init
                     (Cheetah__APInterfaceEntry         *message);
size_t cheetah__apinterface_entry__get_packed_size
                     (const Cheetah__APInterfaceEntry   *message);
size_t cheetah__apinterface_entry__pack
                     (const Cheetah__APInterfaceEntry   *message,
                      uint8_t             *out);
size_t cheetah__apinterface_entry__pack_to_buffer
                     (const Cheetah__APInterfaceEntry   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APInterfaceEntry *
       cheetah__apinterface_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apinterface_entry__free_unpacked
                     (Cheetah__APInterfaceEntry *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APInterfaceStatsMsgRsp methods */
void   cheetah__apinterface_stats_msg_rsp__init
                     (Cheetah__APInterfaceStatsMsgRsp         *message);
size_t cheetah__apinterface_stats_msg_rsp__get_packed_size
                     (const Cheetah__APInterfaceStatsMsgRsp   *message);
size_t cheetah__apinterface_stats_msg_rsp__pack
                     (const Cheetah__APInterfaceStatsMsgRsp   *message,
                      uint8_t             *out);
size_t cheetah__apinterface_stats_msg_rsp__pack_to_buffer
                     (const Cheetah__APInterfaceStatsMsgRsp   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APInterfaceStatsMsgRsp *
       cheetah__apinterface_stats_msg_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apinterface_stats_msg_rsp__free_unpacked
                     (Cheetah__APInterfaceStatsMsgRsp *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APStatsMsgRsp methods */
void   cheetah__apstats_msg_rsp__init
                     (Cheetah__APStatsMsgRsp         *message);
size_t cheetah__apstats_msg_rsp__get_packed_size
                     (const Cheetah__APStatsMsgRsp   *message);
size_t cheetah__apstats_msg_rsp__pack
                     (const Cheetah__APStatsMsgRsp   *message,
                      uint8_t             *out);
size_t cheetah__apstats_msg_rsp__pack_to_buffer
                     (const Cheetah__APStatsMsgRsp   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APStatsMsgRsp *
       cheetah__apstats_msg_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apstats_msg_rsp__free_unpacked
                     (Cheetah__APStatsMsgRsp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cheetah__APStatsRequest_Closure)
                 (const Cheetah__APStatsRequest *message,
                  void *closure_data);
typedef void (*Cheetah__APStatsMsg_Closure)
                 (const Cheetah__APStatsMsg *message,
                  void *closure_data);
typedef void (*Cheetah__APSystemStatsMsgRsp_Closure)
                 (const Cheetah__APSystemStatsMsgRsp *message,
                  void *closure_data);
typedef void (*Cheetah__MemInfo_Closure)
                 (const Cheetah__MemInfo *message,
                  void *closure_data);
typedef void (*Cheetah__SlabInfo_Closure)
                 (const Cheetah__SlabInfo *message,
                  void *closure_data);
typedef void (*Cheetah__APMemoryStatsMsgRsp_Closure)
                 (const Cheetah__APMemoryStatsMsgRsp *message,
                  void *closure_data);
typedef void (*Cheetah__APDNSStatsMsgRsp_Closure)
                 (const Cheetah__APDNSStatsMsgRsp *message,
                  void *closure_data);
typedef void (*Cheetah__IPv4Route_Closure)
                 (const Cheetah__IPv4Route *message,
                  void *closure_data);
typedef void (*Cheetah__APRoutingStatsMsgRsp_Closure)
                 (const Cheetah__APRoutingStatsMsgRsp *message,
                  void *closure_data);
typedef void (*Cheetah__MulticastCounter_Closure)
                 (const Cheetah__MulticastCounter *message,
                  void *closure_data);
typedef void (*Cheetah__WLAN_Closure)
                 (const Cheetah__WLAN *message,
                  void *closure_data);
typedef void (*Cheetah__WLANEntry_Closure)
                 (const Cheetah__WLANEntry *message,
                  void *closure_data);
typedef void (*Cheetah__APWLANStatsMsgRsp_Closure)
                 (const Cheetah__APWLANStatsMsgRsp *message,
                  void *closure_data);
typedef void (*Cheetah__RadioUtilization_Closure)
                 (const Cheetah__RadioUtilization *message,
                  void *closure_data);
typedef void (*Cheetah__RadioCounters_Closure)
                 (const Cheetah__RadioCounters *message,
                  void *closure_data);
typedef void (*Cheetah__DfsState_Closure)
                 (const Cheetah__DfsState *message,
                  void *closure_data);
typedef void (*Cheetah__RadioEntry_Closure)
                 (const Cheetah__RadioEntry *message,
                  void *closure_data);
typedef void (*Cheetah__APRadioStatsMsgRsp_Closure)
                 (const Cheetah__APRadioStatsMsgRsp *message,
                  void *closure_data);
typedef void (*Cheetah__APClientLegacyRateEntry_Closure)
                 (const Cheetah__APClientLegacyRateEntry *message,
                  void *closure_data);
typedef void (*Cheetah__APClientHTVHTRateEntry_Closure)
                 (const Cheetah__APClientHTVHTRateEntry *message,
                  void *closure_data);
typedef void (*Cheetah__APClientEntry_Closure)
                 (const Cheetah__APClientEntry *message,
                  void *closure_data);
typedef void (*Cheetah__APClientStatsMsgRsp_Closure)
                 (const Cheetah__APClientStatsMsgRsp *message,
                  void *closure_data);
typedef void (*Cheetah__APInterfaceEntry_Closure)
                 (const Cheetah__APInterfaceEntry *message,
                  void *closure_data);
typedef void (*Cheetah__APInterfaceStatsMsgRsp_Closure)
                 (const Cheetah__APInterfaceStatsMsgRsp *message,
                  void *closure_data);
typedef void (*Cheetah__APStatsMsgRsp_Closure)
                 (const Cheetah__APStatsMsgRsp *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Cheetah__APStatistics_Service Cheetah__APStatistics_Service;
struct _Cheetah__APStatistics_Service
{
  ProtobufCService base;
  void (*apstats_get)(Cheetah__APStatistics_Service *service,
                      const Cheetah__APStatsMsg *input,
                      Cheetah__APStatsMsgRsp_Closure closure,
                      void *closure_data);
};
typedef void (*Cheetah__APStatistics_ServiceDestroy)(Cheetah__APStatistics_Service *);
void cheetah__apstatistics__init (Cheetah__APStatistics_Service *service,
                                  Cheetah__APStatistics_ServiceDestroy destroy);
#define CHEETAH__APSTATISTICS__BASE_INIT \
    { &cheetah__apstatistics__descriptor, protobuf_c_service_invoke_internal, NULL }
#define CHEETAH__APSTATISTICS__INIT(function_prefix__) \
    { CHEETAH__APSTATISTICS__BASE_INIT,\
      function_prefix__ ## apstats_get  }
void cheetah__apstatistics__apstats_get(ProtobufCService *service,
                                        const Cheetah__APStatsMsg *input,
                                        Cheetah__APStatsMsgRsp_Closure closure,
                                        void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cheetah__apstats_type__descriptor;
extern const ProtobufCEnumDescriptor    cheetah__stats_time_interval__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apstats_request__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apstats_msg__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apsystem_stats_msg_rsp__descriptor;
extern const ProtobufCMessageDescriptor cheetah__mem_info__descriptor;
extern const ProtobufCMessageDescriptor cheetah__slab_info__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apmemory_stats_msg_rsp__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apdnsstats_msg_rsp__descriptor;
extern const ProtobufCMessageDescriptor cheetah__ipv4_route__descriptor;
extern const ProtobufCMessageDescriptor cheetah__aprouting_stats_msg_rsp__descriptor;
extern const ProtobufCMessageDescriptor cheetah__multicast_counter__descriptor;
extern const ProtobufCMessageDescriptor cheetah__wlan__descriptor;
extern const ProtobufCMessageDescriptor cheetah__wlanentry__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apwlanstats_msg_rsp__descriptor;
extern const ProtobufCMessageDescriptor cheetah__radio_utilization__descriptor;
extern const ProtobufCMessageDescriptor cheetah__radio_counters__descriptor;
extern const ProtobufCMessageDescriptor cheetah__dfs_state__descriptor;
extern const ProtobufCMessageDescriptor cheetah__radio_entry__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apradio_stats_msg_rsp__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apclient_legacy_rate_entry__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apclient_htvhtrate_entry__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apclient_entry__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apclient_stats_msg_rsp__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apinterface_entry__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apinterface_stats_msg_rsp__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apstats_msg_rsp__descriptor;
extern const ProtobufCServiceDescriptor cheetah__apstatistics__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ap_5fstats_2eproto__INCLUDED */
