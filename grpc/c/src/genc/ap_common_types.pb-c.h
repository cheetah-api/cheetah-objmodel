/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ap_common_types.proto */

#ifndef PROTOBUF_C_ap_5fcommon_5ftypes_2eproto__INCLUDED
#define PROTOBUF_C_ap_5fcommon_5ftypes_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Cheetah__APErrorStatus Cheetah__APErrorStatus;
typedef struct _Cheetah__APRadio Cheetah__APRadio;
typedef struct _Cheetah__APSsid Cheetah__APSsid;


/* --- enums --- */

typedef enum _Cheetah__APErrorStatus__APErrno {
  /*
   * Success, no errors detected. 0x0.
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_SUCCESS = 0,
  /*
   * Client is not connected.
   * The client is expected to remain connected after init and version
   * validation, RPC calls can fail with this error code otherwise.
   * Refer to RPC APGlobalInitNotif. 0x1
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_NOT_CONNECTED = 1,
  /*
   * Operation must be retried. 0x2
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_EAGAIN = 2,
  /*
   * One or more components does not have sufficient memory. 0x3
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_ENOMEM = 3,
  /*
   * Too many outstanding requests. 0x4
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_EBUSY = 4,
  /*
   * One or more arguments are invalid. 0x5
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_EINVAL = 5,
  /*
   * Unsupported version. 0x6
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_UNSUPPORTED_VER = 6,
  /*
   * Not Available. 0x7
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_NOT_AVAILABLE = 7,
  /*
   * Stream mode not supported. 0x8
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_STREAM_NOT_SUPPORTED = 8,
  /*
   * Operation not supported. 0x9
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_ENOTSUP = 9,
  /*
   * One or more objects is errored:
   * Each object must be individually examined. 0xa
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_SOME_ERR = 10,
  /*
   * Operation Timed out.
   * The result of the operation is undeterministic (success or fail). 0xb
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_TIMEOUT = 11,
  /*
   * Due to some event, the client will no longer receive notification
   * events on this channel. 0xc
   * Such events include:
   * - Notification Session was hijacked by another client.
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_NOTIF_TERM = 12,
  /*
   * Offset for INIT errors. 0x500
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_INIT_START_OFFSET = 1280,
  /*
   * Success, no errors detected - clear state.
   * This error is returned on the first-ever initialization, or,
   * when a fatal event has occured and all previous state was lost. 0x501
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_INIT_STATE_CLEAR = 1281,
  /*
   * Success, no errors detected - previous state fully recovered.
   * This error is returned on a client re-initialization with
   * successful recovery of state. 0x502
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_INIT_STATE_READY = 1282,
  /*
   * Server software incompatible with client software version. 0x503
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_INIT_UNSUPPORTED_VER = 1283,
  /*
   * Initialization request received while server is not ready. 0x504
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_INIT_SERVER_NOT_INITIALIZED = 1284,
  /*
   * Server operational mode change from stream to non-stream
   * or vice-versa failed. 0x505
   */
  CHEETAH__APERROR_STATUS__APERRNO__AP_INIT_SERVER_MODE_CHANGE_FAILED = 1285
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHEETAH__APERROR_STATUS__APERRNO)
} Cheetah__APErrorStatus__APErrno;
/*
 * Registration Operations.
 */
typedef enum _Cheetah__APRegOp {
  /*
   * Reserved. 0x0
   */
  CHEETAH__APREG_OP__AP_REGOP_RESERVED = 0,
  /*
   * Register. 0x1
   */
  CHEETAH__APREG_OP__AP_REGOP_REGISTER = 1,
  /*
   * Un-Register. 0x2
   */
  CHEETAH__APREG_OP__AP_REGOP_UNREGISTER = 2,
  /*
   * End Of File. 0x3
   */
  CHEETAH__APREG_OP__AP_REGOP_EOF = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHEETAH__APREG_OP)
} Cheetah__APRegOp;
/*
 * Object Operations.
 */
typedef enum _Cheetah__APObjectOp {
  /*
   * Reserved. 0x0
   */
  CHEETAH__APOBJECT_OP__AP_OBJOP_RESERVED = 0,
  /*
   * Add. 0x1
   */
  CHEETAH__APOBJECT_OP__AP_OBJOP_ADD = 1,
  /*
   * Update. 0x2
   */
  CHEETAH__APOBJECT_OP__AP_OBJOP_UPDATE = 2,
  /*
   * Delete. 0x3
   */
  CHEETAH__APOBJECT_OP__AP_OBJOP_DELETE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHEETAH__APOBJECT_OP)
} Cheetah__APObjectOp;
/*
 * Notification Operations.
 */
typedef enum _Cheetah__APNotifOp {
  /*
   * Reserved. 0x0
   */
  CHEETAH__APNOTIF_OP__AP_NOTIFOP_RESERVED = 0,
  /*
   * Enable. 0x1
   */
  CHEETAH__APNOTIF_OP__AP_NOTIFOP_ENABLE = 1,
  /*
   * Disable. 0x2
   */
  CHEETAH__APNOTIF_OP__AP_NOTIFOP_DISABLE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHEETAH__APNOTIF_OP)
} Cheetah__APNotifOp;

/* --- messages --- */

/*
 * Status codes, including errors and success codes.
 * All errors are defined below.
 */
struct  _Cheetah__APErrorStatus
{
  ProtobufCMessage base;
  Cheetah__APErrorStatus__APErrno status;
};
#define CHEETAH__APERROR_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__aperror_status__descriptor) \
    , CHEETAH__APERROR_STATUS__APERRNO__AP_SUCCESS }


typedef enum {
  CHEETAH__APRADIO__RADIO__NOT_SET = 0,
  CHEETAH__APRADIO__RADIO_NAME = 1,
  CHEETAH__APRADIO__RADIO_HANDLE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHEETAH__APRADIO__RADIO)
} Cheetah__APRadio__RadioCase;

/*
 * Radio info.
 */
struct  _Cheetah__APRadio
{
  ProtobufCMessage base;
  Cheetah__APRadio__RadioCase radio_case;
  union {
    /*
     * Radio name.
     */
    char *name;
    /*
     * Radio handle. Can be retrieved from Radio API
     */
    uint32_t handle;
  };
};
#define CHEETAH__APRADIO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apradio__descriptor) \
    , CHEETAH__APRADIO__RADIO__NOT_SET, {0} }


typedef enum {
  CHEETAH__APSSID__SSID__NOT_SET = 0,
  CHEETAH__APSSID__SSID_NAME = 1,
  CHEETAH__APSSID__SSID_HANDLE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHEETAH__APSSID__SSID)
} Cheetah__APSsid__SsidCase;

/*
 * Ssid info.
 */
struct  _Cheetah__APSsid
{
  ProtobufCMessage base;
  Cheetah__APSsid__SsidCase ssid_case;
  union {
    /*
     * Ssid name.
     */
    char *name;
    /*
     * Ssid handle. Can be retrieved from Ssid API
     */
    uint32_t handle;
  };
};
#define CHEETAH__APSSID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cheetah__apssid__descriptor) \
    , CHEETAH__APSSID__SSID__NOT_SET, {0} }


/* Cheetah__APErrorStatus methods */
void   cheetah__aperror_status__init
                     (Cheetah__APErrorStatus         *message);
size_t cheetah__aperror_status__get_packed_size
                     (const Cheetah__APErrorStatus   *message);
size_t cheetah__aperror_status__pack
                     (const Cheetah__APErrorStatus   *message,
                      uint8_t             *out);
size_t cheetah__aperror_status__pack_to_buffer
                     (const Cheetah__APErrorStatus   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APErrorStatus *
       cheetah__aperror_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__aperror_status__free_unpacked
                     (Cheetah__APErrorStatus *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APRadio methods */
void   cheetah__apradio__init
                     (Cheetah__APRadio         *message);
size_t cheetah__apradio__get_packed_size
                     (const Cheetah__APRadio   *message);
size_t cheetah__apradio__pack
                     (const Cheetah__APRadio   *message,
                      uint8_t             *out);
size_t cheetah__apradio__pack_to_buffer
                     (const Cheetah__APRadio   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APRadio *
       cheetah__apradio__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apradio__free_unpacked
                     (Cheetah__APRadio *message,
                      ProtobufCAllocator *allocator);
/* Cheetah__APSsid methods */
void   cheetah__apssid__init
                     (Cheetah__APSsid         *message);
size_t cheetah__apssid__get_packed_size
                     (const Cheetah__APSsid   *message);
size_t cheetah__apssid__pack
                     (const Cheetah__APSsid   *message,
                      uint8_t             *out);
size_t cheetah__apssid__pack_to_buffer
                     (const Cheetah__APSsid   *message,
                      ProtobufCBuffer     *buffer);
Cheetah__APSsid *
       cheetah__apssid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cheetah__apssid__free_unpacked
                     (Cheetah__APSsid *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cheetah__APErrorStatus_Closure)
                 (const Cheetah__APErrorStatus *message,
                  void *closure_data);
typedef void (*Cheetah__APRadio_Closure)
                 (const Cheetah__APRadio *message,
                  void *closure_data);
typedef void (*Cheetah__APSsid_Closure)
                 (const Cheetah__APSsid *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    cheetah__apreg_op__descriptor;
extern const ProtobufCEnumDescriptor    cheetah__apobject_op__descriptor;
extern const ProtobufCEnumDescriptor    cheetah__apnotif_op__descriptor;
extern const ProtobufCMessageDescriptor cheetah__aperror_status__descriptor;
extern const ProtobufCEnumDescriptor    cheetah__aperror_status__aperrno__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apradio__descriptor;
extern const ProtobufCMessageDescriptor cheetah__apssid__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ap_5fcommon_5ftypes_2eproto__INCLUDED */
