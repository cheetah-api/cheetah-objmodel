// Code generated by protoc-gen-go.
// source: ap_stats.proto
// DO NOT EDIT!

package access_point

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request message for statistics
type APStatsGetMsg struct {
}

func (m *APStatsGetMsg) Reset()                    { *m = APStatsGetMsg{} }
func (m *APStatsGetMsg) String() string            { return proto.CompactTextString(m) }
func (*APStatsGetMsg) ProtoMessage()               {}
func (*APStatsGetMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// System Statistics
type APSystemStatsMsgRsp struct {
	// Corresponding error code
	ErrStatus *APErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// AP MAC Address: "5c-5b-35-0e-02-1c"
	ID string `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	// Uptime since Linux boot, in seconds
	Uptime uint32 `protobuf:"varint,3,opt,name=Uptime" json:"Uptime,omitempty"`
	// When these statistics were gathered
	// Absolute time: "2016-07-15T16:18:39.335026717Z"
	When string `protobuf:"bytes,4,opt,name=When" json:"When,omitempty"`
}

func (m *APSystemStatsMsgRsp) Reset()                    { *m = APSystemStatsMsgRsp{} }
func (m *APSystemStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APSystemStatsMsgRsp) ProtoMessage()               {}
func (*APSystemStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *APSystemStatsMsgRsp) GetErrStatus() *APErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *APSystemStatsMsgRsp) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *APSystemStatsMsgRsp) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *APSystemStatsMsgRsp) GetWhen() string {
	if m != nil {
		return m.When
	}
	return ""
}

// Data from /proc/meminfo
type MemInfo struct {
	// Total RAM available to Linux in KB
	TotalKB uint32 `protobuf:"varint,1,opt,name=Total_kB,json=TotalKB" json:"Total_kB,omitempty"`
	// Free + Buffers + Cached in KB (approximate)
	AvailableKB uint32 `protobuf:"varint,2,opt,name=Available_kB,json=AvailableKB" json:"Available_kB,omitempty"`
}

func (m *MemInfo) Reset()                    { *m = MemInfo{} }
func (m *MemInfo) String() string            { return proto.CompactTextString(m) }
func (*MemInfo) ProtoMessage()               {}
func (*MemInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *MemInfo) GetTotalKB() uint32 {
	if m != nil {
		return m.TotalKB
	}
	return 0
}

func (m *MemInfo) GetAvailableKB() uint32 {
	if m != nil {
		return m.AvailableKB
	}
	return 0
}

// Data from /proc/slabinfo
type SlabInfo struct {
	// Slab's name
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	// Slab's active_objs
	ActiveObjs int32 `protobuf:"varint,2,opt,name=ActiveObjs" json:"ActiveObjs,omitempty"`
	// Slab's num_objs
	NumObjs int32 `protobuf:"varint,3,opt,name=NumObjs" json:"NumObjs,omitempty"`
	// Slab's objsize
	ObjSize int32 `protobuf:"varint,4,opt,name=ObjSize" json:"ObjSize,omitempty"`
}

func (m *SlabInfo) Reset()                    { *m = SlabInfo{} }
func (m *SlabInfo) String() string            { return proto.CompactTextString(m) }
func (*SlabInfo) ProtoMessage()               {}
func (*SlabInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *SlabInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SlabInfo) GetActiveObjs() int32 {
	if m != nil {
		return m.ActiveObjs
	}
	return 0
}

func (m *SlabInfo) GetNumObjs() int32 {
	if m != nil {
		return m.NumObjs
	}
	return 0
}

func (m *SlabInfo) GetObjSize() int32 {
	if m != nil {
		return m.ObjSize
	}
	return 0
}

// Memory Statistics
type APMemoryStatsMsgRsp struct {
	// Corresponding error code
	ErrStatus *APErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Data from /proc/meminfo
	ProcMemInfo *MemInfo `protobuf:"bytes,2,opt,name=ProcMemInfo" json:"ProcMemInfo,omitempty"`
	// Top entry from /proc/slabinfo
	TopProcSlabInfo *SlabInfo `protobuf:"bytes,3,opt,name=TopProcSlabInfo" json:"TopProcSlabInfo,omitempty"`
}

func (m *APMemoryStatsMsgRsp) Reset()                    { *m = APMemoryStatsMsgRsp{} }
func (m *APMemoryStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APMemoryStatsMsgRsp) ProtoMessage()               {}
func (*APMemoryStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *APMemoryStatsMsgRsp) GetErrStatus() *APErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *APMemoryStatsMsgRsp) GetProcMemInfo() *MemInfo {
	if m != nil {
		return m.ProcMemInfo
	}
	return nil
}

func (m *APMemoryStatsMsgRsp) GetTopProcSlabInfo() *SlabInfo {
	if m != nil {
		return m.TopProcSlabInfo
	}
	return nil
}

// Entries from /etc/resolv.conf
type APDNSServersMsgRsp struct {
	// Corresponding error code
	ErrStatus *APErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Server's IP address
	IP []string `protobuf:"bytes,2,rep,name=IP" json:"IP,omitempty"`
}

func (m *APDNSServersMsgRsp) Reset()                    { *m = APDNSServersMsgRsp{} }
func (m *APDNSServersMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APDNSServersMsgRsp) ProtoMessage()               {}
func (*APDNSServersMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *APDNSServersMsgRsp) GetErrStatus() *APErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *APDNSServersMsgRsp) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

// IPv4 route entry
type IPv4Route struct {
	// In the case of the default gateway the Destination is 0.0.0.0/0
	Destination string `protobuf:"bytes,1,opt,name=Destination" json:"Destination,omitempty"`
	// In the case of local subnets the Gateway is empty
	Gateway string `protobuf:"bytes,2,opt,name=Gateway" json:"Gateway,omitempty"`
	// The netmask for the destinate network
	Genmask string `protobuf:"bytes,3,opt,name=Genmask" json:"Genmask,omitempty"`
	// Flags
	Flags string `protobuf:"bytes,4,opt,name=Flags" json:"Flags,omitempty"`
	// The distance to the target
	Metric uint32 `protobuf:"varint,5,opt,name=Metric" json:"Metric,omitempty"`
	// Number of references to this route
	Ref uint32 `protobuf:"varint,6,opt,name=Ref" json:"Ref,omitempty"`
	// Count of lookups for the route
	Use uint32 `protobuf:"varint,7,opt,name=Use" json:"Use,omitempty"`
	// Interface to which packets for this route will be sent
	Iface string `protobuf:"bytes,8,opt,name=Iface" json:"Iface,omitempty"`
}

func (m *IPv4Route) Reset()                    { *m = IPv4Route{} }
func (m *IPv4Route) String() string            { return proto.CompactTextString(m) }
func (*IPv4Route) ProtoMessage()               {}
func (*IPv4Route) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *IPv4Route) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *IPv4Route) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *IPv4Route) GetGenmask() string {
	if m != nil {
		return m.Genmask
	}
	return ""
}

func (m *IPv4Route) GetFlags() string {
	if m != nil {
		return m.Flags
	}
	return ""
}

func (m *IPv4Route) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *IPv4Route) GetRef() uint32 {
	if m != nil {
		return m.Ref
	}
	return 0
}

func (m *IPv4Route) GetUse() uint32 {
	if m != nil {
		return m.Use
	}
	return 0
}

func (m *IPv4Route) GetIface() string {
	if m != nil {
		return m.Iface
	}
	return ""
}

// Network routes
type APRoutesMsgRsp struct {
	// Corresponding error code
	ErrStatus  *APErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	IPv4Routes []*IPv4Route   `protobuf:"bytes,2,rep,name=IPv4Routes" json:"IPv4Routes,omitempty"`
}

func (m *APRoutesMsgRsp) Reset()                    { *m = APRoutesMsgRsp{} }
func (m *APRoutesMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APRoutesMsgRsp) ProtoMessage()               {}
func (*APRoutesMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *APRoutesMsgRsp) GetErrStatus() *APErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *APRoutesMsgRsp) GetIPv4Routes() []*IPv4Route {
	if m != nil {
		return m.IPv4Routes
	}
	return nil
}

// Multicast Counter entry
type MulticastCounter struct {
	// Both multicast & broadcast
	TxMcastPkts uint32 `protobuf:"varint,1,opt,name=TxMcastPkts" json:"TxMcastPkts,omitempty"`
	// Both multicast & broadcast
	TxMcastBytes uint64 `protobuf:"varint,2,opt,name=TxMcastBytes" json:"TxMcastBytes,omitempty"`
}

func (m *MulticastCounter) Reset()                    { *m = MulticastCounter{} }
func (m *MulticastCounter) String() string            { return proto.CompactTextString(m) }
func (*MulticastCounter) ProtoMessage()               {}
func (*MulticastCounter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *MulticastCounter) GetTxMcastPkts() uint32 {
	if m != nil {
		return m.TxMcastPkts
	}
	return 0
}

func (m *MulticastCounter) GetTxMcastBytes() uint64 {
	if m != nil {
		return m.TxMcastBytes
	}
	return 0
}

// WLAN header
type WLAN struct {
	// id of wlan the client is associated with
	// (unambiguous; for computers)
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// SSID of wlan the client is associated with
	// (ambiguous; for humans)
	SSID string `protobuf:"bytes,2,opt,name=SSID" json:"SSID,omitempty"`
}

func (m *WLAN) Reset()                    { *m = WLAN{} }
func (m *WLAN) String() string            { return proto.CompactTextString(m) }
func (*WLAN) ProtoMessage()               {}
func (*WLAN) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *WLAN) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *WLAN) GetSSID() string {
	if m != nil {
		return m.SSID
	}
	return ""
}

// WLAN Entry
type WLANEntry struct {
	// wlan info
	Wlan *WLAN `protobuf:"bytes,1,opt,name=Wlan" json:"Wlan,omitempty"`
	// index into the RadioStats array of the radio this WLAN is using
	RadioIndex uint32 `protobuf:"varint,2,opt,name=RadioIndex" json:"RadioIndex,omitempty"`
	// BSSID of this WLAN on that radio
	BSSID string `protobuf:"bytes,3,opt,name=BSSID" json:"BSSID,omitempty"`
	// name of net_device ("apr0v0")
	Dev string `protobuf:"bytes,4,opt,name=Dev" json:"Dev,omitempty"`
	// number of associated clients on this WLAN on this radio
	NumClients int32 `protobuf:"varint,5,opt,name=NumClients" json:"NumClients,omitempty"`
	// Counters
	Counter *MulticastCounter `protobuf:"bytes,6,opt,name=Counter" json:"Counter,omitempty"`
}

func (m *WLANEntry) Reset()                    { *m = WLANEntry{} }
func (m *WLANEntry) String() string            { return proto.CompactTextString(m) }
func (*WLANEntry) ProtoMessage()               {}
func (*WLANEntry) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *WLANEntry) GetWlan() *WLAN {
	if m != nil {
		return m.Wlan
	}
	return nil
}

func (m *WLANEntry) GetRadioIndex() uint32 {
	if m != nil {
		return m.RadioIndex
	}
	return 0
}

func (m *WLANEntry) GetBSSID() string {
	if m != nil {
		return m.BSSID
	}
	return ""
}

func (m *WLANEntry) GetDev() string {
	if m != nil {
		return m.Dev
	}
	return ""
}

func (m *WLANEntry) GetNumClients() int32 {
	if m != nil {
		return m.NumClients
	}
	return 0
}

func (m *WLANEntry) GetCounter() *MulticastCounter {
	if m != nil {
		return m.Counter
	}
	return nil
}

// WLAN statistics
type APWLANStatsMsgRsp struct {
	// Corresponding error code
	ErrStatus *APErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// WLAN Entries
	WLANEntries []*WLANEntry `protobuf:"bytes,2,rep,name=WLANEntries" json:"WLANEntries,omitempty"`
}

func (m *APWLANStatsMsgRsp) Reset()                    { *m = APWLANStatsMsgRsp{} }
func (m *APWLANStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APWLANStatsMsgRsp) ProtoMessage()               {}
func (*APWLANStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *APWLANStatsMsgRsp) GetErrStatus() *APErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *APWLANStatsMsgRsp) GetWLANEntries() []*WLANEntry {
	if m != nil {
		return m.WLANEntries
	}
	return nil
}

// Radio utilization
type RadioUtilization struct {
	// channel utilization for any reason (wifi or non-wifi)
	// expressed as a percentage between 0 - 1.0
	All float32 `protobuf:"fixed32,1,opt,name=All" json:"All,omitempty"`
	// channel utilization for transmit by this radio
	// (implicitly InBSS). 0 - 1.0
	Tx float32 `protobuf:"fixed32,2,opt,name=Tx" json:"Tx,omitempty"`
	// channel utilization for receive by this radio of packets
	// destined for this radio. 0 - 1.0
	RxInBSS float32 `protobuf:"fixed32,3,opt,name=RxInBSS" json:"RxInBSS,omitempty"`
	// channel utilization or receive by this radio of packets
	// destined for other radios. 0 - 1.0
	RxOtherBSS float32 `protobuf:"fixed32,4,opt,name=RxOtherBSS" json:"RxOtherBSS,omitempty"`
	// channel utilization for non-wifi data. 0 - 1.0
	NonWifi float32 `protobuf:"fixed32,5,opt,name=NonWifi" json:"NonWifi,omitempty"`
}

func (m *RadioUtilization) Reset()                    { *m = RadioUtilization{} }
func (m *RadioUtilization) String() string            { return proto.CompactTextString(m) }
func (*RadioUtilization) ProtoMessage()               {}
func (*RadioUtilization) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *RadioUtilization) GetAll() float32 {
	if m != nil {
		return m.All
	}
	return 0
}

func (m *RadioUtilization) GetTx() float32 {
	if m != nil {
		return m.Tx
	}
	return 0
}

func (m *RadioUtilization) GetRxInBSS() float32 {
	if m != nil {
		return m.RxInBSS
	}
	return 0
}

func (m *RadioUtilization) GetRxOtherBSS() float32 {
	if m != nil {
		return m.RxOtherBSS
	}
	return 0
}

func (m *RadioUtilization) GetNonWifi() float32 {
	if m != nil {
		return m.NonWifi
	}
	return 0
}

// Radio counters
type RadioCounters struct {
	// total bytes, including TxMcastBytes
	TxBytes uint64 `protobuf:"varint,1,opt,name=TxBytes" json:"TxBytes,omitempty"`
	// total packets, including TxMcastPkts
	TxPkts uint32 `protobuf:"varint,2,opt,name=TxPkts" json:"TxPkts,omitempty"`
	// management frames
	TxMgmt uint32 `protobuf:"varint,3,opt,name=TxMgmt" json:"TxMgmt,omitempty"`
	// total tx errors
	TxErrors uint32 `protobuf:"varint,4,opt,name=TxErrors" json:"TxErrors,omitempty"`
	// total bytes, including RxMcastBytes
	RxBytes uint64 `protobuf:"varint,5,opt,name=RxBytes" json:"RxBytes,omitempty"`
	// total packets, including RxMcastPkts
	RxPkts uint32 `protobuf:"varint,6,opt,name=RxPkts" json:"RxPkts,omitempty"`
	// management frames
	RxMgmt uint32 `protobuf:"varint,7,opt,name=RxMgmt" json:"RxMgmt,omitempty"`
	// total tx errors
	RxErrors uint32 `protobuf:"varint,8,opt,name=RxErrors" json:"RxErrors,omitempty"`
}

func (m *RadioCounters) Reset()                    { *m = RadioCounters{} }
func (m *RadioCounters) String() string            { return proto.CompactTextString(m) }
func (*RadioCounters) ProtoMessage()               {}
func (*RadioCounters) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *RadioCounters) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *RadioCounters) GetTxPkts() uint32 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *RadioCounters) GetTxMgmt() uint32 {
	if m != nil {
		return m.TxMgmt
	}
	return 0
}

func (m *RadioCounters) GetTxErrors() uint32 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *RadioCounters) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *RadioCounters) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *RadioCounters) GetRxMgmt() uint32 {
	if m != nil {
		return m.RxMgmt
	}
	return 0
}

func (m *RadioCounters) GetRxErrors() uint32 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

// DFS State
type DfsState struct {
	// Radio CAC state
	CacState uint32 `protobuf:"varint,1,opt,name=CacState" json:"CacState,omitempty"`
	// true if the radar was detected, false otherwise
	RadarDetected bool `protobuf:"varint,2,opt,name=RadarDetected" json:"RadarDetected,omitempty"`
}

func (m *DfsState) Reset()                    { *m = DfsState{} }
func (m *DfsState) String() string            { return proto.CompactTextString(m) }
func (*DfsState) ProtoMessage()               {}
func (*DfsState) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *DfsState) GetCacState() uint32 {
	if m != nil {
		return m.CacState
	}
	return 0
}

func (m *DfsState) GetRadarDetected() bool {
	if m != nil {
		return m.RadarDetected
	}
	return false
}

// Radio entry
type RadioEntry struct {
	// device name ("apr0")
	Dev string `protobuf:"bytes,1,opt,name=Dev" json:"Dev,omitempty"`
	// the radio band - "2.4" or "5"
	Band string `protobuf:"bytes,2,opt,name=Band" json:"Band,omitempty"`
	// Wifi channel number
	Channel uint32 `protobuf:"varint,3,opt,name=Channel" json:"Channel,omitempty"`
	// 0 usually, secondary Wifi channel number in 2.4Ghz
	// or 80+80 second channel block
	SecondaryChannel uint32 `protobuf:"varint,4,opt,name=SecondaryChannel" json:"SecondaryChannel,omitempty"`
	// 20Mhz, 40Mhz, ...
	Bandwidth uint32 `protobuf:"varint,5,opt,name=Bandwidth" json:"Bandwidth,omitempty"`
	// measured by the radio in dBmW
	NoiseFloor int32 `protobuf:"varint,6,opt,name=NoiseFloor" json:"NoiseFloor,omitempty"`
	// maximum Transmit power dBmW
	MaxTxPower uint32 `protobuf:"varint,7,opt,name=MaxTxPower" json:"MaxTxPower,omitempty"`
	// Radio utilization
	Utilization *RadioUtilization `protobuf:"bytes,8,opt,name=Utilization" json:"Utilization,omitempty"`
	// Per Antenna RSSI
	AntennaRSSI []int32 `protobuf:"varint,9,rep,packed,name=AntennaRSSI" json:"AntennaRSSI,omitempty"`
	// Radio counters
	Counter *RadioCounters `protobuf:"bytes,10,opt,name=Counter" json:"Counter,omitempty"`
	// Per Antenna RSSI
	DFS *DfsState `protobuf:"bytes,11,opt,name=DFS" json:"DFS,omitempty"`
}

func (m *RadioEntry) Reset()                    { *m = RadioEntry{} }
func (m *RadioEntry) String() string            { return proto.CompactTextString(m) }
func (*RadioEntry) ProtoMessage()               {}
func (*RadioEntry) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *RadioEntry) GetDev() string {
	if m != nil {
		return m.Dev
	}
	return ""
}

func (m *RadioEntry) GetBand() string {
	if m != nil {
		return m.Band
	}
	return ""
}

func (m *RadioEntry) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *RadioEntry) GetSecondaryChannel() uint32 {
	if m != nil {
		return m.SecondaryChannel
	}
	return 0
}

func (m *RadioEntry) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *RadioEntry) GetNoiseFloor() int32 {
	if m != nil {
		return m.NoiseFloor
	}
	return 0
}

func (m *RadioEntry) GetMaxTxPower() uint32 {
	if m != nil {
		return m.MaxTxPower
	}
	return 0
}

func (m *RadioEntry) GetUtilization() *RadioUtilization {
	if m != nil {
		return m.Utilization
	}
	return nil
}

func (m *RadioEntry) GetAntennaRSSI() []int32 {
	if m != nil {
		return m.AntennaRSSI
	}
	return nil
}

func (m *RadioEntry) GetCounter() *RadioCounters {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *RadioEntry) GetDFS() *DfsState {
	if m != nil {
		return m.DFS
	}
	return nil
}

// AP Radio Statistics
type APRadioStatsMsgRsp struct {
	// Corresponding error code
	ErrStatus *APErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Radio entries
	Radios []*RadioEntry `protobuf:"bytes,2,rep,name=Radios" json:"Radios,omitempty"`
}

func (m *APRadioStatsMsgRsp) Reset()                    { *m = APRadioStatsMsgRsp{} }
func (m *APRadioStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APRadioStatsMsgRsp) ProtoMessage()               {}
func (*APRadioStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *APRadioStatsMsgRsp) GetErrStatus() *APErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *APRadioStatsMsgRsp) GetRadios() []*RadioEntry {
	if m != nil {
		return m.Radios
	}
	return nil
}

// Client entry
type APClientEntry struct {
	// The client's MAC address
	MAC string `protobuf:"bytes,2,opt,name=MAC" json:"MAC,omitempty"`
	// index into the RadioStats array of the radio the client is
	// associated with
	RadioIndex uint32 `protobuf:"varint,3,opt,name=RadioIndex" json:"RadioIndex,omitempty"`
	// wifi band (2.4, 5) the client is associated on
	Band string `protobuf:"bytes,4,opt,name=Band" json:"Band,omitempty"`
	// WLAN information
	Wlan *WLAN `protobuf:"bytes,6,opt,name=Wlan" json:"Wlan,omitempty"`
	// note this is in seconds, while the inactive time is in millisec
	ConnectedTimeSec uint32 `protobuf:"varint,7,opt,name=ConnectedTimeSec" json:"ConnectedTimeSec,omitempty"`
	// time since the last transmission from the client
	InactiveTimeMilliSec uint32 `protobuf:"varint,8,opt,name=InactiveTimeMilliSec" json:"InactiveTimeMilliSec,omitempty"`
	// of last data transmission from the client
	// (averaged from PerAntennaRSSI)
	RSSI int32 `protobuf:"varint,9,opt,name=RSSI" json:"RSSI,omitempty"`
	// Noise Floor
	NF int32 `protobuf:"varint,10,opt,name=NF" json:"NF,omitempty"`
	// raw RSSIs
	AntennaRSSI []int32 `protobuf:"varint,11,rep,packed,name=AntennaRSSI" json:"AntennaRSSI,omitempty"`
	// rate used by last successfull (acked) tx
	TxBitRate int32 `protobuf:"varint,12,opt,name=TxBitRate" json:"TxBitRate,omitempty"`
	// bytes sent directly to the WC
	// (including the results of mc->uc conversions)
	TxUnicastBytes uint64 `protobuf:"varint,13,opt,name=TxUnicastBytes" json:"TxUnicastBytes,omitempty"`
	// pkts sent directly to the WC
	// (including the results of mc->uc conversions)
	TxUnicastPkts uint32 `protobuf:"varint,14,opt,name=TxUnicastPkts" json:"TxUnicastPkts,omitempty"`
	// total bytes, including RxMcastBytes
	RxBytes uint64 `protobuf:"varint,15,opt,name=RxBytes" json:"RxBytes,omitempty"`
	// total packets, including RxMcastPkts
	RxPkts uint32 `protobuf:"varint,16,opt,name=RxPkts" json:"RxPkts,omitempty"`
}

func (m *APClientEntry) Reset()                    { *m = APClientEntry{} }
func (m *APClientEntry) String() string            { return proto.CompactTextString(m) }
func (*APClientEntry) ProtoMessage()               {}
func (*APClientEntry) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *APClientEntry) GetMAC() string {
	if m != nil {
		return m.MAC
	}
	return ""
}

func (m *APClientEntry) GetRadioIndex() uint32 {
	if m != nil {
		return m.RadioIndex
	}
	return 0
}

func (m *APClientEntry) GetBand() string {
	if m != nil {
		return m.Band
	}
	return ""
}

func (m *APClientEntry) GetWlan() *WLAN {
	if m != nil {
		return m.Wlan
	}
	return nil
}

func (m *APClientEntry) GetConnectedTimeSec() uint32 {
	if m != nil {
		return m.ConnectedTimeSec
	}
	return 0
}

func (m *APClientEntry) GetInactiveTimeMilliSec() uint32 {
	if m != nil {
		return m.InactiveTimeMilliSec
	}
	return 0
}

func (m *APClientEntry) GetRSSI() int32 {
	if m != nil {
		return m.RSSI
	}
	return 0
}

func (m *APClientEntry) GetNF() int32 {
	if m != nil {
		return m.NF
	}
	return 0
}

func (m *APClientEntry) GetAntennaRSSI() []int32 {
	if m != nil {
		return m.AntennaRSSI
	}
	return nil
}

func (m *APClientEntry) GetTxBitRate() int32 {
	if m != nil {
		return m.TxBitRate
	}
	return 0
}

func (m *APClientEntry) GetTxUnicastBytes() uint64 {
	if m != nil {
		return m.TxUnicastBytes
	}
	return 0
}

func (m *APClientEntry) GetTxUnicastPkts() uint32 {
	if m != nil {
		return m.TxUnicastPkts
	}
	return 0
}

func (m *APClientEntry) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *APClientEntry) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

// AP Client statistics
type APClientStatsMsgRsp struct {
	// Corresponding error code
	ErrStatus *APErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Client entries
	Clients []*APClientEntry `protobuf:"bytes,2,rep,name=Clients" json:"Clients,omitempty"`
}

func (m *APClientStatsMsgRsp) Reset()                    { *m = APClientStatsMsgRsp{} }
func (m *APClientStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APClientStatsMsgRsp) ProtoMessage()               {}
func (*APClientStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *APClientStatsMsgRsp) GetErrStatus() *APErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *APClientStatsMsgRsp) GetClients() []*APClientEntry {
	if m != nil {
		return m.Clients
	}
	return nil
}

// Interface entry
type APInterfaceEntry struct {
	// name of interface (eth0)
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	// whether the PHY has link
	Link bool `protobuf:"varint,2,opt,name=Link" json:"Link,omitempty"`
	// full duplex
	FullDuplex bool `protobuf:"varint,3,opt,name=FullDuplex" json:"FullDuplex,omitempty"`
	// link speed in units of Mbps (10, 100, 1000, 2500)
	Speed uint32 `protobuf:"varint,4,opt,name=Speed" json:"Speed,omitempty"`
	// RX bytes
	RxBytes uint64 `protobuf:"varint,5,opt,name=RxBytes" json:"RxBytes,omitempty"`
	// RX pkts
	RxPkts uint32 `protobuf:"varint,6,opt,name=RxPkts" json:"RxPkts,omitempty"`
	// RX pkts discarded by forwarding rules, rate limits, ACLs, etc...
	RxDiscards uint32 `protobuf:"varint,7,opt,name=RxDiscards" json:"RxDiscards,omitempty"`
	// TX bytes
	TxBytes uint64 `protobuf:"varint,8,opt,name=TxBytes" json:"TxBytes,omitempty"`
	// TX packets
	TxPkts uint32 `protobuf:"varint,9,opt,name=TxPkts" json:"TxPkts,omitempty"`
}

func (m *APInterfaceEntry) Reset()                    { *m = APInterfaceEntry{} }
func (m *APInterfaceEntry) String() string            { return proto.CompactTextString(m) }
func (*APInterfaceEntry) ProtoMessage()               {}
func (*APInterfaceEntry) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *APInterfaceEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APInterfaceEntry) GetLink() bool {
	if m != nil {
		return m.Link
	}
	return false
}

func (m *APInterfaceEntry) GetFullDuplex() bool {
	if m != nil {
		return m.FullDuplex
	}
	return false
}

func (m *APInterfaceEntry) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *APInterfaceEntry) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *APInterfaceEntry) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *APInterfaceEntry) GetRxDiscards() uint32 {
	if m != nil {
		return m.RxDiscards
	}
	return 0
}

func (m *APInterfaceEntry) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *APInterfaceEntry) GetTxPkts() uint32 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

// AP Interface statistics
type APInterfaceStatsMsgRsp struct {
	// Corresponding error code
	ErrStatus *APErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Interface entries
	Interfaces []*APInterfaceEntry `protobuf:"bytes,2,rep,name=Interfaces" json:"Interfaces,omitempty"`
}

func (m *APInterfaceStatsMsgRsp) Reset()                    { *m = APInterfaceStatsMsgRsp{} }
func (m *APInterfaceStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APInterfaceStatsMsgRsp) ProtoMessage()               {}
func (*APInterfaceStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *APInterfaceStatsMsgRsp) GetErrStatus() *APErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *APInterfaceStatsMsgRsp) GetInterfaces() []*APInterfaceEntry {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func init() {
	proto.RegisterType((*APStatsGetMsg)(nil), "access_point.APStatsGetMsg")
	proto.RegisterType((*APSystemStatsMsgRsp)(nil), "access_point.APSystemStatsMsgRsp")
	proto.RegisterType((*MemInfo)(nil), "access_point.MemInfo")
	proto.RegisterType((*SlabInfo)(nil), "access_point.SlabInfo")
	proto.RegisterType((*APMemoryStatsMsgRsp)(nil), "access_point.APMemoryStatsMsgRsp")
	proto.RegisterType((*APDNSServersMsgRsp)(nil), "access_point.APDNSServersMsgRsp")
	proto.RegisterType((*IPv4Route)(nil), "access_point.IPv4Route")
	proto.RegisterType((*APRoutesMsgRsp)(nil), "access_point.APRoutesMsgRsp")
	proto.RegisterType((*MulticastCounter)(nil), "access_point.MulticastCounter")
	proto.RegisterType((*WLAN)(nil), "access_point.WLAN")
	proto.RegisterType((*WLANEntry)(nil), "access_point.WLANEntry")
	proto.RegisterType((*APWLANStatsMsgRsp)(nil), "access_point.APWLANStatsMsgRsp")
	proto.RegisterType((*RadioUtilization)(nil), "access_point.RadioUtilization")
	proto.RegisterType((*RadioCounters)(nil), "access_point.RadioCounters")
	proto.RegisterType((*DfsState)(nil), "access_point.DfsState")
	proto.RegisterType((*RadioEntry)(nil), "access_point.RadioEntry")
	proto.RegisterType((*APRadioStatsMsgRsp)(nil), "access_point.APRadioStatsMsgRsp")
	proto.RegisterType((*APClientEntry)(nil), "access_point.APClientEntry")
	proto.RegisterType((*APClientStatsMsgRsp)(nil), "access_point.APClientStatsMsgRsp")
	proto.RegisterType((*APInterfaceEntry)(nil), "access_point.APInterfaceEntry")
	proto.RegisterType((*APInterfaceStatsMsgRsp)(nil), "access_point.APInterfaceStatsMsgRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APStatistics service

type APStatisticsClient interface {
	// Get system level statistics
	APSystemStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APSystemStatsMsgRsp, error)
	// Get memory statistics
	APMemoryStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APMemoryStatsMsgRsp, error)
	// Get DNS servers
	APDNSStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APDNSServersMsgRsp, error)
	// Get routes
	APRoutesStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APRoutesMsgRsp, error)
	// Get radio statistics
	APRadioStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APRadioStatsMsgRsp, error)
	// Get WLAN statistics
	APWLANStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APWLANStatsMsgRsp, error)
	// Get Client statistics
	APClientStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APClientStatsMsgRsp, error)
	// Get Interface statistics
	APInterfaceStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APInterfaceStatsMsgRsp, error)
}

type aPStatisticsClient struct {
	cc *grpc.ClientConn
}

func NewAPStatisticsClient(cc *grpc.ClientConn) APStatisticsClient {
	return &aPStatisticsClient{cc}
}

func (c *aPStatisticsClient) APSystemStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APSystemStatsMsgRsp, error) {
	out := new(APSystemStatsMsgRsp)
	err := grpc.Invoke(ctx, "/access_point.APStatistics/APSystemStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPStatisticsClient) APMemoryStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APMemoryStatsMsgRsp, error) {
	out := new(APMemoryStatsMsgRsp)
	err := grpc.Invoke(ctx, "/access_point.APStatistics/APMemoryStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPStatisticsClient) APDNSStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APDNSServersMsgRsp, error) {
	out := new(APDNSServersMsgRsp)
	err := grpc.Invoke(ctx, "/access_point.APStatistics/APDNSStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPStatisticsClient) APRoutesStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APRoutesMsgRsp, error) {
	out := new(APRoutesMsgRsp)
	err := grpc.Invoke(ctx, "/access_point.APStatistics/APRoutesStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPStatisticsClient) APRadioStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APRadioStatsMsgRsp, error) {
	out := new(APRadioStatsMsgRsp)
	err := grpc.Invoke(ctx, "/access_point.APStatistics/APRadioStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPStatisticsClient) APWLANStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APWLANStatsMsgRsp, error) {
	out := new(APWLANStatsMsgRsp)
	err := grpc.Invoke(ctx, "/access_point.APStatistics/APWLANStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPStatisticsClient) APClientStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APClientStatsMsgRsp, error) {
	out := new(APClientStatsMsgRsp)
	err := grpc.Invoke(ctx, "/access_point.APStatistics/APClientStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPStatisticsClient) APInterfaceStatsGet(ctx context.Context, in *APStatsGetMsg, opts ...grpc.CallOption) (*APInterfaceStatsMsgRsp, error) {
	out := new(APInterfaceStatsMsgRsp)
	err := grpc.Invoke(ctx, "/access_point.APStatistics/APInterfaceStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for APStatistics service

type APStatisticsServer interface {
	// Get system level statistics
	APSystemStatsGet(context.Context, *APStatsGetMsg) (*APSystemStatsMsgRsp, error)
	// Get memory statistics
	APMemoryStatsGet(context.Context, *APStatsGetMsg) (*APMemoryStatsMsgRsp, error)
	// Get DNS servers
	APDNSStatsGet(context.Context, *APStatsGetMsg) (*APDNSServersMsgRsp, error)
	// Get routes
	APRoutesStatsGet(context.Context, *APStatsGetMsg) (*APRoutesMsgRsp, error)
	// Get radio statistics
	APRadioStatsGet(context.Context, *APStatsGetMsg) (*APRadioStatsMsgRsp, error)
	// Get WLAN statistics
	APWLANStatsGet(context.Context, *APStatsGetMsg) (*APWLANStatsMsgRsp, error)
	// Get Client statistics
	APClientStatsGet(context.Context, *APStatsGetMsg) (*APClientStatsMsgRsp, error)
	// Get Interface statistics
	APInterfaceStatsGet(context.Context, *APStatsGetMsg) (*APInterfaceStatsMsgRsp, error)
}

func RegisterAPStatisticsServer(s *grpc.Server, srv APStatisticsServer) {
	s.RegisterService(&_APStatistics_serviceDesc, srv)
}

func _APStatistics_APSystemStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APStatisticsServer).APSystemStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_point.APStatistics/APSystemStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APStatisticsServer).APSystemStatsGet(ctx, req.(*APStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _APStatistics_APMemoryStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APStatisticsServer).APMemoryStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_point.APStatistics/APMemoryStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APStatisticsServer).APMemoryStatsGet(ctx, req.(*APStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _APStatistics_APDNSStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APStatisticsServer).APDNSStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_point.APStatistics/APDNSStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APStatisticsServer).APDNSStatsGet(ctx, req.(*APStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _APStatistics_APRoutesStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APStatisticsServer).APRoutesStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_point.APStatistics/APRoutesStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APStatisticsServer).APRoutesStatsGet(ctx, req.(*APStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _APStatistics_APRadioStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APStatisticsServer).APRadioStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_point.APStatistics/APRadioStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APStatisticsServer).APRadioStatsGet(ctx, req.(*APStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _APStatistics_APWLANStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APStatisticsServer).APWLANStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_point.APStatistics/APWLANStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APStatisticsServer).APWLANStatsGet(ctx, req.(*APStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _APStatistics_APClientStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APStatisticsServer).APClientStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_point.APStatistics/APClientStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APStatisticsServer).APClientStatsGet(ctx, req.(*APStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _APStatistics_APInterfaceStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APStatisticsServer).APInterfaceStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_point.APStatistics/APInterfaceStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APStatisticsServer).APInterfaceStatsGet(ctx, req.(*APStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _APStatistics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "access_point.APStatistics",
	HandlerType: (*APStatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "APSystemStatsGet",
			Handler:    _APStatistics_APSystemStatsGet_Handler,
		},
		{
			MethodName: "APMemoryStatsGet",
			Handler:    _APStatistics_APMemoryStatsGet_Handler,
		},
		{
			MethodName: "APDNSStatsGet",
			Handler:    _APStatistics_APDNSStatsGet_Handler,
		},
		{
			MethodName: "APRoutesStatsGet",
			Handler:    _APStatistics_APRoutesStatsGet_Handler,
		},
		{
			MethodName: "APRadioStatsGet",
			Handler:    _APStatistics_APRadioStatsGet_Handler,
		},
		{
			MethodName: "APWLANStatsGet",
			Handler:    _APStatistics_APWLANStatsGet_Handler,
		},
		{
			MethodName: "APClientStatsGet",
			Handler:    _APStatistics_APClientStatsGet_Handler,
		},
		{
			MethodName: "APInterfaceStatsGet",
			Handler:    _APStatistics_APInterfaceStatsGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ap_stats.proto",
}

func init() { proto.RegisterFile("ap_stats.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4f, 0x6f, 0xdb, 0xc6,
	0x12, 0x07, 0xf5, 0xc7, 0x96, 0x46, 0xfe, 0xa3, 0xb7, 0x2f, 0xc9, 0xd3, 0x4b, 0x83, 0xd4, 0x21,
	0x82, 0xc0, 0xc8, 0x21, 0x28, 0xdc, 0x16, 0x6d, 0x2e, 0x45, 0x24, 0x2b, 0x36, 0x84, 0x44, 0x0a,
	0xb1, 0x94, 0xe1, 0xdc, 0x0c, 0x9a, 0x5a, 0xdb, 0x8c, 0x29, 0x52, 0x20, 0x57, 0x8e, 0x94, 0x5b,
	0x81, 0x02, 0x6d, 0x81, 0xde, 0x7a, 0xec, 0xb9, 0x1f, 0xa4, 0xc7, 0xa2, 0xe7, 0x9e, 0xfa, 0x35,
	0xfa, 0x01, 0x8a, 0x99, 0x5d, 0x52, 0x2b, 0xc9, 0x46, 0x92, 0x42, 0xb7, 0x9d, 0xdf, 0xcc, 0xce,
	0x2e, 0x67, 0x7e, 0x33, 0xbb, 0x4b, 0xd8, 0xf2, 0x46, 0x27, 0xa9, 0xf4, 0x64, 0xfa, 0x64, 0x94,
	0xc4, 0x32, 0x66, 0x1b, 0x9e, 0xef, 0x8b, 0x34, 0x3d, 0x19, 0xc5, 0x41, 0x24, 0xef, 0xde, 0xf6,
	0x46, 0x27, 0x7e, 0x3c, 0x1c, 0xc6, 0xd1, 0x89, 0x9c, 0x8e, 0x84, 0x36, 0xb2, 0xb7, 0x61, 0xb3,
	0xe9, 0xb8, 0x38, 0xeb, 0x50, 0xc8, 0x6e, 0x7a, 0x6e, 0xff, 0x64, 0xc1, 0x7f, 0x9b, 0x8e, 0x3b,
	0x4d, 0xa5, 0x18, 0x12, 0xde, 0x4d, 0xcf, 0x79, 0x3a, 0x62, 0x4f, 0xa1, 0xfa, 0x3c, 0x49, 0x10,
	0x19, 0xa7, 0x0d, 0x6b, 0xc7, 0xda, 0xad, 0xed, 0x7d, 0xf2, 0xc4, 0x5c, 0xe1, 0x49, 0xd3, 0x79,
	0x9e, 0x24, 0xb1, 0x36, 0xe1, 0x33, 0x6b, 0xb6, 0x05, 0x85, 0x4e, 0xbb, 0x51, 0xd8, 0xb1, 0x76,
	0xab, 0xbc, 0xd0, 0x69, 0xb3, 0x3b, 0xb0, 0x76, 0x34, 0x92, 0xc1, 0x50, 0x34, 0x8a, 0x3b, 0xd6,
	0xee, 0x26, 0xd7, 0x12, 0x63, 0x50, 0x3a, 0xbe, 0x10, 0x51, 0xa3, 0x44, 0x96, 0x34, 0xb6, 0x0f,
	0x61, 0xbd, 0x2b, 0x86, 0x9d, 0xe8, 0x2c, 0x66, 0xff, 0x87, 0x4a, 0x3f, 0x96, 0x5e, 0x78, 0x72,
	0xd9, 0xa2, 0x0d, 0x6c, 0xf2, 0x75, 0x92, 0x5f, 0xb4, 0xd8, 0x03, 0xd8, 0x68, 0x5e, 0x79, 0x41,
	0xe8, 0x9d, 0x86, 0x02, 0xd5, 0x05, 0x52, 0xd7, 0x72, 0xec, 0x45, 0xcb, 0x4e, 0xa0, 0xe2, 0x86,
	0xde, 0x29, 0x79, 0x62, 0x50, 0xea, 0x79, 0x43, 0x41, 0x5e, 0xaa, 0x9c, 0xc6, 0xec, 0x3e, 0x40,
	0xd3, 0x97, 0xc1, 0x95, 0x78, 0x75, 0xfa, 0x26, 0x25, 0x07, 0x65, 0x6e, 0x20, 0xac, 0x01, 0xeb,
	0xbd, 0xf1, 0x90, 0x94, 0x45, 0x52, 0x66, 0x22, 0x6a, 0x5e, 0x9d, 0xbe, 0x71, 0x83, 0x77, 0x82,
	0x76, 0x5e, 0xe6, 0x99, 0x68, 0xff, 0x41, 0xb1, 0xec, 0x8a, 0x61, 0x9c, 0x4c, 0x57, 0x14, 0xcb,
	0xaf, 0xa0, 0xe6, 0x24, 0xb1, 0xaf, 0x63, 0x42, 0xfb, 0xac, 0xed, 0xdd, 0x9e, 0x9f, 0xac, 0x95,
	0xdc, 0xb4, 0x64, 0xcf, 0x60, 0xbb, 0x1f, 0x8f, 0x10, 0xc9, 0xc2, 0x40, 0xdf, 0x51, 0xdb, 0xbb,
	0x33, 0x3f, 0x39, 0xd3, 0xf2, 0x45, 0x73, 0xfb, 0x04, 0x58, 0xd3, 0x69, 0xf7, 0x5c, 0x57, 0x24,
	0x57, 0x22, 0x59, 0x11, 0x2f, 0x9c, 0x46, 0x61, 0xa7, 0x48, 0xbc, 0x70, 0xec, 0xdf, 0x2d, 0xa8,
	0x76, 0x9c, 0xab, 0x2f, 0x78, 0x3c, 0x96, 0x82, 0xed, 0x40, 0xad, 0x2d, 0x52, 0x19, 0x44, 0x9e,
	0x0c, 0xe2, 0x48, 0xe7, 0xca, 0x84, 0x30, 0xf0, 0x87, 0x9e, 0x14, 0x6f, 0xbd, 0xa9, 0x26, 0x57,
	0x26, 0x92, 0x46, 0x44, 0x43, 0x2f, 0xbd, 0xa4, 0x8f, 0x44, 0x8d, 0x12, 0xd9, 0x2d, 0x28, 0x1f,
	0x84, 0xde, 0x79, 0xaa, 0x49, 0xa6, 0x04, 0x64, 0x64, 0x57, 0xc8, 0x24, 0xf0, 0x1b, 0x65, 0xc5,
	0x48, 0x25, 0xb1, 0x3a, 0x14, 0xb9, 0x38, 0x6b, 0xac, 0x11, 0x88, 0x43, 0x44, 0x8e, 0x52, 0xd1,
	0x58, 0x57, 0xc8, 0x51, 0x2a, 0xd0, 0x63, 0xe7, 0xcc, 0xf3, 0x45, 0xa3, 0xa2, 0x3c, 0x92, 0x60,
	0x7f, 0x67, 0xc1, 0x56, 0xd3, 0xa1, 0x2f, 0x59, 0x49, 0xd6, 0x21, 0x0f, 0x4c, 0x4a, 0x11, 0xab,
	0xed, 0xfd, 0x6f, 0x7e, 0x6e, 0xae, 0xe7, 0x86, 0xa9, 0xfd, 0x1a, 0xea, 0xdd, 0x71, 0x28, 0x03,
	0xdf, 0x4b, 0xe5, 0x7e, 0x3c, 0x8e, 0xa4, 0x48, 0x30, 0xb0, 0xfd, 0x49, 0x17, 0x11, 0xe7, 0x52,
	0xa6, 0xba, 0x94, 0x4c, 0x88, 0xd9, 0xb0, 0xa1, 0xc5, 0xd6, 0x54, 0x2d, 0x68, 0xed, 0x96, 0xf8,
	0x1c, 0x66, 0x3f, 0x86, 0xd2, 0xf1, 0xcb, 0x66, 0x4f, 0x17, 0xb7, 0x95, 0x17, 0x37, 0x83, 0x92,
	0xeb, 0xe6, 0xe5, 0x4e, 0x63, 0xfb, 0x4f, 0x0b, 0xaa, 0x68, 0xfc, 0x3c, 0x92, 0xc9, 0x94, 0x3d,
	0x82, 0xd2, 0x71, 0xe8, 0x45, 0x3a, 0x04, 0x6c, 0xfe, 0x33, 0xd0, 0x8c, 0x93, 0x1e, 0x2b, 0x92,
	0x7b, 0x83, 0x20, 0xee, 0x44, 0x03, 0x31, 0xd1, 0x25, 0x6d, 0x20, 0x18, 0xf8, 0x16, 0x2d, 0xa5,
	0x52, 0xac, 0x04, 0x4c, 0x50, 0x5b, 0x5c, 0xe9, 0xf4, 0xe2, 0x10, 0xfd, 0xf4, 0xc6, 0xc3, 0xfd,
	0x30, 0x10, 0x91, 0x4c, 0x29, 0xc1, 0x65, 0x6e, 0x20, 0xec, 0x6b, 0x58, 0xd7, 0xa1, 0xa1, 0x44,
	0xd7, 0xf6, 0xee, 0x2f, 0x94, 0xd3, 0x42, 0x00, 0x79, 0x66, 0x6e, 0xff, 0x68, 0xc1, 0x7f, 0x9a,
	0x0e, 0x6e, 0x79, 0x45, 0xd5, 0xfd, 0x14, 0x6a, 0x59, 0x9c, 0x82, 0x9b, 0x12, 0x9d, 0x07, 0x92,
	0x9b, 0xb6, 0xf6, 0x0f, 0x16, 0xd4, 0x29, 0x38, 0x47, 0x32, 0x08, 0x83, 0x77, 0xaa, 0x42, 0xea,
	0x50, 0x6c, 0x86, 0x21, 0x6d, 0xa2, 0xc0, 0x71, 0x88, 0xe9, 0xea, 0xab, 0x60, 0x16, 0x78, 0xa1,
	0x3f, 0xc1, 0x4a, 0xe1, 0x93, 0x4e, 0xd4, 0x72, 0x5d, 0x0a, 0x63, 0x81, 0x67, 0x22, 0x85, 0x7f,
	0xf2, 0x4a, 0x5e, 0x88, 0x04, 0x95, 0x25, 0x52, 0x1a, 0x08, 0x35, 0xc4, 0x38, 0x3a, 0x0e, 0xce,
	0x02, 0x8a, 0x69, 0x81, 0x67, 0xa2, 0xfd, 0x97, 0x05, 0x9b, 0xb4, 0x15, 0x1d, 0x27, 0x6a, 0x91,
	0xfd, 0x89, 0xe2, 0x92, 0x45, 0x5c, 0xca, 0x44, 0xac, 0xbc, 0xfe, 0x84, 0x78, 0xa8, 0x12, 0xac,
	0x25, 0x85, 0x77, 0xcf, 0x87, 0x32, 0x3b, 0x23, 0x94, 0xc4, 0xee, 0x42, 0xa5, 0x3f, 0xa1, 0xe8,
	0xa9, 0x12, 0xde, 0xe4, 0xb9, 0xac, 0xbe, 0x45, 0xad, 0x52, 0x56, 0xab, 0xf0, 0xd9, 0x2a, 0x5c,
	0xad, 0xa2, 0x4a, 0x59, 0x4b, 0x0a, 0xa7, 0x55, 0xd6, 0x33, 0x3c, 0x5b, 0x85, 0x67, 0xab, 0x54,
	0xd4, 0x2a, 0x99, 0x6c, 0xbf, 0x84, 0x4a, 0xfb, 0x2c, 0xc5, 0x84, 0x09, 0xb4, 0xdb, 0xf7, 0x7c,
	0x1a, 0xeb, 0x3a, 0xca, 0x65, 0xf6, 0x90, 0x82, 0xe0, 0x25, 0x6d, 0x21, 0x85, 0x2f, 0xc5, 0x80,
	0x3e, 0xb0, 0xc2, 0xe7, 0x41, 0xfb, 0x97, 0xa2, 0x66, 0xb9, 0xaa, 0x0d, 0xcd, 0x5e, 0x6b, 0xc6,
	0x5e, 0x06, 0xa5, 0x96, 0x17, 0x0d, 0xb2, 0x7a, 0xc2, 0x31, 0x7e, 0xe8, 0xfe, 0x85, 0x17, 0x45,
	0x22, 0xd4, 0xd1, 0xc9, 0x44, 0xf6, 0x18, 0xea, 0xae, 0xf0, 0xe3, 0x68, 0xe0, 0x25, 0xd3, 0xcc,
	0x44, 0x85, 0x69, 0x09, 0x67, 0xf7, 0xa0, 0x8a, 0xde, 0xde, 0x06, 0x03, 0x79, 0xa1, 0xfb, 0xde,
	0x0c, 0xa0, 0xaa, 0x89, 0x83, 0x54, 0x1c, 0x84, 0x71, 0xac, 0x0a, 0x03, 0xab, 0x26, 0x47, 0x50,
	0xdf, 0xf5, 0x26, 0xfd, 0x89, 0x13, 0xbf, 0x15, 0x89, 0x0e, 0x9f, 0x81, 0xb0, 0x67, 0x50, 0x33,
	0x98, 0x48, 0x51, 0x5c, 0xaa, 0xac, 0x45, 0xbe, 0x72, 0x73, 0x0a, 0xf6, 0xa9, 0x66, 0x24, 0x45,
	0x14, 0x79, 0xdc, 0x75, 0x3b, 0x8d, 0xea, 0x4e, 0x71, 0xb7, 0xcc, 0x4d, 0x88, 0x7d, 0x39, 0xab,
	0x5c, 0xb8, 0xae, 0xce, 0xe6, 0x48, 0x98, 0x97, 0x2d, 0xdb, 0x85, 0x62, 0xfb, 0xc0, 0x6d, 0xd4,
	0xae, 0x3b, 0xfe, 0xb2, 0xd4, 0x72, 0x34, 0xb1, 0xbf, 0xb5, 0xf0, 0xcc, 0x23, 0x37, 0x2b, 0xaa,
	0xf0, 0xcf, 0x60, 0x8d, 0xdc, 0x65, 0xc5, 0xdd, 0xb8, 0x66, 0xc7, 0xaa, 0xba, 0xb5, 0x9d, 0xfd,
	0x5b, 0x11, 0xaf, 0x68, 0xaa, 0x59, 0xe5, 0x24, 0xe9, 0x36, 0xf7, 0x35, 0x23, 0x70, 0xb8, 0xd0,
	0x2a, 0x8b, 0x4b, 0xad, 0x32, 0x23, 0x51, 0xc9, 0x20, 0x51, 0xd6, 0x86, 0xd7, 0xde, 0xd3, 0x86,
	0x1f, 0x43, 0x7d, 0x3f, 0x8e, 0x22, 0xa2, 0x6b, 0x3f, 0x18, 0x0a, 0x57, 0xf8, 0x3a, 0xdd, 0x4b,
	0x38, 0xdb, 0x83, 0x5b, 0x9d, 0xc8, 0xa3, 0x4b, 0x13, 0x42, 0xdd, 0x20, 0x0c, 0x03, 0xb4, 0x57,
	0x35, 0x74, 0xad, 0x0e, 0xf7, 0xa6, 0xf3, 0x8b, 0x14, 0xa3, 0x31, 0x76, 0xa9, 0xde, 0x01, 0xe5,
	0xb4, 0xcc, 0x0b, 0xbd, 0x83, 0x45, 0x2a, 0xd4, 0x96, 0xa9, 0x70, 0x0f, 0xaa, 0xfd, 0x49, 0x2b,
	0x90, 0x1c, 0x4b, 0x71, 0x83, 0x26, 0xce, 0x00, 0xf6, 0x08, 0xb6, 0xfa, 0x93, 0xa3, 0x28, 0x98,
	0x1d, 0x69, 0x9b, 0xd4, 0x20, 0x16, 0x50, 0xac, 0xd9, 0x1c, 0xa1, 0x76, 0xb1, 0x45, 0x1b, 0x9f,
	0x07, 0xcd, 0x3e, 0xb3, 0x7d, 0x53, 0x9f, 0xa9, 0x9b, 0x7d, 0xc6, 0xfe, 0x9e, 0x2e, 0x82, 0x2a,
	0x87, 0x2b, 0x22, 0x12, 0x72, 0x5f, 0x1f, 0x69, 0x8a, 0x49, 0x4b, 0x13, 0x0d, 0xca, 0xf0, 0xcc,
	0xd6, 0xfe, 0xdb, 0x82, 0x7a, 0xd3, 0xe9, 0x60, 0x1d, 0xe0, 0x3d, 0x45, 0x11, 0xea, 0xba, 0xfb,
	0x30, 0x83, 0xd2, 0xcb, 0x20, 0xba, 0xd4, 0x5d, 0x8b, 0xc6, 0x48, 0xb3, 0x83, 0x71, 0x18, 0xb6,
	0xc7, 0xa3, 0x50, 0xd3, 0xac, 0xc2, 0x0d, 0x04, 0x4f, 0x64, 0x77, 0x24, 0xc4, 0x40, 0xb7, 0x1c,
	0x25, 0xfc, 0x8b, 0xb6, 0x4c, 0x47, 0x4f, 0x3b, 0x48, 0x7d, 0x2f, 0x19, 0xa4, 0x59, 0x6f, 0x99,
	0x21, 0xe6, 0x71, 0x52, 0xb9, 0xe9, 0x38, 0xa9, 0x9a, 0xc7, 0x89, 0xfd, 0xb3, 0x05, 0x77, 0x8c,
	0xcf, 0x5e, 0x51, 0x0e, 0xbe, 0x01, 0xc8, 0x5d, 0x66, 0x69, 0xb8, 0xbf, 0x38, 0x77, 0x3e, 0xd6,
	0xdc, 0x98, 0xb1, 0xf7, 0x6b, 0x19, 0x36, 0xd4, 0xeb, 0x2b, 0x48, 0x65, 0xe0, 0xa7, 0x8c, 0x63,
	0x72, 0x8c, 0xb7, 0xd7, 0xa1, 0x90, 0x6c, 0x69, 0x33, 0xc6, 0x6b, 0xed, 0xee, 0x83, 0x25, 0xe5,
	0xd2, 0xc3, 0x8d, 0x7c, 0x1a, 0x6f, 0x90, 0x8f, 0xf7, 0xb9, 0xfc, 0x80, 0xe9, 0x61, 0x4b, 0xc2,
	0xa7, 0xc0, 0x07, 0x39, 0xdc, 0x59, 0x54, 0x2e, 0x3d, 0x22, 0xba, 0xb8, 0x47, 0x75, 0x65, 0xfd,
	0x30, 0x97, 0xf7, 0x16, 0x95, 0x73, 0x37, 0x6d, 0x07, 0xb6, 0xcd, 0xae, 0xfd, 0xf1, 0x1b, 0x5c,
	0xea, 0xf8, 0x3d, 0xbc, 0xcd, 0xe7, 0x17, 0xbd, 0xf7, 0x3a, 0xfc, 0x74, 0x51, 0xb9, 0x78, 0x47,
	0xa4, 0xa4, 0x18, 0xfd, 0xe0, 0xe3, 0x93, 0xb2, 0xdc, 0x4c, 0x5e, 0x63, 0x8f, 0x99, 0xa7, 0xf8,
	0x7b, 0xdd, 0x3e, 0xbc, 0x91, 0xad, 0x86, 0xe7, 0xd3, 0x35, 0xfa, 0x57, 0xf0, 0xf9, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0xcb, 0x0a, 0xf6, 0x62, 0x10, 0x00, 0x00,
}
