// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ap_stats.proto

package cheetah

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type APStatsType int32

const (
	// @addtogroup APStatistics
	// @{
	// The type defining the category of statistics to be retrieved
	// /;
	APStatsType_AP_RESERVED APStatsType = 0
	// System level information
	APStatsType_AP_SYSTEM_STATS APStatsType = 1
	// Memory counters
	APStatsType_AP_MEMORY_STATS APStatsType = 2
	// Interface statistics: interface counters, etc
	APStatsType_AP_INTERFACE_STATS APStatsType = 3
	// Routing table
	APStatsType_AP_ROUTING_STATS APStatsType = 4
	// DNS entries
	APStatsType_AP_DNS_STATS APStatsType = 5
	// Radio information
	APStatsType_AP_RADIO_STATS APStatsType = 6
	// WLAN information
	APStatsType_AP_WLAN_STATS APStatsType = 7
	// Wireless Client information
	APStatsType_AP_CLIENT_STATS APStatsType = 8
)

var APStatsType_name = map[int32]string{
	0: "AP_RESERVED",
	1: "AP_SYSTEM_STATS",
	2: "AP_MEMORY_STATS",
	3: "AP_INTERFACE_STATS",
	4: "AP_ROUTING_STATS",
	5: "AP_DNS_STATS",
	6: "AP_RADIO_STATS",
	7: "AP_WLAN_STATS",
	8: "AP_CLIENT_STATS",
}
var APStatsType_value = map[string]int32{
	"AP_RESERVED":        0,
	"AP_SYSTEM_STATS":    1,
	"AP_MEMORY_STATS":    2,
	"AP_INTERFACE_STATS": 3,
	"AP_ROUTING_STATS":   4,
	"AP_DNS_STATS":       5,
	"AP_RADIO_STATS":     6,
	"AP_WLAN_STATS":      7,
	"AP_CLIENT_STATS":    8,
}

func (x APStatsType) String() string {
	return proto.EnumName(APStatsType_name, int32(x))
}
func (APStatsType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// Minimum TimeInterval allowed (in seconds)
type StatsTimeInterval int32

const (
	// Set to 0 if this is a pull operation
	StatsTimeInterval_AP_STATS_UNARY_OPERATION    StatsTimeInterval = 0
	StatsTimeInterval_AP_STATS_ZERO_TIME_INTERVAL StatsTimeInterval = 0
	// Minimum requested interval for push notifications
	StatsTimeInterval_AP_STATS_MIN_TIME_INTERVAL StatsTimeInterval = 5
)

var StatsTimeInterval_name = map[int32]string{
	0: "AP_STATS_UNARY_OPERATION",
	// Duplicate value: 0: "AP_STATS_ZERO_TIME_INTERVAL",
	5: "AP_STATS_MIN_TIME_INTERVAL",
}
var StatsTimeInterval_value = map[string]int32{
	"AP_STATS_UNARY_OPERATION":    0,
	"AP_STATS_ZERO_TIME_INTERVAL": 0,
	"AP_STATS_MIN_TIME_INTERVAL":  5,
}

func (x StatsTimeInterval) String() string {
	return proto.EnumName(StatsTimeInterval_name, int32(x))
}
func (StatsTimeInterval) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

// Request message for statistics
type APStatsRequest struct {
	// The type to be retrieved
	StatsType APStatsType `protobuf:"varint,1,opt,name=StatsType,enum=cheetah.APStatsType" json:"StatsType,omitempty"`
	// The time interval (cadence) that the server should use to push statistics.
	// If set to 0 the server will respond only once
	// For positive values, the connection will remain open and the server will be
	// pushing statistics of this category every TimeInterval seconds
	TimeInterval uint32 `protobuf:"varint,2,opt,name=TimeInterval" json:"TimeInterval,omitempty"`
}

func (m *APStatsRequest) Reset()                    { *m = APStatsRequest{} }
func (m *APStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*APStatsRequest) ProtoMessage()               {}
func (*APStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *APStatsRequest) GetStatsType() APStatsType {
	if m != nil {
		return m.StatsType
	}
	return APStatsType_AP_RESERVED
}

func (m *APStatsRequest) GetTimeInterval() uint32 {
	if m != nil {
		return m.TimeInterval
	}
	return 0
}

// Request message for statistics
type APStatsMsg struct {
	// List of type/interval requests
	StatsRequest []*APStatsRequest `protobuf:"bytes,1,rep,name=StatsRequest" json:"StatsRequest,omitempty"`
}

func (m *APStatsMsg) Reset()                    { *m = APStatsMsg{} }
func (m *APStatsMsg) String() string            { return proto.CompactTextString(m) }
func (*APStatsMsg) ProtoMessage()               {}
func (*APStatsMsg) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *APStatsMsg) GetStatsRequest() []*APStatsRequest {
	if m != nil {
		return m.StatsRequest
	}
	return nil
}

// System Statistics
type APSystemStatsMsgRsp struct {
	// AP MAC Address: "5c-5b-35-0e-02-1c"
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// Uptime since Linux boot, in seconds
	Uptime uint32 `protobuf:"varint,2,opt,name=Uptime" json:"Uptime,omitempty"`
	// When these statistics were gathered
	// Absolute time: "2016-07-15T16:18:39.335026717Z"
	When string `protobuf:"bytes,3,opt,name=When" json:"When,omitempty"`
	// AP Serial Number
	SerialNumber string `protobuf:"bytes,4,opt,name=SerialNumber" json:"SerialNumber,omitempty"`
	// AP Product ID: AP2800, etc
	ProductId string `protobuf:"bytes,5,opt,name=ProductId" json:"ProductId,omitempty"`
}

func (m *APSystemStatsMsgRsp) Reset()                    { *m = APSystemStatsMsgRsp{} }
func (m *APSystemStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APSystemStatsMsgRsp) ProtoMessage()               {}
func (*APSystemStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *APSystemStatsMsgRsp) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *APSystemStatsMsgRsp) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *APSystemStatsMsgRsp) GetWhen() string {
	if m != nil {
		return m.When
	}
	return ""
}

func (m *APSystemStatsMsgRsp) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *APSystemStatsMsgRsp) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

// Data from /proc/meminfo
type MemInfo struct {
	// Total RAM available to Linux in KB
	TotalKB uint32 `protobuf:"varint,1,opt,name=Total_kB,json=TotalKB" json:"Total_kB,omitempty"`
	// Free + Buffers + Cached in KB (approximate)
	AvailableKB uint32 `protobuf:"varint,2,opt,name=Available_kB,json=AvailableKB" json:"Available_kB,omitempty"`
}

func (m *MemInfo) Reset()                    { *m = MemInfo{} }
func (m *MemInfo) String() string            { return proto.CompactTextString(m) }
func (*MemInfo) ProtoMessage()               {}
func (*MemInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *MemInfo) GetTotalKB() uint32 {
	if m != nil {
		return m.TotalKB
	}
	return 0
}

func (m *MemInfo) GetAvailableKB() uint32 {
	if m != nil {
		return m.AvailableKB
	}
	return 0
}

// Data from /proc/slabinfo
type SlabInfo struct {
	// Slab's name
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	// Slab's active_objs
	ActiveObjs int32 `protobuf:"varint,2,opt,name=ActiveObjs" json:"ActiveObjs,omitempty"`
	// Slab's num_objs
	NumObjs int32 `protobuf:"varint,3,opt,name=NumObjs" json:"NumObjs,omitempty"`
	// Slab's objsize
	ObjSize int32 `protobuf:"varint,4,opt,name=ObjSize" json:"ObjSize,omitempty"`
}

func (m *SlabInfo) Reset()                    { *m = SlabInfo{} }
func (m *SlabInfo) String() string            { return proto.CompactTextString(m) }
func (*SlabInfo) ProtoMessage()               {}
func (*SlabInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *SlabInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SlabInfo) GetActiveObjs() int32 {
	if m != nil {
		return m.ActiveObjs
	}
	return 0
}

func (m *SlabInfo) GetNumObjs() int32 {
	if m != nil {
		return m.NumObjs
	}
	return 0
}

func (m *SlabInfo) GetObjSize() int32 {
	if m != nil {
		return m.ObjSize
	}
	return 0
}

// Memory Statistics
type APMemoryStatsMsgRsp struct {
	// Data from /proc/meminfo
	ProcMemInfo *MemInfo `protobuf:"bytes,1,opt,name=ProcMemInfo" json:"ProcMemInfo,omitempty"`
	// Top entry from /proc/slabinfo
	TopProcSlabInfo *SlabInfo `protobuf:"bytes,2,opt,name=TopProcSlabInfo" json:"TopProcSlabInfo,omitempty"`
}

func (m *APMemoryStatsMsgRsp) Reset()                    { *m = APMemoryStatsMsgRsp{} }
func (m *APMemoryStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APMemoryStatsMsgRsp) ProtoMessage()               {}
func (*APMemoryStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *APMemoryStatsMsgRsp) GetProcMemInfo() *MemInfo {
	if m != nil {
		return m.ProcMemInfo
	}
	return nil
}

func (m *APMemoryStatsMsgRsp) GetTopProcSlabInfo() *SlabInfo {
	if m != nil {
		return m.TopProcSlabInfo
	}
	return nil
}

// Entries from /etc/resolv.conf
type APDNSStatsMsgRsp struct {
	// Server's IP address
	IP []string `protobuf:"bytes,1,rep,name=IP" json:"IP,omitempty"`
}

func (m *APDNSStatsMsgRsp) Reset()                    { *m = APDNSStatsMsgRsp{} }
func (m *APDNSStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APDNSStatsMsgRsp) ProtoMessage()               {}
func (*APDNSStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *APDNSStatsMsgRsp) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

// IPv4 route entry
type IPv4Route struct {
	// In the case of the default gateway the Destination is 0.0.0.0/0
	Destination string `protobuf:"bytes,1,opt,name=Destination" json:"Destination,omitempty"`
	// In the case of local subnets the Gateway is empty
	Gateway string `protobuf:"bytes,2,opt,name=Gateway" json:"Gateway,omitempty"`
	// The netmask for the destinate network
	Genmask string `protobuf:"bytes,3,opt,name=Genmask" json:"Genmask,omitempty"`
	// Flags
	Flags string `protobuf:"bytes,4,opt,name=Flags" json:"Flags,omitempty"`
	// The distance to the target
	Metric uint32 `protobuf:"varint,5,opt,name=Metric" json:"Metric,omitempty"`
	// Number of references to this route
	Ref uint32 `protobuf:"varint,6,opt,name=Ref" json:"Ref,omitempty"`
	// Count of lookups for the route
	Use uint32 `protobuf:"varint,7,opt,name=Use" json:"Use,omitempty"`
	// Interface to which packets for this route will be sent
	Iface string `protobuf:"bytes,8,opt,name=Iface" json:"Iface,omitempty"`
}

func (m *IPv4Route) Reset()                    { *m = IPv4Route{} }
func (m *IPv4Route) String() string            { return proto.CompactTextString(m) }
func (*IPv4Route) ProtoMessage()               {}
func (*IPv4Route) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *IPv4Route) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *IPv4Route) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *IPv4Route) GetGenmask() string {
	if m != nil {
		return m.Genmask
	}
	return ""
}

func (m *IPv4Route) GetFlags() string {
	if m != nil {
		return m.Flags
	}
	return ""
}

func (m *IPv4Route) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *IPv4Route) GetRef() uint32 {
	if m != nil {
		return m.Ref
	}
	return 0
}

func (m *IPv4Route) GetUse() uint32 {
	if m != nil {
		return m.Use
	}
	return 0
}

func (m *IPv4Route) GetIface() string {
	if m != nil {
		return m.Iface
	}
	return ""
}

// Network routes
type APRoutingStatsMsgRsp struct {
	IPv4Routes []*IPv4Route `protobuf:"bytes,1,rep,name=IPv4Routes" json:"IPv4Routes,omitempty"`
}

func (m *APRoutingStatsMsgRsp) Reset()                    { *m = APRoutingStatsMsgRsp{} }
func (m *APRoutingStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APRoutingStatsMsgRsp) ProtoMessage()               {}
func (*APRoutingStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *APRoutingStatsMsgRsp) GetIPv4Routes() []*IPv4Route {
	if m != nil {
		return m.IPv4Routes
	}
	return nil
}

// Multicast Counter entry
type MulticastCounter struct {
	// Both multicast & broadcast
	TxMcastPkts uint32 `protobuf:"varint,1,opt,name=TxMcastPkts" json:"TxMcastPkts,omitempty"`
	// Both multicast & broadcast
	TxMcastBytes uint64 `protobuf:"varint,2,opt,name=TxMcastBytes" json:"TxMcastBytes,omitempty"`
}

func (m *MulticastCounter) Reset()                    { *m = MulticastCounter{} }
func (m *MulticastCounter) String() string            { return proto.CompactTextString(m) }
func (*MulticastCounter) ProtoMessage()               {}
func (*MulticastCounter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *MulticastCounter) GetTxMcastPkts() uint32 {
	if m != nil {
		return m.TxMcastPkts
	}
	return 0
}

func (m *MulticastCounter) GetTxMcastBytes() uint64 {
	if m != nil {
		return m.TxMcastBytes
	}
	return 0
}

// WLAN header
type WLAN struct {
	// id of wlan the client is associated with
	// (unambiguous; for computers)
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// SSID of wlan the client is associated with
	// (ambiguous; for humans)
	SSID string `protobuf:"bytes,2,opt,name=SSID" json:"SSID,omitempty"`
}

func (m *WLAN) Reset()                    { *m = WLAN{} }
func (m *WLAN) String() string            { return proto.CompactTextString(m) }
func (*WLAN) ProtoMessage()               {}
func (*WLAN) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *WLAN) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *WLAN) GetSSID() string {
	if m != nil {
		return m.SSID
	}
	return ""
}

// WLAN Entry
type WLANEntry struct {
	// wlan info
	Wlan *WLAN `protobuf:"bytes,1,opt,name=Wlan" json:"Wlan,omitempty"`
	// index into the RadioStats array of the radio this WLAN is using
	RadioIndex uint32 `protobuf:"varint,2,opt,name=RadioIndex" json:"RadioIndex,omitempty"`
	// BSSID of this WLAN on that radio
	BSSID string `protobuf:"bytes,3,opt,name=BSSID" json:"BSSID,omitempty"`
	// name of net_device ("apr0v0")
	Dev string `protobuf:"bytes,4,opt,name=Dev" json:"Dev,omitempty"`
	// number of associated clients on this WLAN on this radio
	NumClients int32 `protobuf:"varint,5,opt,name=NumClients" json:"NumClients,omitempty"`
	// Counters
	Counter *MulticastCounter `protobuf:"bytes,6,opt,name=Counter" json:"Counter,omitempty"`
}

func (m *WLANEntry) Reset()                    { *m = WLANEntry{} }
func (m *WLANEntry) String() string            { return proto.CompactTextString(m) }
func (*WLANEntry) ProtoMessage()               {}
func (*WLANEntry) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *WLANEntry) GetWlan() *WLAN {
	if m != nil {
		return m.Wlan
	}
	return nil
}

func (m *WLANEntry) GetRadioIndex() uint32 {
	if m != nil {
		return m.RadioIndex
	}
	return 0
}

func (m *WLANEntry) GetBSSID() string {
	if m != nil {
		return m.BSSID
	}
	return ""
}

func (m *WLANEntry) GetDev() string {
	if m != nil {
		return m.Dev
	}
	return ""
}

func (m *WLANEntry) GetNumClients() int32 {
	if m != nil {
		return m.NumClients
	}
	return 0
}

func (m *WLANEntry) GetCounter() *MulticastCounter {
	if m != nil {
		return m.Counter
	}
	return nil
}

// WLAN statistics
type APWLANStatsMsgRsp struct {
	// WLAN Entries
	WLANEntries []*WLANEntry `protobuf:"bytes,1,rep,name=WLANEntries" json:"WLANEntries,omitempty"`
}

func (m *APWLANStatsMsgRsp) Reset()                    { *m = APWLANStatsMsgRsp{} }
func (m *APWLANStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APWLANStatsMsgRsp) ProtoMessage()               {}
func (*APWLANStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *APWLANStatsMsgRsp) GetWLANEntries() []*WLANEntry {
	if m != nil {
		return m.WLANEntries
	}
	return nil
}

// Radio utilization
type RadioUtilization struct {
	// channel utilization for any reason (wifi or non-wifi)
	// expressed as a percentage between 0 - 1.0
	All float32 `protobuf:"fixed32,1,opt,name=All" json:"All,omitempty"`
	// channel utilization for transmit by this radio
	// (implicitly InBSS). 0 - 1.0
	Tx float32 `protobuf:"fixed32,2,opt,name=Tx" json:"Tx,omitempty"`
	// channel utilization for receive by this radio of packets
	// destined for this radio. 0 - 1.0
	RxInBSS float32 `protobuf:"fixed32,3,opt,name=RxInBSS" json:"RxInBSS,omitempty"`
	// channel utilization or receive by this radio of packets
	// destined for other radios. 0 - 1.0
	RxOtherBSS float32 `protobuf:"fixed32,4,opt,name=RxOtherBSS" json:"RxOtherBSS,omitempty"`
	// channel utilization for non-wifi data. 0 - 1.0
	NonWifi float32 `protobuf:"fixed32,5,opt,name=NonWifi" json:"NonWifi,omitempty"`
}

func (m *RadioUtilization) Reset()                    { *m = RadioUtilization{} }
func (m *RadioUtilization) String() string            { return proto.CompactTextString(m) }
func (*RadioUtilization) ProtoMessage()               {}
func (*RadioUtilization) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *RadioUtilization) GetAll() float32 {
	if m != nil {
		return m.All
	}
	return 0
}

func (m *RadioUtilization) GetTx() float32 {
	if m != nil {
		return m.Tx
	}
	return 0
}

func (m *RadioUtilization) GetRxInBSS() float32 {
	if m != nil {
		return m.RxInBSS
	}
	return 0
}

func (m *RadioUtilization) GetRxOtherBSS() float32 {
	if m != nil {
		return m.RxOtherBSS
	}
	return 0
}

func (m *RadioUtilization) GetNonWifi() float32 {
	if m != nil {
		return m.NonWifi
	}
	return 0
}

// Radio counters
type RadioCounters struct {
	// total bytes, including TxMcastBytes
	TxBytes uint64 `protobuf:"varint,1,opt,name=TxBytes" json:"TxBytes,omitempty"`
	// total packets, including TxMcastPkts
	TxPkts uint32 `protobuf:"varint,2,opt,name=TxPkts" json:"TxPkts,omitempty"`
	// management frames
	TxMgmt uint32 `protobuf:"varint,3,opt,name=TxMgmt" json:"TxMgmt,omitempty"`
	// total tx errors
	TxErrors uint32 `protobuf:"varint,4,opt,name=TxErrors" json:"TxErrors,omitempty"`
	// total bytes, including RxMcastBytes
	RxBytes uint64 `protobuf:"varint,5,opt,name=RxBytes" json:"RxBytes,omitempty"`
	// total packets, including RxMcastPkts
	RxPkts uint32 `protobuf:"varint,6,opt,name=RxPkts" json:"RxPkts,omitempty"`
	// management frames
	RxMgmt uint32 `protobuf:"varint,7,opt,name=RxMgmt" json:"RxMgmt,omitempty"`
	// total tx errors
	RxErrors uint32 `protobuf:"varint,8,opt,name=RxErrors" json:"RxErrors,omitempty"`
}

func (m *RadioCounters) Reset()                    { *m = RadioCounters{} }
func (m *RadioCounters) String() string            { return proto.CompactTextString(m) }
func (*RadioCounters) ProtoMessage()               {}
func (*RadioCounters) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *RadioCounters) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *RadioCounters) GetTxPkts() uint32 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *RadioCounters) GetTxMgmt() uint32 {
	if m != nil {
		return m.TxMgmt
	}
	return 0
}

func (m *RadioCounters) GetTxErrors() uint32 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *RadioCounters) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *RadioCounters) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *RadioCounters) GetRxMgmt() uint32 {
	if m != nil {
		return m.RxMgmt
	}
	return 0
}

func (m *RadioCounters) GetRxErrors() uint32 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

// DFS State
type DfsState struct {
	// Radio CAC state
	CacState uint32 `protobuf:"varint,1,opt,name=CacState" json:"CacState,omitempty"`
	// true if the radar was detected, false otherwise
	RadarDetected bool `protobuf:"varint,2,opt,name=RadarDetected" json:"RadarDetected,omitempty"`
}

func (m *DfsState) Reset()                    { *m = DfsState{} }
func (m *DfsState) String() string            { return proto.CompactTextString(m) }
func (*DfsState) ProtoMessage()               {}
func (*DfsState) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

func (m *DfsState) GetCacState() uint32 {
	if m != nil {
		return m.CacState
	}
	return 0
}

func (m *DfsState) GetRadarDetected() bool {
	if m != nil {
		return m.RadarDetected
	}
	return false
}

// Radio entry
type RadioEntry struct {
	// device name ("apr0")
	Dev string `protobuf:"bytes,1,opt,name=Dev" json:"Dev,omitempty"`
	// the radio band - "2.4" or "5"
	Band string `protobuf:"bytes,2,opt,name=Band" json:"Band,omitempty"`
	// Wifi channel number
	Channel uint32 `protobuf:"varint,3,opt,name=Channel" json:"Channel,omitempty"`
	// 0 usually, secondary Wifi channel number in 2.4Ghz
	// or 80+80 second channel block
	SecondaryChannel uint32 `protobuf:"varint,4,opt,name=SecondaryChannel" json:"SecondaryChannel,omitempty"`
	// 20Mhz, 40Mhz, ...
	Bandwidth uint32 `protobuf:"varint,5,opt,name=Bandwidth" json:"Bandwidth,omitempty"`
	// measured by the radio in dBmW
	NoiseFloor int32 `protobuf:"varint,6,opt,name=NoiseFloor" json:"NoiseFloor,omitempty"`
	// maximum Transmit power dBmW
	MaxTxPower uint32 `protobuf:"varint,7,opt,name=MaxTxPower" json:"MaxTxPower,omitempty"`
	// Radio utilization
	Utilization *RadioUtilization `protobuf:"bytes,8,opt,name=Utilization" json:"Utilization,omitempty"`
	// Per Antenna RSSI
	AntennaRSSI []int32 `protobuf:"varint,9,rep,packed,name=AntennaRSSI" json:"AntennaRSSI,omitempty"`
	// Radio counters
	Counter *RadioCounters `protobuf:"bytes,10,opt,name=Counter" json:"Counter,omitempty"`
	// Per Antenna RSSI
	DFS *DfsState `protobuf:"bytes,11,opt,name=DFS" json:"DFS,omitempty"`
}

func (m *RadioEntry) Reset()                    { *m = RadioEntry{} }
func (m *RadioEntry) String() string            { return proto.CompactTextString(m) }
func (*RadioEntry) ProtoMessage()               {}
func (*RadioEntry) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{16} }

func (m *RadioEntry) GetDev() string {
	if m != nil {
		return m.Dev
	}
	return ""
}

func (m *RadioEntry) GetBand() string {
	if m != nil {
		return m.Band
	}
	return ""
}

func (m *RadioEntry) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *RadioEntry) GetSecondaryChannel() uint32 {
	if m != nil {
		return m.SecondaryChannel
	}
	return 0
}

func (m *RadioEntry) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *RadioEntry) GetNoiseFloor() int32 {
	if m != nil {
		return m.NoiseFloor
	}
	return 0
}

func (m *RadioEntry) GetMaxTxPower() uint32 {
	if m != nil {
		return m.MaxTxPower
	}
	return 0
}

func (m *RadioEntry) GetUtilization() *RadioUtilization {
	if m != nil {
		return m.Utilization
	}
	return nil
}

func (m *RadioEntry) GetAntennaRSSI() []int32 {
	if m != nil {
		return m.AntennaRSSI
	}
	return nil
}

func (m *RadioEntry) GetCounter() *RadioCounters {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *RadioEntry) GetDFS() *DfsState {
	if m != nil {
		return m.DFS
	}
	return nil
}

// AP Radio Statistics
type APRadioStatsMsgRsp struct {
	// Radio entries
	Radios []*RadioEntry `protobuf:"bytes,1,rep,name=Radios" json:"Radios,omitempty"`
}

func (m *APRadioStatsMsgRsp) Reset()                    { *m = APRadioStatsMsgRsp{} }
func (m *APRadioStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APRadioStatsMsgRsp) ProtoMessage()               {}
func (*APRadioStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

func (m *APRadioStatsMsgRsp) GetRadios() []*RadioEntry {
	if m != nil {
		return m.Radios
	}
	return nil
}

type APClientLegacyRateEntry struct {
	// displaying format of this entry (Mbps: Rx, Tx, Tx-Retries)
	// legacy rate
	Mbps string `protobuf:"bytes,1,opt,name=mbps" json:"mbps,omitempty"`
	// number of rx packets
	RxPkts uint32 `protobuf:"varint,2,opt,name=rxPkts" json:"rxPkts,omitempty"`
	// number of tx packets
	TxPkts uint32 `protobuf:"varint,3,opt,name=txPkts" json:"txPkts,omitempty"`
	// number of tx retries
	TxRetries uint32 `protobuf:"varint,4,opt,name=txRetries" json:"txRetries,omitempty"`
}

func (m *APClientLegacyRateEntry) Reset()                    { *m = APClientLegacyRateEntry{} }
func (m *APClientLegacyRateEntry) String() string            { return proto.CompactTextString(m) }
func (*APClientLegacyRateEntry) ProtoMessage()               {}
func (*APClientLegacyRateEntry) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{18} }

func (m *APClientLegacyRateEntry) GetMbps() string {
	if m != nil {
		return m.Mbps
	}
	return ""
}

func (m *APClientLegacyRateEntry) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *APClientLegacyRateEntry) GetTxPkts() uint32 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *APClientLegacyRateEntry) GetTxRetries() uint32 {
	if m != nil {
		return m.TxRetries
	}
	return 0
}

type APClientHTVHTRateEntry struct {
	// string rate/ss/width
	McsStr string `protobuf:"bytes,1,opt,name=mcsStr" json:"mcsStr,omitempty"`
	// number of rx packets
	RxPkts uint32 `protobuf:"varint,2,opt,name=rxPkts" json:"rxPkts,omitempty"`
	// number of rx AMPDUs
	RxAmpdus uint32 `protobuf:"varint,3,opt,name=rxAmpdus" json:"rxAmpdus,omitempty"`
	// number of tx packets
	TxPkts uint32 `protobuf:"varint,4,opt,name=txPkts" json:"txPkts,omitempty"`
	// number of tx AMPDUs
	TxAmpdus uint32 `protobuf:"varint,5,opt,name=txAmpdus" json:"txAmpdus,omitempty"`
	// number of tx retries
	TxRetries uint32 `protobuf:"varint,6,opt,name=txRetries" json:"txRetries,omitempty"`
}

func (m *APClientHTVHTRateEntry) Reset()                    { *m = APClientHTVHTRateEntry{} }
func (m *APClientHTVHTRateEntry) String() string            { return proto.CompactTextString(m) }
func (*APClientHTVHTRateEntry) ProtoMessage()               {}
func (*APClientHTVHTRateEntry) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{19} }

func (m *APClientHTVHTRateEntry) GetMcsStr() string {
	if m != nil {
		return m.McsStr
	}
	return ""
}

func (m *APClientHTVHTRateEntry) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *APClientHTVHTRateEntry) GetRxAmpdus() uint32 {
	if m != nil {
		return m.RxAmpdus
	}
	return 0
}

func (m *APClientHTVHTRateEntry) GetTxPkts() uint32 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *APClientHTVHTRateEntry) GetTxAmpdus() uint32 {
	if m != nil {
		return m.TxAmpdus
	}
	return 0
}

func (m *APClientHTVHTRateEntry) GetTxRetries() uint32 {
	if m != nil {
		return m.TxRetries
	}
	return 0
}

// Client entry
type APClientEntry struct {
	// The client's MAC address
	MAC string `protobuf:"bytes,2,opt,name=MAC" json:"MAC,omitempty"`
	// The client's IP address
	IP string `protobuf:"bytes,3,opt,name=IP" json:"IP,omitempty"`
	// index into the RadioStats array of the radio the client is
	// associated with
	RadioIndex uint32 `protobuf:"varint,4,opt,name=RadioIndex" json:"RadioIndex,omitempty"`
	// wifi band (2.4, 5) the client is associated on
	Band string `protobuf:"bytes,5,opt,name=Band" json:"Band,omitempty"`
	// WLAN information
	Wlan *WLAN `protobuf:"bytes,6,opt,name=Wlan" json:"Wlan,omitempty"`
	// note this is in seconds, while the inactive time is in millisec
	ConnectedTimeSec uint32 `protobuf:"varint,7,opt,name=ConnectedTimeSec" json:"ConnectedTimeSec,omitempty"`
	// time since the last transmission from the client
	InactiveTimeMilliSec uint32 `protobuf:"varint,8,opt,name=InactiveTimeMilliSec" json:"InactiveTimeMilliSec,omitempty"`
	// of last data transmission from the client
	// (averaged from PerAntennaRSSI)
	RSSI int32 `protobuf:"varint,9,opt,name=RSSI" json:"RSSI,omitempty"`
	// Noise Floor
	NF int32 `protobuf:"varint,10,opt,name=NF" json:"NF,omitempty"`
	// raw RSSIs
	AntennaRSSI []int32 `protobuf:"varint,11,rep,packed,name=AntennaRSSI" json:"AntennaRSSI,omitempty"`
	// tx packets
	TxPackets uint32 `protobuf:"varint,12,opt,name=TxPackets" json:"TxPackets,omitempty"`
	// tx management packets
	TxMgmtPkts uint32 `protobuf:"varint,13,opt,name=TxMgmtPkts" json:"TxMgmtPkts,omitempty"`
	// tx data packets
	TxDataPkts uint32 `protobuf:"varint,14,opt,name=TxDataPkts" json:"TxDataPkts,omitempty"`
	// tx data ampuds
	TxDataAmpdus uint32 `protobuf:"varint,15,opt,name=TxDataAmpdus" json:"TxDataAmpdus,omitempty"`
	// tx data bytes
	TxDataBytes uint64 `protobuf:"varint,16,opt,name=TxDataBytes" json:"TxDataBytes,omitempty"`
	// tx unicast data packets
	TxUnicastDataPkts uint32 `protobuf:"varint,17,opt,name=TxUnicastDataPkts" json:"TxUnicastDataPkts,omitempty"`
	// tx failed packets
	TxFailedPkts uint32 `protobuf:"varint,18,opt,name=TxFailedPkts" json:"TxFailedPkts,omitempty"`
	// rate used by last successfull (acked) tx
	TxBitRate uint32 `protobuf:"varint,19,opt,name=TxBitRate" json:"TxBitRate,omitempty"`
	// rx packets
	RxPackets uint32 `protobuf:"varint,20,opt,name=RxPackets" json:"RxPackets,omitempty"`
	// rx management packets
	RxMgmtPkts uint32 `protobuf:"varint,21,opt,name=RxMgmtPkts" json:"RxMgmtPkts,omitempty"`
	// rx control packets
	RxCtrlPkts uint32 `protobuf:"varint,22,opt,name=RxCtrlPkts" json:"RxCtrlPkts,omitempty"`
	// rx data packets
	RxDataPkts uint32 `protobuf:"varint,23,opt,name=RxDataPkts" json:"RxDataPkts,omitempty"`
	// rx data ampuds
	RxDataAmpdus uint32 `protobuf:"varint,24,opt,name=RxDataAmpdus" json:"RxDataAmpdus,omitempty"`
	// rx data bytes
	RxDataBytes uint64 `protobuf:"varint,25,opt,name=RxDataBytes" json:"RxDataBytes,omitempty"`
	// rx host ppdu len in bits divided by air_time
	RxBitRate uint32 `protobuf:"varint,26,opt,name=RxBitRate" json:"RxBitRate,omitempty"`
	// rx delta data bits since last receive divided by delta time
	RxAvgBps uint32 `protobuf:"varint,27,opt,name=RxAvgBps" json:"RxAvgBps,omitempty"`
	// rx data rssi accumulated since last receive divided by delta time
	RxAvgRssi int32 `protobuf:"varint,28,opt,name=RxAvgRssi" json:"RxAvgRssi,omitempty"`
	// rx last received rate
	RxLastRate uint32 `protobuf:"varint,29,opt,name=RxLastRate" json:"RxLastRate,omitempty"`
	// legacy rate stats
	LegacyRates []*APClientLegacyRateEntry `protobuf:"bytes,30,rep,name=LegacyRates" json:"LegacyRates,omitempty"`
	// ht/vht rate stats
	HTVHTRates []*APClientHTVHTRateEntry `protobuf:"bytes,31,rep,name=HTVHTRates" json:"HTVHTRates,omitempty"`
}

func (m *APClientEntry) Reset()                    { *m = APClientEntry{} }
func (m *APClientEntry) String() string            { return proto.CompactTextString(m) }
func (*APClientEntry) ProtoMessage()               {}
func (*APClientEntry) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{20} }

func (m *APClientEntry) GetMAC() string {
	if m != nil {
		return m.MAC
	}
	return ""
}

func (m *APClientEntry) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *APClientEntry) GetRadioIndex() uint32 {
	if m != nil {
		return m.RadioIndex
	}
	return 0
}

func (m *APClientEntry) GetBand() string {
	if m != nil {
		return m.Band
	}
	return ""
}

func (m *APClientEntry) GetWlan() *WLAN {
	if m != nil {
		return m.Wlan
	}
	return nil
}

func (m *APClientEntry) GetConnectedTimeSec() uint32 {
	if m != nil {
		return m.ConnectedTimeSec
	}
	return 0
}

func (m *APClientEntry) GetInactiveTimeMilliSec() uint32 {
	if m != nil {
		return m.InactiveTimeMilliSec
	}
	return 0
}

func (m *APClientEntry) GetRSSI() int32 {
	if m != nil {
		return m.RSSI
	}
	return 0
}

func (m *APClientEntry) GetNF() int32 {
	if m != nil {
		return m.NF
	}
	return 0
}

func (m *APClientEntry) GetAntennaRSSI() []int32 {
	if m != nil {
		return m.AntennaRSSI
	}
	return nil
}

func (m *APClientEntry) GetTxPackets() uint32 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *APClientEntry) GetTxMgmtPkts() uint32 {
	if m != nil {
		return m.TxMgmtPkts
	}
	return 0
}

func (m *APClientEntry) GetTxDataPkts() uint32 {
	if m != nil {
		return m.TxDataPkts
	}
	return 0
}

func (m *APClientEntry) GetTxDataAmpdus() uint32 {
	if m != nil {
		return m.TxDataAmpdus
	}
	return 0
}

func (m *APClientEntry) GetTxDataBytes() uint64 {
	if m != nil {
		return m.TxDataBytes
	}
	return 0
}

func (m *APClientEntry) GetTxUnicastDataPkts() uint32 {
	if m != nil {
		return m.TxUnicastDataPkts
	}
	return 0
}

func (m *APClientEntry) GetTxFailedPkts() uint32 {
	if m != nil {
		return m.TxFailedPkts
	}
	return 0
}

func (m *APClientEntry) GetTxBitRate() uint32 {
	if m != nil {
		return m.TxBitRate
	}
	return 0
}

func (m *APClientEntry) GetRxPackets() uint32 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *APClientEntry) GetRxMgmtPkts() uint32 {
	if m != nil {
		return m.RxMgmtPkts
	}
	return 0
}

func (m *APClientEntry) GetRxCtrlPkts() uint32 {
	if m != nil {
		return m.RxCtrlPkts
	}
	return 0
}

func (m *APClientEntry) GetRxDataPkts() uint32 {
	if m != nil {
		return m.RxDataPkts
	}
	return 0
}

func (m *APClientEntry) GetRxDataAmpdus() uint32 {
	if m != nil {
		return m.RxDataAmpdus
	}
	return 0
}

func (m *APClientEntry) GetRxDataBytes() uint64 {
	if m != nil {
		return m.RxDataBytes
	}
	return 0
}

func (m *APClientEntry) GetRxBitRate() uint32 {
	if m != nil {
		return m.RxBitRate
	}
	return 0
}

func (m *APClientEntry) GetRxAvgBps() uint32 {
	if m != nil {
		return m.RxAvgBps
	}
	return 0
}

func (m *APClientEntry) GetRxAvgRssi() int32 {
	if m != nil {
		return m.RxAvgRssi
	}
	return 0
}

func (m *APClientEntry) GetRxLastRate() uint32 {
	if m != nil {
		return m.RxLastRate
	}
	return 0
}

func (m *APClientEntry) GetLegacyRates() []*APClientLegacyRateEntry {
	if m != nil {
		return m.LegacyRates
	}
	return nil
}

func (m *APClientEntry) GetHTVHTRates() []*APClientHTVHTRateEntry {
	if m != nil {
		return m.HTVHTRates
	}
	return nil
}

// AP Client statistics
type APClientStatsMsgRsp struct {
	// Client entries
	Clients []*APClientEntry `protobuf:"bytes,1,rep,name=Clients" json:"Clients,omitempty"`
}

func (m *APClientStatsMsgRsp) Reset()                    { *m = APClientStatsMsgRsp{} }
func (m *APClientStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APClientStatsMsgRsp) ProtoMessage()               {}
func (*APClientStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{21} }

func (m *APClientStatsMsgRsp) GetClients() []*APClientEntry {
	if m != nil {
		return m.Clients
	}
	return nil
}

// Interface entry
type APInterfaceEntry struct {
	// name of interface (eth0)
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	// whether the PHY has link
	Link bool `protobuf:"varint,2,opt,name=Link" json:"Link,omitempty"`
	// full duplex
	FullDuplex bool `protobuf:"varint,3,opt,name=FullDuplex" json:"FullDuplex,omitempty"`
	// link speed in units of Mbps (10, 100, 1000, 2500)
	Speed uint32 `protobuf:"varint,4,opt,name=Speed" json:"Speed,omitempty"`
	// RX bytes
	RxBytes uint64 `protobuf:"varint,5,opt,name=RxBytes" json:"RxBytes,omitempty"`
	// RX pkts
	RxPkts uint32 `protobuf:"varint,6,opt,name=RxPkts" json:"RxPkts,omitempty"`
	// RX pkts discarded by forwarding rules, rate limits, ACLs, etc...
	RxDiscards uint32 `protobuf:"varint,7,opt,name=RxDiscards" json:"RxDiscards,omitempty"`
	// TX bytes
	TxBytes uint64 `protobuf:"varint,8,opt,name=TxBytes" json:"TxBytes,omitempty"`
	// TX packets
	TxPkts uint32 `protobuf:"varint,9,opt,name=TxPkts" json:"TxPkts,omitempty"`
}

func (m *APInterfaceEntry) Reset()                    { *m = APInterfaceEntry{} }
func (m *APInterfaceEntry) String() string            { return proto.CompactTextString(m) }
func (*APInterfaceEntry) ProtoMessage()               {}
func (*APInterfaceEntry) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{22} }

func (m *APInterfaceEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APInterfaceEntry) GetLink() bool {
	if m != nil {
		return m.Link
	}
	return false
}

func (m *APInterfaceEntry) GetFullDuplex() bool {
	if m != nil {
		return m.FullDuplex
	}
	return false
}

func (m *APInterfaceEntry) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *APInterfaceEntry) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *APInterfaceEntry) GetRxPkts() uint32 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *APInterfaceEntry) GetRxDiscards() uint32 {
	if m != nil {
		return m.RxDiscards
	}
	return 0
}

func (m *APInterfaceEntry) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *APInterfaceEntry) GetTxPkts() uint32 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

// AP Interface statistics
type APInterfaceStatsMsgRsp struct {
	// Interface entries
	Interfaces []*APInterfaceEntry `protobuf:"bytes,1,rep,name=Interfaces" json:"Interfaces,omitempty"`
}

func (m *APInterfaceStatsMsgRsp) Reset()                    { *m = APInterfaceStatsMsgRsp{} }
func (m *APInterfaceStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APInterfaceStatsMsgRsp) ProtoMessage()               {}
func (*APInterfaceStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{23} }

func (m *APInterfaceStatsMsgRsp) GetInterfaces() []*APInterfaceEntry {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// AP statistics response
type APStatsMsgRsp struct {
	// Corresponding error code
	ErrStatus *APErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Types that are valid to be assigned to MsgRsp:
	//	*APStatsMsgRsp_SystemStats
	//	*APStatsMsgRsp_MemoryStats
	//	*APStatsMsgRsp_InterfaceStats
	//	*APStatsMsgRsp_RoutingStats
	//	*APStatsMsgRsp_DNSStats
	//	*APStatsMsgRsp_RadioStats
	//	*APStatsMsgRsp_WLANStats
	//	*APStatsMsgRsp_ClientStats
	MsgRsp isAPStatsMsgRsp_MsgRsp `protobuf_oneof:"msg_rsp"`
}

func (m *APStatsMsgRsp) Reset()                    { *m = APStatsMsgRsp{} }
func (m *APStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*APStatsMsgRsp) ProtoMessage()               {}
func (*APStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{24} }

type isAPStatsMsgRsp_MsgRsp interface {
	isAPStatsMsgRsp_MsgRsp()
}

type APStatsMsgRsp_SystemStats struct {
	SystemStats *APSystemStatsMsgRsp `protobuf:"bytes,2,opt,name=SystemStats,oneof"`
}
type APStatsMsgRsp_MemoryStats struct {
	MemoryStats *APMemoryStatsMsgRsp `protobuf:"bytes,3,opt,name=MemoryStats,oneof"`
}
type APStatsMsgRsp_InterfaceStats struct {
	InterfaceStats *APInterfaceStatsMsgRsp `protobuf:"bytes,4,opt,name=InterfaceStats,oneof"`
}
type APStatsMsgRsp_RoutingStats struct {
	RoutingStats *APRoutingStatsMsgRsp `protobuf:"bytes,5,opt,name=RoutingStats,oneof"`
}
type APStatsMsgRsp_DNSStats struct {
	DNSStats *APDNSStatsMsgRsp `protobuf:"bytes,6,opt,name=DNSStats,oneof"`
}
type APStatsMsgRsp_RadioStats struct {
	RadioStats *APRadioStatsMsgRsp `protobuf:"bytes,7,opt,name=RadioStats,oneof"`
}
type APStatsMsgRsp_WLANStats struct {
	WLANStats *APWLANStatsMsgRsp `protobuf:"bytes,8,opt,name=WLANStats,oneof"`
}
type APStatsMsgRsp_ClientStats struct {
	ClientStats *APClientStatsMsgRsp `protobuf:"bytes,9,opt,name=ClientStats,oneof"`
}

func (*APStatsMsgRsp_SystemStats) isAPStatsMsgRsp_MsgRsp()    {}
func (*APStatsMsgRsp_MemoryStats) isAPStatsMsgRsp_MsgRsp()    {}
func (*APStatsMsgRsp_InterfaceStats) isAPStatsMsgRsp_MsgRsp() {}
func (*APStatsMsgRsp_RoutingStats) isAPStatsMsgRsp_MsgRsp()   {}
func (*APStatsMsgRsp_DNSStats) isAPStatsMsgRsp_MsgRsp()       {}
func (*APStatsMsgRsp_RadioStats) isAPStatsMsgRsp_MsgRsp()     {}
func (*APStatsMsgRsp_WLANStats) isAPStatsMsgRsp_MsgRsp()      {}
func (*APStatsMsgRsp_ClientStats) isAPStatsMsgRsp_MsgRsp()    {}

func (m *APStatsMsgRsp) GetMsgRsp() isAPStatsMsgRsp_MsgRsp {
	if m != nil {
		return m.MsgRsp
	}
	return nil
}

func (m *APStatsMsgRsp) GetErrStatus() *APErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *APStatsMsgRsp) GetSystemStats() *APSystemStatsMsgRsp {
	if x, ok := m.GetMsgRsp().(*APStatsMsgRsp_SystemStats); ok {
		return x.SystemStats
	}
	return nil
}

func (m *APStatsMsgRsp) GetMemoryStats() *APMemoryStatsMsgRsp {
	if x, ok := m.GetMsgRsp().(*APStatsMsgRsp_MemoryStats); ok {
		return x.MemoryStats
	}
	return nil
}

func (m *APStatsMsgRsp) GetInterfaceStats() *APInterfaceStatsMsgRsp {
	if x, ok := m.GetMsgRsp().(*APStatsMsgRsp_InterfaceStats); ok {
		return x.InterfaceStats
	}
	return nil
}

func (m *APStatsMsgRsp) GetRoutingStats() *APRoutingStatsMsgRsp {
	if x, ok := m.GetMsgRsp().(*APStatsMsgRsp_RoutingStats); ok {
		return x.RoutingStats
	}
	return nil
}

func (m *APStatsMsgRsp) GetDNSStats() *APDNSStatsMsgRsp {
	if x, ok := m.GetMsgRsp().(*APStatsMsgRsp_DNSStats); ok {
		return x.DNSStats
	}
	return nil
}

func (m *APStatsMsgRsp) GetRadioStats() *APRadioStatsMsgRsp {
	if x, ok := m.GetMsgRsp().(*APStatsMsgRsp_RadioStats); ok {
		return x.RadioStats
	}
	return nil
}

func (m *APStatsMsgRsp) GetWLANStats() *APWLANStatsMsgRsp {
	if x, ok := m.GetMsgRsp().(*APStatsMsgRsp_WLANStats); ok {
		return x.WLANStats
	}
	return nil
}

func (m *APStatsMsgRsp) GetClientStats() *APClientStatsMsgRsp {
	if x, ok := m.GetMsgRsp().(*APStatsMsgRsp_ClientStats); ok {
		return x.ClientStats
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*APStatsMsgRsp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _APStatsMsgRsp_OneofMarshaler, _APStatsMsgRsp_OneofUnmarshaler, _APStatsMsgRsp_OneofSizer, []interface{}{
		(*APStatsMsgRsp_SystemStats)(nil),
		(*APStatsMsgRsp_MemoryStats)(nil),
		(*APStatsMsgRsp_InterfaceStats)(nil),
		(*APStatsMsgRsp_RoutingStats)(nil),
		(*APStatsMsgRsp_DNSStats)(nil),
		(*APStatsMsgRsp_RadioStats)(nil),
		(*APStatsMsgRsp_WLANStats)(nil),
		(*APStatsMsgRsp_ClientStats)(nil),
	}
}

func _APStatsMsgRsp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*APStatsMsgRsp)
	// msg_rsp
	switch x := m.MsgRsp.(type) {
	case *APStatsMsgRsp_SystemStats:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SystemStats); err != nil {
			return err
		}
	case *APStatsMsgRsp_MemoryStats:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemoryStats); err != nil {
			return err
		}
	case *APStatsMsgRsp_InterfaceStats:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InterfaceStats); err != nil {
			return err
		}
	case *APStatsMsgRsp_RoutingStats:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RoutingStats); err != nil {
			return err
		}
	case *APStatsMsgRsp_DNSStats:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DNSStats); err != nil {
			return err
		}
	case *APStatsMsgRsp_RadioStats:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RadioStats); err != nil {
			return err
		}
	case *APStatsMsgRsp_WLANStats:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WLANStats); err != nil {
			return err
		}
	case *APStatsMsgRsp_ClientStats:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientStats); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("APStatsMsgRsp.MsgRsp has unexpected type %T", x)
	}
	return nil
}

func _APStatsMsgRsp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*APStatsMsgRsp)
	switch tag {
	case 2: // msg_rsp.SystemStats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APSystemStatsMsgRsp)
		err := b.DecodeMessage(msg)
		m.MsgRsp = &APStatsMsgRsp_SystemStats{msg}
		return true, err
	case 3: // msg_rsp.MemoryStats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APMemoryStatsMsgRsp)
		err := b.DecodeMessage(msg)
		m.MsgRsp = &APStatsMsgRsp_MemoryStats{msg}
		return true, err
	case 4: // msg_rsp.InterfaceStats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APInterfaceStatsMsgRsp)
		err := b.DecodeMessage(msg)
		m.MsgRsp = &APStatsMsgRsp_InterfaceStats{msg}
		return true, err
	case 5: // msg_rsp.RoutingStats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APRoutingStatsMsgRsp)
		err := b.DecodeMessage(msg)
		m.MsgRsp = &APStatsMsgRsp_RoutingStats{msg}
		return true, err
	case 6: // msg_rsp.DNSStats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APDNSStatsMsgRsp)
		err := b.DecodeMessage(msg)
		m.MsgRsp = &APStatsMsgRsp_DNSStats{msg}
		return true, err
	case 7: // msg_rsp.RadioStats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APRadioStatsMsgRsp)
		err := b.DecodeMessage(msg)
		m.MsgRsp = &APStatsMsgRsp_RadioStats{msg}
		return true, err
	case 8: // msg_rsp.WLANStats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APWLANStatsMsgRsp)
		err := b.DecodeMessage(msg)
		m.MsgRsp = &APStatsMsgRsp_WLANStats{msg}
		return true, err
	case 9: // msg_rsp.ClientStats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(APClientStatsMsgRsp)
		err := b.DecodeMessage(msg)
		m.MsgRsp = &APStatsMsgRsp_ClientStats{msg}
		return true, err
	default:
		return false, nil
	}
}

func _APStatsMsgRsp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*APStatsMsgRsp)
	// msg_rsp
	switch x := m.MsgRsp.(type) {
	case *APStatsMsgRsp_SystemStats:
		s := proto.Size(x.SystemStats)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *APStatsMsgRsp_MemoryStats:
		s := proto.Size(x.MemoryStats)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *APStatsMsgRsp_InterfaceStats:
		s := proto.Size(x.InterfaceStats)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *APStatsMsgRsp_RoutingStats:
		s := proto.Size(x.RoutingStats)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *APStatsMsgRsp_DNSStats:
		s := proto.Size(x.DNSStats)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *APStatsMsgRsp_RadioStats:
		s := proto.Size(x.RadioStats)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *APStatsMsgRsp_WLANStats:
		s := proto.Size(x.WLANStats)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *APStatsMsgRsp_ClientStats:
		s := proto.Size(x.ClientStats)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*APStatsRequest)(nil), "cheetah.APStatsRequest")
	proto.RegisterType((*APStatsMsg)(nil), "cheetah.APStatsMsg")
	proto.RegisterType((*APSystemStatsMsgRsp)(nil), "cheetah.APSystemStatsMsgRsp")
	proto.RegisterType((*MemInfo)(nil), "cheetah.MemInfo")
	proto.RegisterType((*SlabInfo)(nil), "cheetah.SlabInfo")
	proto.RegisterType((*APMemoryStatsMsgRsp)(nil), "cheetah.APMemoryStatsMsgRsp")
	proto.RegisterType((*APDNSStatsMsgRsp)(nil), "cheetah.APDNSStatsMsgRsp")
	proto.RegisterType((*IPv4Route)(nil), "cheetah.IPv4Route")
	proto.RegisterType((*APRoutingStatsMsgRsp)(nil), "cheetah.APRoutingStatsMsgRsp")
	proto.RegisterType((*MulticastCounter)(nil), "cheetah.MulticastCounter")
	proto.RegisterType((*WLAN)(nil), "cheetah.WLAN")
	proto.RegisterType((*WLANEntry)(nil), "cheetah.WLANEntry")
	proto.RegisterType((*APWLANStatsMsgRsp)(nil), "cheetah.APWLANStatsMsgRsp")
	proto.RegisterType((*RadioUtilization)(nil), "cheetah.RadioUtilization")
	proto.RegisterType((*RadioCounters)(nil), "cheetah.RadioCounters")
	proto.RegisterType((*DfsState)(nil), "cheetah.DfsState")
	proto.RegisterType((*RadioEntry)(nil), "cheetah.RadioEntry")
	proto.RegisterType((*APRadioStatsMsgRsp)(nil), "cheetah.APRadioStatsMsgRsp")
	proto.RegisterType((*APClientLegacyRateEntry)(nil), "cheetah.APClientLegacyRateEntry")
	proto.RegisterType((*APClientHTVHTRateEntry)(nil), "cheetah.APClientHTVHTRateEntry")
	proto.RegisterType((*APClientEntry)(nil), "cheetah.APClientEntry")
	proto.RegisterType((*APClientStatsMsgRsp)(nil), "cheetah.APClientStatsMsgRsp")
	proto.RegisterType((*APInterfaceEntry)(nil), "cheetah.APInterfaceEntry")
	proto.RegisterType((*APInterfaceStatsMsgRsp)(nil), "cheetah.APInterfaceStatsMsgRsp")
	proto.RegisterType((*APStatsMsgRsp)(nil), "cheetah.APStatsMsgRsp")
	proto.RegisterEnum("cheetah.APStatsType", APStatsType_name, APStatsType_value)
	proto.RegisterEnum("cheetah.StatsTimeInterval", StatsTimeInterval_name, StatsTimeInterval_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APStatistics service

type APStatisticsClient interface {
	// Get statistics
	APStatsGet(ctx context.Context, in *APStatsMsg, opts ...grpc.CallOption) (APStatistics_APStatsGetClient, error)
}

type aPStatisticsClient struct {
	cc *grpc.ClientConn
}

func NewAPStatisticsClient(cc *grpc.ClientConn) APStatisticsClient {
	return &aPStatisticsClient{cc}
}

func (c *aPStatisticsClient) APStatsGet(ctx context.Context, in *APStatsMsg, opts ...grpc.CallOption) (APStatistics_APStatsGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_APStatistics_serviceDesc.Streams[0], c.cc, "/cheetah.APStatistics/APStatsGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPStatisticsAPStatsGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APStatistics_APStatsGetClient interface {
	Recv() (*APStatsMsgRsp, error)
	grpc.ClientStream
}

type aPStatisticsAPStatsGetClient struct {
	grpc.ClientStream
}

func (x *aPStatisticsAPStatsGetClient) Recv() (*APStatsMsgRsp, error) {
	m := new(APStatsMsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for APStatistics service

type APStatisticsServer interface {
	// Get statistics
	APStatsGet(*APStatsMsg, APStatistics_APStatsGetServer) error
}

func RegisterAPStatisticsServer(s *grpc.Server, srv APStatisticsServer) {
	s.RegisterService(&_APStatistics_serviceDesc, srv)
}

func _APStatistics_APStatsGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(APStatsMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APStatisticsServer).APStatsGet(m, &aPStatisticsAPStatsGetServer{stream})
}

type APStatistics_APStatsGetServer interface {
	Send(*APStatsMsgRsp) error
	grpc.ServerStream
}

type aPStatisticsAPStatsGetServer struct {
	grpc.ServerStream
}

func (x *aPStatisticsAPStatsGetServer) Send(m *APStatsMsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

var _APStatistics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cheetah.APStatistics",
	HandlerType: (*APStatisticsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "APStatsGet",
			Handler:       _APStatistics_APStatsGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ap_stats.proto",
}

func init() { proto.RegisterFile("ap_stats.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 2057 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xcd, 0x6e, 0xdb, 0xca,
	0xf5, 0xb7, 0x64, 0xc9, 0x92, 0x8e, 0x6c, 0x47, 0x9e, 0xf8, 0x3a, 0x8c, 0x93, 0x9b, 0xf8, 0xf2,
	0xff, 0x5f, 0x04, 0x69, 0x11, 0x5c, 0xe8, 0x5e, 0xa0, 0x68, 0x83, 0xa2, 0xa5, 0x3e, 0x1c, 0xb3,
	0xb1, 0x64, 0x61, 0x48, 0x27, 0x4d, 0x37, 0x02, 0x2d, 0x4d, 0x6c, 0xde, 0x50, 0xa4, 0x4a, 0x8e,
	0x1c, 0xf9, 0x76, 0x59, 0xa0, 0xe8, 0xa2, 0xbb, 0xbe, 0x4b, 0x9f, 0xa0, 0x9b, 0xa2, 0x6f, 0xd0,
	0xbe, 0x46, 0x1f, 0xa0, 0x38, 0xf3, 0x41, 0x0d, 0x25, 0x67, 0xd3, 0x1d, 0xcf, 0xef, 0x9c, 0x99,
	0xf3, 0x7d, 0x66, 0x86, 0xb0, 0x1f, 0xcc, 0xc7, 0x19, 0x0f, 0x78, 0xf6, 0x6a, 0x9e, 0x26, 0x3c,
	0x21, 0xb5, 0xc9, 0x0d, 0x63, 0x3c, 0xb8, 0x39, 0xfe, 0x2a, 0x98, 0x8f, 0x27, 0xc9, 0x6c, 0x96,
	0xc4, 0x63, 0x7e, 0x37, 0x67, 0x8a, 0x6f, 0xdf, 0xc0, 0xbe, 0x33, 0xf2, 0x70, 0x01, 0x65, 0xbf,
	0x5f, 0xb0, 0x8c, 0x93, 0x36, 0x34, 0x04, 0xed, 0xdf, 0xcd, 0x99, 0x55, 0x3a, 0x29, 0xbd, 0xd8,
	0x6f, 0x1f, 0xbe, 0x52, 0xbb, 0xbc, 0x52, 0xb2, 0xc8, 0xa3, 0x2b, 0x31, 0x62, 0xc3, 0xae, 0x1f,
	0xce, 0x98, 0x1b, 0x73, 0x96, 0xde, 0x06, 0x91, 0x55, 0x3e, 0x29, 0xbd, 0xd8, 0xa3, 0x05, 0xcc,
	0x76, 0x01, 0xd4, 0xea, 0x41, 0x76, 0x4d, 0x5e, 0xc3, 0xae, 0xa9, 0xd5, 0x2a, 0x9d, 0x6c, 0xbf,
	0x68, 0xb6, 0x1f, 0xad, 0x2b, 0x52, 0x6c, 0x5a, 0x10, 0xb6, 0xff, 0x5a, 0x82, 0x87, 0xce, 0xc8,
	0xbb, 0xcb, 0x38, 0x9b, 0xe9, 0x1d, 0x69, 0x36, 0x27, 0xfb, 0x50, 0x76, 0x7b, 0xc2, 0xe6, 0x06,
	0x2d, 0xbb, 0x3d, 0x72, 0x04, 0x3b, 0x97, 0x73, 0x1e, 0xce, 0x98, 0x32, 0x48, 0x51, 0x84, 0x40,
	0xe5, 0xfd, 0x0d, 0x8b, 0xad, 0x6d, 0x21, 0x29, 0xbe, 0xd1, 0x05, 0x8f, 0xa5, 0x61, 0x10, 0x0d,
	0x17, 0xb3, 0x2b, 0x96, 0x5a, 0x15, 0xc1, 0x2b, 0x60, 0xe4, 0x29, 0x34, 0x46, 0x69, 0x32, 0x5d,
	0x4c, 0xb8, 0x3b, 0xb5, 0xaa, 0x42, 0x60, 0x05, 0xd8, 0x6f, 0xa0, 0x36, 0x60, 0x33, 0x37, 0xfe,
	0x98, 0x90, 0xc7, 0x50, 0xf7, 0x13, 0x1e, 0x44, 0xe3, 0x4f, 0x1d, 0x61, 0xce, 0x1e, 0xad, 0x09,
	0xfa, 0x6d, 0x87, 0x7c, 0x03, 0xbb, 0xce, 0x6d, 0x10, 0x46, 0xc1, 0x55, 0xc4, 0x90, 0x2d, 0x2d,
	0x6b, 0xe6, 0xd8, 0xdb, 0x8e, 0x9d, 0x42, 0xdd, 0x8b, 0x82, 0x2b, 0xb1, 0x13, 0x81, 0xca, 0x30,
	0x98, 0x31, 0xe5, 0x94, 0xf8, 0x26, 0xcf, 0x00, 0x9c, 0x09, 0x0f, 0x6f, 0xd9, 0xc5, 0xd5, 0x0f,
	0x99, 0xd8, 0xa0, 0x4a, 0x0d, 0x84, 0x58, 0x50, 0x1b, 0x2e, 0x66, 0x82, 0xb9, 0x2d, 0x98, 0x9a,
	0x44, 0xce, 0xc5, 0xd5, 0x0f, 0x5e, 0xf8, 0x23, 0x13, 0xfe, 0x55, 0xa9, 0x26, 0xed, 0x3f, 0x89,
	0x90, 0x0e, 0xd8, 0x2c, 0x49, 0xef, 0xcc, 0x90, 0xb6, 0xa1, 0x39, 0x4a, 0x93, 0x89, 0x72, 0x4c,
	0x98, 0xd1, 0x6c, 0xb7, 0xf2, 0x34, 0x29, 0x9c, 0x9a, 0x42, 0xe4, 0x35, 0x3c, 0xf0, 0x93, 0x39,
	0x22, 0xda, 0x0d, 0x61, 0x64, 0xb3, 0x7d, 0x90, 0xaf, 0xd3, 0x0c, 0xba, 0x2e, 0x69, 0xdb, 0xd0,
	0x72, 0x46, 0xbd, 0xa1, 0xb7, 0x9e, 0xd7, 0x91, 0x28, 0x11, 0xcc, 0xeb, 0xc8, 0xfe, 0x47, 0x09,
	0x1a, 0xee, 0xe8, 0xf6, 0x7b, 0x9a, 0x2c, 0x38, 0x23, 0x27, 0xd0, 0xec, 0xb1, 0x8c, 0x87, 0x71,
	0xc0, 0xc3, 0x24, 0x56, 0x91, 0x32, 0x21, 0x74, 0xfb, 0x4d, 0xc0, 0xd9, 0xe7, 0xe0, 0x4e, 0x18,
	0xd2, 0xa0, 0x9a, 0x14, 0x1c, 0x16, 0xcf, 0x82, 0xec, 0x93, 0x2a, 0x06, 0x4d, 0x92, 0x43, 0xa8,
	0x9e, 0x46, 0xc1, 0x75, 0xa6, 0x0a, 0x41, 0x12, 0x58, 0x51, 0x03, 0xc6, 0xd3, 0x70, 0x22, 0xd2,
	0xbf, 0x47, 0x15, 0x45, 0x5a, 0xb0, 0x4d, 0xd9, 0x47, 0x6b, 0x47, 0x80, 0xf8, 0x89, 0xc8, 0x65,
	0xc6, 0xac, 0x9a, 0x44, 0x2e, 0x33, 0x86, 0x3b, 0xba, 0x1f, 0x83, 0x09, 0xb3, 0xea, 0x72, 0x47,
	0x41, 0xd8, 0xbf, 0x81, 0x43, 0x67, 0x84, 0x8e, 0x84, 0xf1, 0x75, 0x31, 0xf0, 0x90, 0xbb, 0x98,
	0xa9, 0xf6, 0x20, 0x79, 0xfc, 0x72, 0x16, 0x35, 0xa4, 0xec, 0xdf, 0x42, 0x6b, 0xb0, 0x88, 0x78,
	0x38, 0x09, 0x32, 0xde, 0x4d, 0x16, 0xd8, 0x79, 0x18, 0x1d, 0x7f, 0x39, 0x40, 0x64, 0xf4, 0x89,
	0x67, 0xaa, 0x1a, 0x4d, 0x48, 0x34, 0xaf, 0x24, 0x3b, 0x77, 0xa8, 0x0b, 0x43, 0x54, 0xa1, 0x05,
	0xcc, 0x7e, 0x09, 0x95, 0xf7, 0xe7, 0xce, 0x70, 0xa3, 0xc3, 0x08, 0x54, 0x3c, 0xcf, 0xed, 0xa9,
	0xb0, 0x8a, 0x6f, 0xfb, 0x9f, 0x25, 0x68, 0xa0, 0x70, 0x3f, 0xe6, 0xe9, 0x1d, 0xf9, 0x06, 0x2a,
	0xef, 0xa3, 0x20, 0x56, 0x95, 0xb3, 0x97, 0x7b, 0x80, 0x12, 0x54, 0xb0, 0xb0, 0x9e, 0x69, 0x30,
	0x0d, 0x13, 0x37, 0x9e, 0xb2, 0xa5, 0x6a, 0x08, 0x03, 0xc1, 0xc0, 0x75, 0x84, 0x16, 0x99, 0x22,
	0x49, 0x60, 0x80, 0x7b, 0xec, 0x56, 0xa5, 0x07, 0x3f, 0x71, 0x9f, 0xe1, 0x62, 0xd6, 0x8d, 0x42,
	0x16, 0xf3, 0x4c, 0x24, 0xa8, 0x4a, 0x0d, 0x84, 0x7c, 0x07, 0x35, 0x15, 0x15, 0x91, 0xa8, 0x66,
	0xfb, 0xf1, 0xaa, 0x8e, 0xd7, 0xc2, 0x46, 0xb5, 0xa4, 0xed, 0xc2, 0x81, 0x33, 0x42, 0x63, 0xcd,
	0xe4, 0x7c, 0x0f, 0x4d, 0xed, 0x61, 0x78, 0x4f, 0x76, 0x72, 0xef, 0xa9, 0x29, 0x66, 0xff, 0xb9,
	0x04, 0x2d, 0xe1, 0xd6, 0x25, 0x0f, 0xa3, 0xf0, 0x47, 0x59, 0x9b, 0x2d, 0xd8, 0x76, 0xa2, 0x48,
	0x84, 0xa7, 0x4c, 0xf1, 0x13, 0x63, 0xec, 0xcb, 0x30, 0x94, 0x69, 0xd9, 0x5f, 0x62, 0x8d, 0xd2,
	0xa5, 0x1b, 0x77, 0x3c, 0x4f, 0x04, 0xa0, 0x4c, 0x35, 0x29, 0x02, 0xb7, 0xbc, 0xe0, 0x37, 0x2c,
	0x45, 0x66, 0x45, 0x30, 0x0d, 0x44, 0x0c, 0x82, 0x24, 0x7e, 0x1f, 0x7e, 0x0c, 0x45, 0x34, 0xca,
	0x54, 0x93, 0xf6, 0xbf, 0x4b, 0xb0, 0x27, 0x4c, 0x51, 0x6e, 0x8a, 0xd1, 0xe0, 0x2f, 0x65, 0x01,
	0x94, 0x44, 0x01, 0x68, 0x12, 0x6b, 0xde, 0x5f, 0x8a, 0xe2, 0x51, 0x53, 0x54, 0x52, 0x12, 0x1f,
	0x5c, 0xcf, 0xb8, 0x30, 0x4b, 0xe0, 0x48, 0x91, 0x63, 0xa8, 0xfb, 0xcb, 0x7e, 0x9a, 0x26, 0xa9,
	0x6c, 0x9e, 0x3d, 0x9a, 0xd3, 0xd2, 0x17, 0xa9, 0xa5, 0x2a, 0xb5, 0xd0, 0x95, 0x16, 0x2a, 0xb5,
	0xc8, 0x26, 0x52, 0x94, 0xc4, 0x85, 0x96, 0x9a, 0xc6, 0xb5, 0x16, 0xaa, 0xb5, 0xd4, 0xa5, 0x16,
	0x4d, 0xdb, 0xe7, 0x50, 0xef, 0x7d, 0xcc, 0x30, 0x61, 0x0c, 0xe5, 0xba, 0xc1, 0x44, 0x7c, 0xab,
	0xe2, 0xcf, 0x69, 0xf2, 0xff, 0x22, 0x08, 0x41, 0xda, 0x63, 0x9c, 0x4d, 0x38, 0x9b, 0x0a, 0x07,
	0xeb, 0xb4, 0x08, 0xda, 0x7f, 0xd9, 0x56, 0xf5, 0x29, 0x0b, 0x5a, 0xd5, 0x5d, 0x69, 0x55, 0x77,
	0x04, 0x2a, 0x9d, 0x20, 0x9e, 0xea, 0x26, 0xc0, 0x6f, 0x74, 0xb4, 0x7b, 0x13, 0xc4, 0x31, 0x8b,
	0x54, 0x74, 0x34, 0x49, 0x5e, 0x42, 0xcb, 0x63, 0x93, 0x24, 0x9e, 0x06, 0xe9, 0x9d, 0x16, 0x91,
	0x61, 0xda, 0xc0, 0xf1, 0xc0, 0xc1, 0xdd, 0x3e, 0x87, 0x53, 0x7e, 0xa3, 0x26, 0xce, 0x0a, 0x10,
	0xf5, 0x9e, 0x84, 0x19, 0x3b, 0x8d, 0x92, 0x44, 0x96, 0x34, 0xd6, 0x7b, 0x8e, 0x20, 0x7f, 0x10,
	0x2c, 0xfd, 0xe5, 0x28, 0xf9, 0xcc, 0x52, 0x15, 0x3e, 0x03, 0x21, 0xaf, 0xa1, 0x69, 0x54, 0xa2,
	0x88, 0xa2, 0xd9, 0x13, 0xeb, 0xa5, 0x4a, 0x4d, 0x69, 0x9c, 0x2b, 0x4e, 0xcc, 0x59, 0x1c, 0x07,
	0xd4, 0xf3, 0x5c, 0xab, 0x71, 0xb2, 0xfd, 0xa2, 0x4a, 0x4d, 0x88, 0x7c, 0xbb, 0x6a, 0x37, 0x10,
	0x5b, 0x1f, 0x15, 0xb7, 0xd6, 0xa5, 0x97, 0xf7, 0x1a, 0xf9, 0x3f, 0xd8, 0xee, 0x9d, 0x7a, 0x56,
	0x73, 0xed, 0xb0, 0xd0, 0xb9, 0xa4, 0xc8, 0xb5, 0x1d, 0x20, 0xce, 0x48, 0x6c, 0x60, 0x76, 0xe4,
	0x4f, 0x60, 0x47, 0x60, 0xba, 0x19, 0x1f, 0x16, 0x75, 0xc9, 0x6e, 0x54, 0x22, 0xf6, 0x1f, 0xe0,
	0x91, 0x33, 0x92, 0x53, 0xe1, 0x9c, 0x5d, 0x07, 0x93, 0x3b, 0x1a, 0x70, 0x26, 0xb3, 0x4b, 0xa0,
	0x32, 0xbb, 0x9a, 0x67, 0xfa, 0xbc, 0xc5, 0x6f, 0x2c, 0xc1, 0xb4, 0xd0, 0x00, 0x69, 0x5e, 0x9a,
	0x5c, 0xe2, 0xaa, 0x01, 0x24, 0x85, 0x59, 0xe3, 0x4b, 0xca, 0xe4, 0x6c, 0x90, 0xa9, 0x5d, 0x01,
	0xf6, 0xdf, 0x4a, 0x70, 0xa4, 0xb5, 0x9f, 0xf9, 0xef, 0xce, 0xfc, 0x95, 0xf2, 0x23, 0xd8, 0x99,
	0x4d, 0x32, 0x8f, 0xa7, 0x4a, 0xbd, 0xa2, 0xbe, 0x68, 0xc0, 0x31, 0xd4, 0xd3, 0xa5, 0x33, 0x9b,
	0x4f, 0x17, 0xda, 0x84, 0x9c, 0x36, 0x8c, 0xab, 0x14, 0x8c, 0x3b, 0x86, 0x3a, 0xd7, 0x6b, 0x64,
	0x45, 0xe5, 0x74, 0xd1, 0xf0, 0x9d, 0x75, 0xc3, 0xff, 0x58, 0x87, 0x3d, 0x6d, 0x78, 0xde, 0x0a,
	0x03, 0xa7, 0xab, 0xea, 0x1e, 0x3f, 0xd5, 0x49, 0xbd, 0xad, 0xce, 0x87, 0xd1, 0xda, 0x68, 0xaf,
	0x6c, 0x8c, 0x76, 0xdd, 0x3a, 0x55, 0xa3, 0x75, 0xf4, 0x89, 0xb1, 0xf3, 0xe5, 0x13, 0xe3, 0x25,
	0xb4, 0xba, 0x49, 0x1c, 0x8b, 0xfe, 0xc4, 0x4b, 0xa6, 0xc7, 0x26, 0xaa, 0xbe, 0x37, 0x70, 0xd2,
	0x86, 0x43, 0x37, 0x0e, 0xc4, 0xed, 0x08, 0xa1, 0x41, 0x18, 0x45, 0x21, 0xca, 0xcb, 0xa1, 0x71,
	0x2f, 0x0f, 0xcd, 0x52, 0x55, 0x8d, 0x3d, 0x25, 0xbe, 0xd1, 0xb5, 0xe1, 0xa9, 0xa8, 0xe4, 0x2a,
	0x2d, 0x0f, 0x4f, 0xd7, 0x1b, 0xa0, 0xb9, 0xd9, 0x00, 0x4f, 0xa1, 0xe1, 0x2f, 0x47, 0xc1, 0xe4,
	0x13, 0xe3, 0x99, 0xb5, 0x2b, 0xc3, 0x99, 0x03, 0x18, 0x1a, 0x39, 0x30, 0x45, 0x92, 0xf6, 0x64,
	0x68, 0x56, 0x88, 0xe4, 0xf7, 0x02, 0x1e, 0x08, 0xfe, 0xbe, 0xe6, 0x6b, 0x44, 0x1e, 0xdb, 0x48,
	0xa9, 0x64, 0x3e, 0x50, 0x77, 0x6e, 0x03, 0x93, 0x87, 0x3f, 0xd2, 0x72, 0xe4, 0xb6, 0xc4, 0xc8,
	0x35, 0x21, 0xf2, 0x53, 0x38, 0xf0, 0x97, 0x97, 0xb1, 0x38, 0xfb, 0x72, 0x65, 0x07, 0x62, 0xab,
	0x4d, 0x86, 0xd4, 0x79, 0x1a, 0x84, 0x11, 0x9b, 0x0a, 0x41, 0xa2, 0x75, 0xae, 0x30, 0xe9, 0x75,
	0x27, 0xe4, 0x58, 0xd6, 0xd6, 0x43, 0xed, 0xb5, 0x02, 0x90, 0x4b, 0xf3, 0x98, 0x1c, 0x4a, 0x2e,
	0x35, 0x63, 0x42, 0x57, 0x31, 0xf9, 0x4a, 0x95, 0x4b, 0x21, 0x26, 0x74, 0xd9, 0xe5, 0x69, 0x24,
	0xf8, 0x47, 0x9a, 0xaf, 0x11, 0xc9, 0xcf, 0xdd, 0x78, 0xa4, 0xf9, 0xa6, 0xfd, 0xd4, 0x8c, 0x99,
	0x25, 0xed, 0xa7, 0x6b, 0x31, 0xa3, 0x46, 0xcc, 0x1e, 0xcb, 0x98, 0x19, 0x90, 0xf4, 0x41, 0x7b,
	0x78, 0xac, 0x7d, 0xd0, 0x1e, 0x8a, 0x83, 0xc9, 0xb9, 0xbd, 0xee, 0xcc, 0x33, 0xeb, 0x89, 0x3e,
	0x98, 0x24, 0x2d, 0x57, 0x3a, 0xb7, 0xd7, 0x34, 0xcb, 0x42, 0xeb, 0xa9, 0x28, 0xa5, 0x15, 0x20,
	0xad, 0x3f, 0x0f, 0x32, 0xb9, 0xf1, 0xd7, 0xda, 0x7a, 0x8d, 0x90, 0x0e, 0x34, 0x57, 0xe3, 0x2a,
	0xb3, 0x9e, 0x89, 0x41, 0x77, 0x62, 0x3c, 0x99, 0xee, 0x1d, 0x69, 0xd4, 0x5c, 0x44, 0x7e, 0x05,
	0x90, 0x0f, 0x9d, 0xcc, 0x7a, 0x2e, 0xb6, 0x78, 0xbe, 0xb1, 0x45, 0x71, 0x2e, 0x51, 0x63, 0x89,
	0xfd, 0x06, 0xdf, 0x09, 0x52, 0xca, 0x9c, 0xbf, 0x38, 0xec, 0xd5, 0xc5, 0x4b, 0x0e, 0xe0, 0xa3,
	0x8d, 0x4d, 0xe5, 0x5e, 0x5a, 0xcc, 0xfe, 0x4f, 0x09, 0x6f, 0xfa, 0xe2, 0x79, 0x88, 0x17, 0xe1,
	0x7c, 0xfc, 0x6e, 0x3c, 0x77, 0x08, 0x54, 0xce, 0xc3, 0xf8, 0x93, 0x3a, 0x9c, 0xc5, 0x37, 0x86,
	0xea, 0x74, 0x11, 0x45, 0xbd, 0xc5, 0x3c, 0x62, 0x4b, 0x31, 0x6f, 0xea, 0xd4, 0x40, 0xf0, 0xca,
	0xe8, 0xcd, 0x19, 0x9b, 0xaa, 0x91, 0x23, 0x89, 0xff, 0xe1, 0xf6, 0x21, 0x0b, 0x2a, 0xcc, 0x26,
	0x41, 0x3a, 0xcd, 0xf4, 0x11, 0xba, 0x42, 0xcc, 0x5b, 0x53, 0xfd, 0x4b, 0xb7, 0xa6, 0x86, 0x79,
	0x6b, 0xb2, 0x3d, 0x9c, 0xfe, 0xb9, 0xd7, 0x66, 0x08, 0x7f, 0x0e, 0x90, 0xe3, 0x3a, 0x8a, 0x8f,
	0x8d, 0x28, 0x16, 0x43, 0x45, 0x0d, 0x61, 0xfb, 0x5f, 0x15, 0x1c, 0xcd, 0xc5, 0x1b, 0x6a, 0xa3,
	0x9f, 0xa6, 0x88, 0x2c, 0x32, 0x75, 0xf7, 0x36, 0x33, 0x22, 0x2e, 0x4a, 0x92, 0x4b, 0x57, 0x82,
	0xe4, 0xd7, 0xd0, 0x34, 0x5e, 0xd5, 0xea, 0xd5, 0xf6, 0xd4, 0x7c, 0x94, 0xaf, 0xbf, 0xb9, 0xcf,
	0xb6, 0xa8, 0xb9, 0x04, 0x77, 0x30, 0x1e, 0x91, 0x22, 0x33, 0xc5, 0x1d, 0x36, 0x9e, 0x98, 0xb8,
	0x83, 0x01, 0x12, 0x17, 0xf6, 0x8b, 0xe1, 0x11, 0x39, 0x2c, 0x56, 0xe9, 0x7d, 0xf1, 0x3b, 0xdb,
	0xa2, 0x6b, 0x0b, 0x49, 0x17, 0x76, 0xcd, 0x97, 0x95, 0x48, 0x7a, 0xb3, 0xfd, 0xb5, 0xb1, 0xd1,
	0xe6, 0xc3, 0xeb, 0x6c, 0x8b, 0x16, 0x16, 0x91, 0x9f, 0x41, 0x5d, 0x3f, 0x47, 0x37, 0x9e, 0x0d,
	0xeb, 0x2f, 0xd5, 0xb3, 0x2d, 0x9a, 0x0b, 0x93, 0x5f, 0xaa, 0xb3, 0x4f, 0x2e, 0xad, 0x89, 0xa5,
	0x4f, 0x4c, 0xdd, 0x6b, 0x77, 0x98, 0xb3, 0x2d, 0x6a, 0x2c, 0x20, 0xbf, 0x90, 0xaf, 0x28, 0xb9,
	0x5a, 0xde, 0xcd, 0x8e, 0x8d, 0xd5, 0x6b, 0x4f, 0x92, 0xb3, 0x2d, 0xba, 0x12, 0xc7, 0x2c, 0x18,
	0x2d, 0x2a, 0x2a, 0xb0, 0x98, 0x85, 0x8d, 0x06, 0xc6, 0x2c, 0x18, 0x60, 0xa7, 0x01, 0xb5, 0x59,
	0x76, 0x3d, 0x4e, 0xb3, 0xf9, 0xcb, 0xbf, 0x97, 0xa0, 0x69, 0xfc, 0xf7, 0x21, 0x0f, 0x90, 0x1c,
	0xd3, 0xbe, 0xd7, 0xa7, 0xef, 0xfa, 0xbd, 0xd6, 0x16, 0x79, 0x08, 0x0f, 0x9c, 0xd1, 0xd8, 0xfb,
	0xe0, 0xf9, 0xfd, 0xc1, 0xd8, 0xf3, 0x1d, 0xdf, 0x6b, 0x95, 0x14, 0x38, 0xe8, 0x0f, 0x2e, 0xe8,
	0x07, 0x05, 0x96, 0xc9, 0x11, 0xde, 0xdd, 0xc6, 0xee, 0xd0, 0xef, 0xd3, 0x53, 0xa7, 0xdb, 0x57,
	0xf8, 0x36, 0x39, 0xc4, 0x51, 0x30, 0xa6, 0x17, 0x97, 0xbe, 0x3b, 0x7c, 0xa3, 0xd0, 0x0a, 0x69,
	0xc1, 0xae, 0x33, 0x1a, 0xf7, 0x86, 0x9e, 0x42, 0xaa, 0x84, 0xc0, 0x3e, 0xca, 0x39, 0x3d, 0xf7,
	0x42, 0x61, 0x3b, 0xe4, 0x00, 0x4b, 0x7f, 0x8c, 0xbe, 0x2b, 0xa8, 0xa6, 0x74, 0x77, 0xcf, 0xdd,
	0xfe, 0xd0, 0x57, 0x60, 0xfd, 0xe5, 0x2d, 0x1c, 0x48, 0x1f, 0x8c, 0x9f, 0x52, 0xe4, 0x29, 0x58,
	0x68, 0x3a, 0x8a, 0x8c, 0x2f, 0x87, 0x0e, 0xfd, 0x30, 0xbe, 0x18, 0xf5, 0xa9, 0xe3, 0xbb, 0x17,
	0xc3, 0xd6, 0x16, 0x79, 0x0e, 0x4f, 0x72, 0xee, 0xef, 0xfa, 0xf4, 0x62, 0xec, 0xbb, 0x83, 0xbe,
	0x34, 0xff, 0x9d, 0x73, 0xde, 0xda, 0x22, 0xcf, 0xe0, 0x38, 0x17, 0x18, 0xb8, 0xc3, 0x35, 0x7e,
	0xf5, 0xb8, 0xdc, 0x2a, 0xb5, 0xdf, 0xa2, 0x17, 0xa8, 0x39, 0xcc, 0x78, 0x38, 0xc9, 0xc8, 0xeb,
	0xfc, 0x3f, 0xd8, 0x1b, 0xc6, 0xc9, 0xc3, 0xf5, 0x3f, 0x5e, 0x83, 0xec, 0xfa, 0xf8, 0xe8, 0x1e,
	0x90, 0x66, 0xf3, 0x6f, 0x4b, 0x57, 0x3b, 0xe2, 0xaf, 0xdd, 0x77, 0xff, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x4b, 0xac, 0xe0, 0x09, 0xe7, 0x13, 0x00, 0x00,
}
